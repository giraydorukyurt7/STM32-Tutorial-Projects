
009_3_HAL_USART_SEND_DATA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000027f8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002988  08002988  00012988  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029f4  080029f4  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  080029f4  080029f4  000129f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080029fc  080029fc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029fc  080029fc  000129fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a00  08002a00  00012a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          000001e8  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007061  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000133e  00000000  00000000  00027130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000638  00000000  00000000  00028470  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004b9  00000000  00000000  00028aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00020023  00000000  00000000  00028f61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000080b4  00000000  00000000  00048f84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c27af  00000000  00000000  00051038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d60  00000000  00000000  001137e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00115548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002970 	.word	0x08002970

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002970 	.word	0x08002970

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 f9de 	bl	8000930 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f828 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f8ae 	bl	80006d8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800057c:	f000 f882 	bl	8000684 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, sprintf(tx_buff, "Hello World!\n"), 100);
 8000580:	490d      	ldr	r1, [pc, #52]	; (80005b8 <main+0x4c>)
 8000582:	480e      	ldr	r0, [pc, #56]	; (80005bc <main+0x50>)
 8000584:	f001 fd50 	bl	8002028 <siprintf>
 8000588:	4603      	mov	r3, r0
 800058a:	b29a      	uxth	r2, r3
 800058c:	2364      	movs	r3, #100	; 0x64
 800058e:	490b      	ldr	r1, [pc, #44]	; (80005bc <main+0x50>)
 8000590:	480b      	ldr	r0, [pc, #44]	; (80005c0 <main+0x54>)
 8000592:	f001 f98d 	bl	80018b0 <HAL_UART_Transmit>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, sprintf(tx_buff, "Giray-Sama!\n"), 100);
 8000596:	490b      	ldr	r1, [pc, #44]	; (80005c4 <main+0x58>)
 8000598:	4808      	ldr	r0, [pc, #32]	; (80005bc <main+0x50>)
 800059a:	f001 fd45 	bl	8002028 <siprintf>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2364      	movs	r3, #100	; 0x64
 80005a4:	4905      	ldr	r1, [pc, #20]	; (80005bc <main+0x50>)
 80005a6:	4806      	ldr	r0, [pc, #24]	; (80005c0 <main+0x54>)
 80005a8:	f001 f982 	bl	80018b0 <HAL_UART_Transmit>
	  HAL_Delay(500);
 80005ac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80005b0:	f000 fa30 	bl	8000a14 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)tx_buff, sprintf(tx_buff, "Giray-Sama!\n"), 100);
 80005b4:	e7ef      	b.n	8000596 <main+0x2a>
 80005b6:	bf00      	nop
 80005b8:	08002988 	.word	0x08002988
 80005bc:	200000c0 	.word	0x200000c0
 80005c0:	20000078 	.word	0x20000078
 80005c4:	08002998 	.word	0x08002998

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b094      	sub	sp, #80	; 0x50
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0320 	add.w	r3, r7, #32
 80005d2:	2230      	movs	r2, #48	; 0x30
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f001 fd46 	bl	8002068 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 030c 	add.w	r3, r7, #12
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005ec:	2300      	movs	r3, #0
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	4b22      	ldr	r3, [pc, #136]	; (800067c <SystemClock_Config+0xb4>)
 80005f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f4:	4a21      	ldr	r2, [pc, #132]	; (800067c <SystemClock_Config+0xb4>)
 80005f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005fa:	6413      	str	r3, [r2, #64]	; 0x40
 80005fc:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SystemClock_Config+0xb4>)
 80005fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000600:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000604:	60bb      	str	r3, [r7, #8]
 8000606:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000608:	2300      	movs	r3, #0
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <SystemClock_Config+0xb8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	4a1b      	ldr	r2, [pc, #108]	; (8000680 <SystemClock_Config+0xb8>)
 8000612:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000616:	6013      	str	r3, [r2, #0]
 8000618:	4b19      	ldr	r3, [pc, #100]	; (8000680 <SystemClock_Config+0xb8>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000620:	607b      	str	r3, [r7, #4]
 8000622:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000624:	2302      	movs	r3, #2
 8000626:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000628:	2301      	movs	r3, #1
 800062a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800062c:	2310      	movs	r3, #16
 800062e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000630:	2300      	movs	r3, #0
 8000632:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0320 	add.w	r3, r7, #32
 8000638:	4618      	mov	r0, r3
 800063a:	f000 fc91 	bl	8000f60 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000644:	f000 f862 	bl	800070c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800064c:	2300      	movs	r3, #0
 800064e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800065c:	f107 030c 	add.w	r3, r7, #12
 8000660:	2100      	movs	r1, #0
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fef4 	bl	8001450 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800066e:	f000 f84d 	bl	800070c <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000688:	4b11      	ldr	r3, [pc, #68]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800068a:	4a12      	ldr	r2, [pc, #72]	; (80006d4 <MX_USART3_UART_Init+0x50>)
 800068c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800068e:	4b10      	ldr	r3, [pc, #64]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000690:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000694:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000696:	4b0e      	ldr	r3, [pc, #56]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 8000698:	2200      	movs	r2, #0
 800069a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800069c:	4b0c      	ldr	r3, [pc, #48]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 800069e:	2200      	movs	r2, #0
 80006a0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006a2:	4b0b      	ldr	r3, [pc, #44]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006aa:	220c      	movs	r2, #12
 80006ac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ae:	4b08      	ldr	r3, [pc, #32]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ba:	4805      	ldr	r0, [pc, #20]	; (80006d0 <MX_USART3_UART_Init+0x4c>)
 80006bc:	f001 f8a8 	bl	8001810 <HAL_UART_Init>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006c6:	f000 f821 	bl	800070c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	bd80      	pop	{r7, pc}
 80006ce:	bf00      	nop
 80006d0:	20000078 	.word	0x20000078
 80006d4:	40004800 	.word	0x40004800

080006d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	2300      	movs	r3, #0
 80006e0:	607b      	str	r3, [r7, #4]
 80006e2:	4b09      	ldr	r3, [pc, #36]	; (8000708 <MX_GPIO_Init+0x30>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	4a08      	ldr	r2, [pc, #32]	; (8000708 <MX_GPIO_Init+0x30>)
 80006e8:	f043 0302 	orr.w	r3, r3, #2
 80006ec:	6313      	str	r3, [r2, #48]	; 0x30
 80006ee:	4b06      	ldr	r3, [pc, #24]	; (8000708 <MX_GPIO_Init+0x30>)
 80006f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f2:	f003 0302 	and.w	r3, r3, #2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80006fa:	bf00      	nop
 80006fc:	370c      	adds	r7, #12
 80006fe:	46bd      	mov	sp, r7
 8000700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000704:	4770      	bx	lr
 8000706:	bf00      	nop
 8000708:	40023800 	.word	0x40023800

0800070c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000710:	b672      	cpsid	i
}
 8000712:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000714:	e7fe      	b.n	8000714 <Error_Handler+0x8>
	...

08000718 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <HAL_MspInit+0x4c>)
 8000724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000726:	4a0f      	ldr	r2, [pc, #60]	; (8000764 <HAL_MspInit+0x4c>)
 8000728:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800072c:	6453      	str	r3, [r2, #68]	; 0x44
 800072e:	4b0d      	ldr	r3, [pc, #52]	; (8000764 <HAL_MspInit+0x4c>)
 8000730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000732:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	2300      	movs	r3, #0
 800073c:	603b      	str	r3, [r7, #0]
 800073e:	4b09      	ldr	r3, [pc, #36]	; (8000764 <HAL_MspInit+0x4c>)
 8000740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000742:	4a08      	ldr	r2, [pc, #32]	; (8000764 <HAL_MspInit+0x4c>)
 8000744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000748:	6413      	str	r3, [r2, #64]	; 0x40
 800074a:	4b06      	ldr	r3, [pc, #24]	; (8000764 <HAL_MspInit+0x4c>)
 800074c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800074e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000752:	603b      	str	r3, [r7, #0]
 8000754:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000756:	bf00      	nop
 8000758:	370c      	adds	r7, #12
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b08a      	sub	sp, #40	; 0x28
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000770:	f107 0314 	add.w	r3, r7, #20
 8000774:	2200      	movs	r2, #0
 8000776:	601a      	str	r2, [r3, #0]
 8000778:	605a      	str	r2, [r3, #4]
 800077a:	609a      	str	r2, [r3, #8]
 800077c:	60da      	str	r2, [r3, #12]
 800077e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4a19      	ldr	r2, [pc, #100]	; (80007ec <HAL_UART_MspInit+0x84>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d12c      	bne.n	80007e4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	613b      	str	r3, [r7, #16]
 800078e:	4b18      	ldr	r3, [pc, #96]	; (80007f0 <HAL_UART_MspInit+0x88>)
 8000790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000792:	4a17      	ldr	r2, [pc, #92]	; (80007f0 <HAL_UART_MspInit+0x88>)
 8000794:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000798:	6413      	str	r3, [r2, #64]	; 0x40
 800079a:	4b15      	ldr	r3, [pc, #84]	; (80007f0 <HAL_UART_MspInit+0x88>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80007a2:	613b      	str	r3, [r7, #16]
 80007a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007a6:	2300      	movs	r3, #0
 80007a8:	60fb      	str	r3, [r7, #12]
 80007aa:	4b11      	ldr	r3, [pc, #68]	; (80007f0 <HAL_UART_MspInit+0x88>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a10      	ldr	r2, [pc, #64]	; (80007f0 <HAL_UART_MspInit+0x88>)
 80007b0:	f043 0302 	orr.w	r3, r3, #2
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b0e      	ldr	r3, [pc, #56]	; (80007f0 <HAL_UART_MspInit+0x88>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0302 	and.w	r3, r3, #2
 80007be:	60fb      	str	r3, [r7, #12]
 80007c0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80007c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80007c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c8:	2302      	movs	r3, #2
 80007ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d0:	2303      	movs	r3, #3
 80007d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007d4:	2307      	movs	r3, #7
 80007d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d8:	f107 0314 	add.w	r3, r7, #20
 80007dc:	4619      	mov	r1, r3
 80007de:	4805      	ldr	r0, [pc, #20]	; (80007f4 <HAL_UART_MspInit+0x8c>)
 80007e0:	f000 fa22 	bl	8000c28 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80007e4:	bf00      	nop
 80007e6:	3728      	adds	r7, #40	; 0x28
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	40004800 	.word	0x40004800
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40020400 	.word	0x40020400

080007f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007fc:	e7fe      	b.n	80007fc <NMI_Handler+0x4>

080007fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007fe:	b480      	push	{r7}
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000802:	e7fe      	b.n	8000802 <HardFault_Handler+0x4>

08000804 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000808:	e7fe      	b.n	8000808 <MemManage_Handler+0x4>

0800080a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800080a:	b480      	push	{r7}
 800080c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080e:	e7fe      	b.n	800080e <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	e7fe      	b.n	8000814 <UsageFault_Handler+0x4>

08000816 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000816:	b480      	push	{r7}
 8000818:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081a:	bf00      	nop
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr

08000824 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	46bd      	mov	sp, r7
 800082c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000830:	4770      	bx	lr

08000832 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000832:	b480      	push	{r7}
 8000834:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000844:	f000 f8c6 	bl	80009d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}

0800084c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b086      	sub	sp, #24
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000854:	4a14      	ldr	r2, [pc, #80]	; (80008a8 <_sbrk+0x5c>)
 8000856:	4b15      	ldr	r3, [pc, #84]	; (80008ac <_sbrk+0x60>)
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000860:	4b13      	ldr	r3, [pc, #76]	; (80008b0 <_sbrk+0x64>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2b00      	cmp	r3, #0
 8000866:	d102      	bne.n	800086e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000868:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <_sbrk+0x64>)
 800086a:	4a12      	ldr	r2, [pc, #72]	; (80008b4 <_sbrk+0x68>)
 800086c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800086e:	4b10      	ldr	r3, [pc, #64]	; (80008b0 <_sbrk+0x64>)
 8000870:	681a      	ldr	r2, [r3, #0]
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4413      	add	r3, r2
 8000876:	693a      	ldr	r2, [r7, #16]
 8000878:	429a      	cmp	r2, r3
 800087a:	d207      	bcs.n	800088c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800087c:	f001 fbfc 	bl	8002078 <__errno>
 8000880:	4603      	mov	r3, r0
 8000882:	220c      	movs	r2, #12
 8000884:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000886:	f04f 33ff 	mov.w	r3, #4294967295
 800088a:	e009      	b.n	80008a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800088c:	4b08      	ldr	r3, [pc, #32]	; (80008b0 <_sbrk+0x64>)
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000892:	4b07      	ldr	r3, [pc, #28]	; (80008b0 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	4a05      	ldr	r2, [pc, #20]	; (80008b0 <_sbrk+0x64>)
 800089c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800089e:	68fb      	ldr	r3, [r7, #12]
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3718      	adds	r7, #24
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20020000 	.word	0x20020000
 80008ac:	00000400 	.word	0x00000400
 80008b0:	200000f4 	.word	0x200000f4
 80008b4:	20000248 	.word	0x20000248

080008b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b8:	b480      	push	{r7}
 80008ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008bc:	4b06      	ldr	r3, [pc, #24]	; (80008d8 <SystemInit+0x20>)
 80008be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008c2:	4a05      	ldr	r2, [pc, #20]	; (80008d8 <SystemInit+0x20>)
 80008c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008cc:	bf00      	nop
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000914 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80008e0:	f7ff ffea 	bl	80008b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008e4:	480c      	ldr	r0, [pc, #48]	; (8000918 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80008e6:	490d      	ldr	r1, [pc, #52]	; (800091c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80008e8:	4a0d      	ldr	r2, [pc, #52]	; (8000920 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80008ea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ec:	e002      	b.n	80008f4 <LoopCopyDataInit>

080008ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f2:	3304      	adds	r3, #4

080008f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f8:	d3f9      	bcc.n	80008ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fa:	4a0a      	ldr	r2, [pc, #40]	; (8000924 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80008fc:	4c0a      	ldr	r4, [pc, #40]	; (8000928 <LoopFillZerobss+0x22>)
  movs r3, #0
 80008fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000900:	e001      	b.n	8000906 <LoopFillZerobss>

08000902 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000902:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000904:	3204      	adds	r2, #4

08000906 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000906:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000908:	d3fb      	bcc.n	8000902 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800090a:	f001 fbbb 	bl	8002084 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090e:	f7ff fe2d 	bl	800056c <main>
  bx  lr    
 8000912:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000914:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800091c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000920:	08002a04 	.word	0x08002a04
  ldr r2, =_sbss
 8000924:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000928:	20000244 	.word	0x20000244

0800092c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800092c:	e7fe      	b.n	800092c <ADC_IRQHandler>
	...

08000930 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <HAL_Init+0x40>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a0d      	ldr	r2, [pc, #52]	; (8000970 <HAL_Init+0x40>)
 800093a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000940:	4b0b      	ldr	r3, [pc, #44]	; (8000970 <HAL_Init+0x40>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a0a      	ldr	r2, [pc, #40]	; (8000970 <HAL_Init+0x40>)
 8000946:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800094a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x40>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x40>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f931 	bl	8000bc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	200f      	movs	r0, #15
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fed8 	bl	8000718 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40023c00 	.word	0x40023c00

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f93b 	bl	8000c0e <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f911 	bl	8000bd6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200000f8 	.word	0x200000f8

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200000f8 	.word	0x200000f8

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	6039      	str	r1, [r7, #0]
 8000aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	db0a      	blt.n	8000aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ad4:	683b      	ldr	r3, [r7, #0]
 8000ad6:	b2da      	uxtb	r2, r3
 8000ad8:	490c      	ldr	r1, [pc, #48]	; (8000b0c <__NVIC_SetPriority+0x4c>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	0112      	lsls	r2, r2, #4
 8000ae0:	b2d2      	uxtb	r2, r2
 8000ae2:	440b      	add	r3, r1
 8000ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ae8:	e00a      	b.n	8000b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aea:	683b      	ldr	r3, [r7, #0]
 8000aec:	b2da      	uxtb	r2, r3
 8000aee:	4908      	ldr	r1, [pc, #32]	; (8000b10 <__NVIC_SetPriority+0x50>)
 8000af0:	79fb      	ldrb	r3, [r7, #7]
 8000af2:	f003 030f 	and.w	r3, r3, #15
 8000af6:	3b04      	subs	r3, #4
 8000af8:	0112      	lsls	r2, r2, #4
 8000afa:	b2d2      	uxtb	r2, r2
 8000afc:	440b      	add	r3, r1
 8000afe:	761a      	strb	r2, [r3, #24]
}
 8000b00:	bf00      	nop
 8000b02:	370c      	adds	r7, #12
 8000b04:	46bd      	mov	sp, r7
 8000b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0a:	4770      	bx	lr
 8000b0c:	e000e100 	.word	0xe000e100
 8000b10:	e000ed00 	.word	0xe000ed00

08000b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b089      	sub	sp, #36	; 0x24
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	f003 0307 	and.w	r3, r3, #7
 8000b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b28:	69fb      	ldr	r3, [r7, #28]
 8000b2a:	f1c3 0307 	rsb	r3, r3, #7
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	bf28      	it	cs
 8000b32:	2304      	movcs	r3, #4
 8000b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b36:	69fb      	ldr	r3, [r7, #28]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	2b06      	cmp	r3, #6
 8000b3c:	d902      	bls.n	8000b44 <NVIC_EncodePriority+0x30>
 8000b3e:	69fb      	ldr	r3, [r7, #28]
 8000b40:	3b03      	subs	r3, #3
 8000b42:	e000      	b.n	8000b46 <NVIC_EncodePriority+0x32>
 8000b44:	2300      	movs	r3, #0
 8000b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b48:	f04f 32ff 	mov.w	r2, #4294967295
 8000b4c:	69bb      	ldr	r3, [r7, #24]
 8000b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b52:	43da      	mvns	r2, r3
 8000b54:	68bb      	ldr	r3, [r7, #8]
 8000b56:	401a      	ands	r2, r3
 8000b58:	697b      	ldr	r3, [r7, #20]
 8000b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	fa01 f303 	lsl.w	r3, r1, r3
 8000b66:	43d9      	mvns	r1, r3
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b6c:	4313      	orrs	r3, r2
         );
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3724      	adds	r7, #36	; 0x24
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
	...

08000b7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b082      	sub	sp, #8
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	3b01      	subs	r3, #1
 8000b88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b8c:	d301      	bcc.n	8000b92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b8e:	2301      	movs	r3, #1
 8000b90:	e00f      	b.n	8000bb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b92:	4a0a      	ldr	r2, [pc, #40]	; (8000bbc <SysTick_Config+0x40>)
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3b01      	subs	r3, #1
 8000b98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b9a:	210f      	movs	r1, #15
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	f7ff ff8e 	bl	8000ac0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ba4:	4b05      	ldr	r3, [pc, #20]	; (8000bbc <SysTick_Config+0x40>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000baa:	4b04      	ldr	r3, [pc, #16]	; (8000bbc <SysTick_Config+0x40>)
 8000bac:	2207      	movs	r2, #7
 8000bae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bb0:	2300      	movs	r3, #0
}
 8000bb2:	4618      	mov	r0, r3
 8000bb4:	3708      	adds	r7, #8
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	e000e010 	.word	0xe000e010

08000bc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b082      	sub	sp, #8
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bc8:	6878      	ldr	r0, [r7, #4]
 8000bca:	f7ff ff47 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bce:	bf00      	nop
 8000bd0:	3708      	adds	r7, #8
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}

08000bd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bd6:	b580      	push	{r7, lr}
 8000bd8:	b086      	sub	sp, #24
 8000bda:	af00      	add	r7, sp, #0
 8000bdc:	4603      	mov	r3, r0
 8000bde:	60b9      	str	r1, [r7, #8]
 8000be0:	607a      	str	r2, [r7, #4]
 8000be2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000be4:	2300      	movs	r3, #0
 8000be6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000be8:	f7ff ff5c 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000bec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bee:	687a      	ldr	r2, [r7, #4]
 8000bf0:	68b9      	ldr	r1, [r7, #8]
 8000bf2:	6978      	ldr	r0, [r7, #20]
 8000bf4:	f7ff ff8e 	bl	8000b14 <NVIC_EncodePriority>
 8000bf8:	4602      	mov	r2, r0
 8000bfa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bfe:	4611      	mov	r1, r2
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ff5d 	bl	8000ac0 <__NVIC_SetPriority>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}

08000c0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c0e:	b580      	push	{r7, lr}
 8000c10:	b082      	sub	sp, #8
 8000c12:	af00      	add	r7, sp, #0
 8000c14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c16:	6878      	ldr	r0, [r7, #4]
 8000c18:	f7ff ffb0 	bl	8000b7c <SysTick_Config>
 8000c1c:	4603      	mov	r3, r0
}
 8000c1e:	4618      	mov	r0, r3
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
	...

08000c28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b089      	sub	sp, #36	; 0x24
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
 8000c30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c36:	2300      	movs	r3, #0
 8000c38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61fb      	str	r3, [r7, #28]
 8000c42:	e16b      	b.n	8000f1c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c44:	2201      	movs	r2, #1
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	fa02 f303 	lsl.w	r3, r2, r3
 8000c4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	697a      	ldr	r2, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	697b      	ldr	r3, [r7, #20]
 8000c5c:	429a      	cmp	r2, r3
 8000c5e:	f040 815a 	bne.w	8000f16 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	683b      	ldr	r3, [r7, #0]
 8000c64:	685b      	ldr	r3, [r3, #4]
 8000c66:	f003 0303 	and.w	r3, r3, #3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d005      	beq.n	8000c7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c6e:	683b      	ldr	r3, [r7, #0]
 8000c70:	685b      	ldr	r3, [r3, #4]
 8000c72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c76:	2b02      	cmp	r3, #2
 8000c78:	d130      	bne.n	8000cdc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c80:	69fb      	ldr	r3, [r7, #28]
 8000c82:	005b      	lsls	r3, r3, #1
 8000c84:	2203      	movs	r2, #3
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	69ba      	ldr	r2, [r7, #24]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	68da      	ldr	r2, [r3, #12]
 8000c96:	69fb      	ldr	r3, [r7, #28]
 8000c98:	005b      	lsls	r3, r3, #1
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	4313      	orrs	r3, r2
 8000ca2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	685b      	ldr	r3, [r3, #4]
 8000cae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	69fb      	ldr	r3, [r7, #28]
 8000cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb8:	43db      	mvns	r3, r3
 8000cba:	69ba      	ldr	r2, [r7, #24]
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cc0:	683b      	ldr	r3, [r7, #0]
 8000cc2:	685b      	ldr	r3, [r3, #4]
 8000cc4:	091b      	lsrs	r3, r3, #4
 8000cc6:	f003 0201 	and.w	r2, r3, #1
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	4313      	orrs	r3, r2
 8000cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	69ba      	ldr	r2, [r7, #24]
 8000cda:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685b      	ldr	r3, [r3, #4]
 8000ce0:	f003 0303 	and.w	r3, r3, #3
 8000ce4:	2b03      	cmp	r3, #3
 8000ce6:	d017      	beq.n	8000d18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	68db      	ldr	r3, [r3, #12]
 8000cec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	005b      	lsls	r3, r3, #1
 8000cf2:	2203      	movs	r2, #3
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	43db      	mvns	r3, r3
 8000cfa:	69ba      	ldr	r2, [r7, #24]
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	689a      	ldr	r2, [r3, #8]
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	4313      	orrs	r3, r2
 8000d10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	69ba      	ldr	r2, [r7, #24]
 8000d16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	685b      	ldr	r3, [r3, #4]
 8000d1c:	f003 0303 	and.w	r3, r3, #3
 8000d20:	2b02      	cmp	r3, #2
 8000d22:	d123      	bne.n	8000d6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d24:	69fb      	ldr	r3, [r7, #28]
 8000d26:	08da      	lsrs	r2, r3, #3
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3208      	adds	r2, #8
 8000d2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	f003 0307 	and.w	r3, r3, #7
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	69ba      	ldr	r2, [r7, #24]
 8000d44:	4013      	ands	r3, r2
 8000d46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	691a      	ldr	r2, [r3, #16]
 8000d4c:	69fb      	ldr	r3, [r7, #28]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	009b      	lsls	r3, r3, #2
 8000d54:	fa02 f303 	lsl.w	r3, r2, r3
 8000d58:	69ba      	ldr	r2, [r7, #24]
 8000d5a:	4313      	orrs	r3, r2
 8000d5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	08da      	lsrs	r2, r3, #3
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	3208      	adds	r2, #8
 8000d66:	69b9      	ldr	r1, [r7, #24]
 8000d68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	2203      	movs	r2, #3
 8000d78:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7c:	43db      	mvns	r3, r3
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	4013      	ands	r3, r2
 8000d82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 0203 	and.w	r2, r3, #3
 8000d8c:	69fb      	ldr	r3, [r7, #28]
 8000d8e:	005b      	lsls	r3, r3, #1
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	4313      	orrs	r3, r2
 8000d98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	69ba      	ldr	r2, [r7, #24]
 8000d9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	f000 80b4 	beq.w	8000f16 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dae:	2300      	movs	r3, #0
 8000db0:	60fb      	str	r3, [r7, #12]
 8000db2:	4b60      	ldr	r3, [pc, #384]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db6:	4a5f      	ldr	r2, [pc, #380]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000db8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dbc:	6453      	str	r3, [r2, #68]	; 0x44
 8000dbe:	4b5d      	ldr	r3, [pc, #372]	; (8000f34 <HAL_GPIO_Init+0x30c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dca:	4a5b      	ldr	r2, [pc, #364]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000dcc:	69fb      	ldr	r3, [r7, #28]
 8000dce:	089b      	lsrs	r3, r3, #2
 8000dd0:	3302      	adds	r3, #2
 8000dd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	f003 0303 	and.w	r3, r3, #3
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	220f      	movs	r2, #15
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43db      	mvns	r3, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4013      	ands	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a52      	ldr	r2, [pc, #328]	; (8000f3c <HAL_GPIO_Init+0x314>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d02b      	beq.n	8000e4e <HAL_GPIO_Init+0x226>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a51      	ldr	r2, [pc, #324]	; (8000f40 <HAL_GPIO_Init+0x318>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d025      	beq.n	8000e4a <HAL_GPIO_Init+0x222>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a50      	ldr	r2, [pc, #320]	; (8000f44 <HAL_GPIO_Init+0x31c>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d01f      	beq.n	8000e46 <HAL_GPIO_Init+0x21e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4f      	ldr	r2, [pc, #316]	; (8000f48 <HAL_GPIO_Init+0x320>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d019      	beq.n	8000e42 <HAL_GPIO_Init+0x21a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4e      	ldr	r2, [pc, #312]	; (8000f4c <HAL_GPIO_Init+0x324>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d013      	beq.n	8000e3e <HAL_GPIO_Init+0x216>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a4d      	ldr	r2, [pc, #308]	; (8000f50 <HAL_GPIO_Init+0x328>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d00d      	beq.n	8000e3a <HAL_GPIO_Init+0x212>
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4a4c      	ldr	r2, [pc, #304]	; (8000f54 <HAL_GPIO_Init+0x32c>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d007      	beq.n	8000e36 <HAL_GPIO_Init+0x20e>
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	4a4b      	ldr	r2, [pc, #300]	; (8000f58 <HAL_GPIO_Init+0x330>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d101      	bne.n	8000e32 <HAL_GPIO_Init+0x20a>
 8000e2e:	2307      	movs	r3, #7
 8000e30:	e00e      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e32:	2308      	movs	r3, #8
 8000e34:	e00c      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e36:	2306      	movs	r3, #6
 8000e38:	e00a      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3a:	2305      	movs	r3, #5
 8000e3c:	e008      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e3e:	2304      	movs	r3, #4
 8000e40:	e006      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e42:	2303      	movs	r3, #3
 8000e44:	e004      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e46:	2302      	movs	r3, #2
 8000e48:	e002      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e000      	b.n	8000e50 <HAL_GPIO_Init+0x228>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	69fa      	ldr	r2, [r7, #28]
 8000e52:	f002 0203 	and.w	r2, r2, #3
 8000e56:	0092      	lsls	r2, r2, #2
 8000e58:	4093      	lsls	r3, r2
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e60:	4935      	ldr	r1, [pc, #212]	; (8000f38 <HAL_GPIO_Init+0x310>)
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	089b      	lsrs	r3, r3, #2
 8000e66:	3302      	adds	r3, #2
 8000e68:	69ba      	ldr	r2, [r7, #24]
 8000e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e6e:	4b3b      	ldr	r3, [pc, #236]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e70:	689b      	ldr	r3, [r3, #8]
 8000e72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e74:	693b      	ldr	r3, [r7, #16]
 8000e76:	43db      	mvns	r3, r3
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	4013      	ands	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e7e:	683b      	ldr	r3, [r7, #0]
 8000e80:	685b      	ldr	r3, [r3, #4]
 8000e82:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d003      	beq.n	8000e92 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	693b      	ldr	r3, [r7, #16]
 8000e8e:	4313      	orrs	r3, r2
 8000e90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e92:	4a32      	ldr	r2, [pc, #200]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e98:	4b30      	ldr	r3, [pc, #192]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9e:	693b      	ldr	r3, [r7, #16]
 8000ea0:	43db      	mvns	r3, r3
 8000ea2:	69ba      	ldr	r2, [r7, #24]
 8000ea4:	4013      	ands	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000eb4:	69ba      	ldr	r2, [r7, #24]
 8000eb6:	693b      	ldr	r3, [r7, #16]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ebc:	4a27      	ldr	r2, [pc, #156]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ebe:	69bb      	ldr	r3, [r7, #24]
 8000ec0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000ec2:	4b26      	ldr	r3, [pc, #152]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ec4:	685b      	ldr	r3, [r3, #4]
 8000ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	69ba      	ldr	r2, [r7, #24]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d003      	beq.n	8000ee6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ee6:	4a1d      	ldr	r2, [pc, #116]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000ee8:	69bb      	ldr	r3, [r7, #24]
 8000eea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000eec:	4b1b      	ldr	r3, [pc, #108]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	43db      	mvns	r3, r3
 8000ef6:	69ba      	ldr	r2, [r7, #24]
 8000ef8:	4013      	ands	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000efc:	683b      	ldr	r3, [r7, #0]
 8000efe:	685b      	ldr	r3, [r3, #4]
 8000f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d003      	beq.n	8000f10 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	693b      	ldr	r3, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000f10:	4a12      	ldr	r2, [pc, #72]	; (8000f5c <HAL_GPIO_Init+0x334>)
 8000f12:	69bb      	ldr	r3, [r7, #24]
 8000f14:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f16:	69fb      	ldr	r3, [r7, #28]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	61fb      	str	r3, [r7, #28]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	2b0f      	cmp	r3, #15
 8000f20:	f67f ae90 	bls.w	8000c44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f24:	bf00      	nop
 8000f26:	bf00      	nop
 8000f28:	3724      	adds	r7, #36	; 0x24
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	40023800 	.word	0x40023800
 8000f38:	40013800 	.word	0x40013800
 8000f3c:	40020000 	.word	0x40020000
 8000f40:	40020400 	.word	0x40020400
 8000f44:	40020800 	.word	0x40020800
 8000f48:	40020c00 	.word	0x40020c00
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40021400 	.word	0x40021400
 8000f54:	40021800 	.word	0x40021800
 8000f58:	40021c00 	.word	0x40021c00
 8000f5c:	40013c00 	.word	0x40013c00

08000f60 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d101      	bne.n	8000f72 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6e:	2301      	movs	r3, #1
 8000f70:	e267      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 0301 	and.w	r3, r3, #1
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d075      	beq.n	800106a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f7e:	4b88      	ldr	r3, [pc, #544]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	f003 030c 	and.w	r3, r3, #12
 8000f86:	2b04      	cmp	r3, #4
 8000f88:	d00c      	beq.n	8000fa4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8a:	4b85      	ldr	r3, [pc, #532]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f92:	2b08      	cmp	r3, #8
 8000f94:	d112      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f96:	4b82      	ldr	r3, [pc, #520]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fa2:	d10b      	bne.n	8000fbc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa4:	4b7e      	ldr	r3, [pc, #504]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d05b      	beq.n	8001068 <HAL_RCC_OscConfig+0x108>
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d157      	bne.n	8001068 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	e242      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc4:	d106      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x74>
 8000fc6:	4b76      	ldr	r3, [pc, #472]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	4a75      	ldr	r2, [pc, #468]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd0:	6013      	str	r3, [r2, #0]
 8000fd2:	e01d      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_RCC_OscConfig+0x98>
 8000fde:	4b70      	ldr	r3, [pc, #448]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a6f      	ldr	r2, [pc, #444]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fe8:	6013      	str	r3, [r2, #0]
 8000fea:	4b6d      	ldr	r3, [pc, #436]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4a6c      	ldr	r2, [pc, #432]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff4:	6013      	str	r3, [r2, #0]
 8000ff6:	e00b      	b.n	8001010 <HAL_RCC_OscConfig+0xb0>
 8000ff8:	4b69      	ldr	r3, [pc, #420]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a68      	ldr	r2, [pc, #416]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001002:	6013      	str	r3, [r2, #0]
 8001004:	4b66      	ldr	r3, [pc, #408]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4a65      	ldr	r2, [pc, #404]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 800100a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800100e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d013      	beq.n	8001040 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001018:	f7ff fcf0 	bl	80009fc <HAL_GetTick>
 800101c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101e:	e008      	b.n	8001032 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001020:	f7ff fcec 	bl	80009fc <HAL_GetTick>
 8001024:	4602      	mov	r2, r0
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	2b64      	cmp	r3, #100	; 0x64
 800102c:	d901      	bls.n	8001032 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800102e:	2303      	movs	r3, #3
 8001030:	e207      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001032:	4b5b      	ldr	r3, [pc, #364]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103a:	2b00      	cmp	r3, #0
 800103c:	d0f0      	beq.n	8001020 <HAL_RCC_OscConfig+0xc0>
 800103e:	e014      	b.n	800106a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001040:	f7ff fcdc 	bl	80009fc <HAL_GetTick>
 8001044:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001046:	e008      	b.n	800105a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001048:	f7ff fcd8 	bl	80009fc <HAL_GetTick>
 800104c:	4602      	mov	r2, r0
 800104e:	693b      	ldr	r3, [r7, #16]
 8001050:	1ad3      	subs	r3, r2, r3
 8001052:	2b64      	cmp	r3, #100	; 0x64
 8001054:	d901      	bls.n	800105a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e1f3      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105a:	4b51      	ldr	r3, [pc, #324]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001062:	2b00      	cmp	r3, #0
 8001064:	d1f0      	bne.n	8001048 <HAL_RCC_OscConfig+0xe8>
 8001066:	e000      	b.n	800106a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001068:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	f003 0302 	and.w	r3, r3, #2
 8001072:	2b00      	cmp	r3, #0
 8001074:	d063      	beq.n	800113e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001076:	4b4a      	ldr	r3, [pc, #296]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	f003 030c 	and.w	r3, r3, #12
 800107e:	2b00      	cmp	r3, #0
 8001080:	d00b      	beq.n	800109a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001082:	4b47      	ldr	r3, [pc, #284]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001084:	689b      	ldr	r3, [r3, #8]
 8001086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800108a:	2b08      	cmp	r3, #8
 800108c:	d11c      	bne.n	80010c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800108e:	4b44      	ldr	r3, [pc, #272]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001096:	2b00      	cmp	r3, #0
 8001098:	d116      	bne.n	80010c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109a:	4b41      	ldr	r3, [pc, #260]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f003 0302 	and.w	r3, r3, #2
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d005      	beq.n	80010b2 <HAL_RCC_OscConfig+0x152>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d001      	beq.n	80010b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e1c7      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	691b      	ldr	r3, [r3, #16]
 80010be:	00db      	lsls	r3, r3, #3
 80010c0:	4937      	ldr	r1, [pc, #220]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010c2:	4313      	orrs	r3, r2
 80010c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010c6:	e03a      	b.n	800113e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	68db      	ldr	r3, [r3, #12]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d020      	beq.n	8001112 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d0:	4b34      	ldr	r3, [pc, #208]	; (80011a4 <HAL_RCC_OscConfig+0x244>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fc91 	bl	80009fc <HAL_GetTick>
 80010da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010dc:	e008      	b.n	80010f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010de:	f7ff fc8d 	bl	80009fc <HAL_GetTick>
 80010e2:	4602      	mov	r2, r0
 80010e4:	693b      	ldr	r3, [r7, #16]
 80010e6:	1ad3      	subs	r3, r2, r3
 80010e8:	2b02      	cmp	r3, #2
 80010ea:	d901      	bls.n	80010f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010ec:	2303      	movs	r3, #3
 80010ee:	e1a8      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0302 	and.w	r3, r3, #2
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d0f0      	beq.n	80010de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	691b      	ldr	r3, [r3, #16]
 8001108:	00db      	lsls	r3, r3, #3
 800110a:	4925      	ldr	r1, [pc, #148]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 800110c:	4313      	orrs	r3, r2
 800110e:	600b      	str	r3, [r1, #0]
 8001110:	e015      	b.n	800113e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001112:	4b24      	ldr	r3, [pc, #144]	; (80011a4 <HAL_RCC_OscConfig+0x244>)
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001118:	f7ff fc70 	bl	80009fc <HAL_GetTick>
 800111c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800111e:	e008      	b.n	8001132 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fc6c 	bl	80009fc <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	1ad3      	subs	r3, r2, r3
 800112a:	2b02      	cmp	r3, #2
 800112c:	d901      	bls.n	8001132 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800112e:	2303      	movs	r3, #3
 8001130:	e187      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001132:	4b1b      	ldr	r3, [pc, #108]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f0      	bne.n	8001120 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f003 0308 	and.w	r3, r3, #8
 8001146:	2b00      	cmp	r3, #0
 8001148:	d036      	beq.n	80011b8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	2b00      	cmp	r3, #0
 8001150:	d016      	beq.n	8001180 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001152:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <HAL_RCC_OscConfig+0x248>)
 8001154:	2201      	movs	r2, #1
 8001156:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001158:	f7ff fc50 	bl	80009fc <HAL_GetTick>
 800115c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800115e:	e008      	b.n	8001172 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001160:	f7ff fc4c 	bl	80009fc <HAL_GetTick>
 8001164:	4602      	mov	r2, r0
 8001166:	693b      	ldr	r3, [r7, #16]
 8001168:	1ad3      	subs	r3, r2, r3
 800116a:	2b02      	cmp	r3, #2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e167      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001172:	4b0b      	ldr	r3, [pc, #44]	; (80011a0 <HAL_RCC_OscConfig+0x240>)
 8001174:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001176:	f003 0302 	and.w	r3, r3, #2
 800117a:	2b00      	cmp	r3, #0
 800117c:	d0f0      	beq.n	8001160 <HAL_RCC_OscConfig+0x200>
 800117e:	e01b      	b.n	80011b8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001180:	4b09      	ldr	r3, [pc, #36]	; (80011a8 <HAL_RCC_OscConfig+0x248>)
 8001182:	2200      	movs	r2, #0
 8001184:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001186:	f7ff fc39 	bl	80009fc <HAL_GetTick>
 800118a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800118c:	e00e      	b.n	80011ac <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800118e:	f7ff fc35 	bl	80009fc <HAL_GetTick>
 8001192:	4602      	mov	r2, r0
 8001194:	693b      	ldr	r3, [r7, #16]
 8001196:	1ad3      	subs	r3, r2, r3
 8001198:	2b02      	cmp	r3, #2
 800119a:	d907      	bls.n	80011ac <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e150      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
 80011a0:	40023800 	.word	0x40023800
 80011a4:	42470000 	.word	0x42470000
 80011a8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011ac:	4b88      	ldr	r3, [pc, #544]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b0:	f003 0302 	and.w	r3, r3, #2
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d1ea      	bne.n	800118e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	f003 0304 	and.w	r3, r3, #4
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	f000 8097 	beq.w	80012f4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011c6:	2300      	movs	r3, #0
 80011c8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ca:	4b81      	ldr	r3, [pc, #516]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d10f      	bne.n	80011f6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	2300      	movs	r3, #0
 80011d8:	60bb      	str	r3, [r7, #8]
 80011da:	4b7d      	ldr	r3, [pc, #500]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	4a7c      	ldr	r2, [pc, #496]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e4:	6413      	str	r3, [r2, #64]	; 0x40
 80011e6:	4b7a      	ldr	r3, [pc, #488]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	60bb      	str	r3, [r7, #8]
 80011f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f2:	2301      	movs	r3, #1
 80011f4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f6:	4b77      	ldr	r3, [pc, #476]	; (80013d4 <HAL_RCC_OscConfig+0x474>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d118      	bne.n	8001234 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001202:	4b74      	ldr	r3, [pc, #464]	; (80013d4 <HAL_RCC_OscConfig+0x474>)
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	4a73      	ldr	r2, [pc, #460]	; (80013d4 <HAL_RCC_OscConfig+0x474>)
 8001208:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800120c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800120e:	f7ff fbf5 	bl	80009fc <HAL_GetTick>
 8001212:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001214:	e008      	b.n	8001228 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001216:	f7ff fbf1 	bl	80009fc <HAL_GetTick>
 800121a:	4602      	mov	r2, r0
 800121c:	693b      	ldr	r3, [r7, #16]
 800121e:	1ad3      	subs	r3, r2, r3
 8001220:	2b02      	cmp	r3, #2
 8001222:	d901      	bls.n	8001228 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001224:	2303      	movs	r3, #3
 8001226:	e10c      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001228:	4b6a      	ldr	r3, [pc, #424]	; (80013d4 <HAL_RCC_OscConfig+0x474>)
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001230:	2b00      	cmp	r3, #0
 8001232:	d0f0      	beq.n	8001216 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	689b      	ldr	r3, [r3, #8]
 8001238:	2b01      	cmp	r3, #1
 800123a:	d106      	bne.n	800124a <HAL_RCC_OscConfig+0x2ea>
 800123c:	4b64      	ldr	r3, [pc, #400]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 800123e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001240:	4a63      	ldr	r2, [pc, #396]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001242:	f043 0301 	orr.w	r3, r3, #1
 8001246:	6713      	str	r3, [r2, #112]	; 0x70
 8001248:	e01c      	b.n	8001284 <HAL_RCC_OscConfig+0x324>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	689b      	ldr	r3, [r3, #8]
 800124e:	2b05      	cmp	r3, #5
 8001250:	d10c      	bne.n	800126c <HAL_RCC_OscConfig+0x30c>
 8001252:	4b5f      	ldr	r3, [pc, #380]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001254:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001256:	4a5e      	ldr	r2, [pc, #376]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001258:	f043 0304 	orr.w	r3, r3, #4
 800125c:	6713      	str	r3, [r2, #112]	; 0x70
 800125e:	4b5c      	ldr	r3, [pc, #368]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001260:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001262:	4a5b      	ldr	r2, [pc, #364]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6713      	str	r3, [r2, #112]	; 0x70
 800126a:	e00b      	b.n	8001284 <HAL_RCC_OscConfig+0x324>
 800126c:	4b58      	ldr	r3, [pc, #352]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 800126e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001270:	4a57      	ldr	r2, [pc, #348]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001272:	f023 0301 	bic.w	r3, r3, #1
 8001276:	6713      	str	r3, [r2, #112]	; 0x70
 8001278:	4b55      	ldr	r3, [pc, #340]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 800127a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127c:	4a54      	ldr	r2, [pc, #336]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 800127e:	f023 0304 	bic.w	r3, r3, #4
 8001282:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d015      	beq.n	80012b8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800128c:	f7ff fbb6 	bl	80009fc <HAL_GetTick>
 8001290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001292:	e00a      	b.n	80012aa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001294:	f7ff fbb2 	bl	80009fc <HAL_GetTick>
 8001298:	4602      	mov	r2, r0
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a2:	4293      	cmp	r3, r2
 80012a4:	d901      	bls.n	80012aa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012a6:	2303      	movs	r3, #3
 80012a8:	e0cb      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012aa:	4b49      	ldr	r3, [pc, #292]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ae:	f003 0302 	and.w	r3, r3, #2
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d0ee      	beq.n	8001294 <HAL_RCC_OscConfig+0x334>
 80012b6:	e014      	b.n	80012e2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012b8:	f7ff fba0 	bl	80009fc <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012be:	e00a      	b.n	80012d6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c0:	f7ff fb9c 	bl	80009fc <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	693b      	ldr	r3, [r7, #16]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ce:	4293      	cmp	r3, r2
 80012d0:	d901      	bls.n	80012d6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012d2:	2303      	movs	r3, #3
 80012d4:	e0b5      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d6:	4b3e      	ldr	r3, [pc, #248]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012da:	f003 0302 	and.w	r3, r3, #2
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1ee      	bne.n	80012c0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e2:	7dfb      	ldrb	r3, [r7, #23]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d105      	bne.n	80012f4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e8:	4b39      	ldr	r3, [pc, #228]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ec:	4a38      	ldr	r2, [pc, #224]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80012ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	f000 80a1 	beq.w	8001440 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80012fe:	4b34      	ldr	r3, [pc, #208]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001300:	689b      	ldr	r3, [r3, #8]
 8001302:	f003 030c 	and.w	r3, r3, #12
 8001306:	2b08      	cmp	r3, #8
 8001308:	d05c      	beq.n	80013c4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	699b      	ldr	r3, [r3, #24]
 800130e:	2b02      	cmp	r3, #2
 8001310:	d141      	bne.n	8001396 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001312:	4b31      	ldr	r3, [pc, #196]	; (80013d8 <HAL_RCC_OscConfig+0x478>)
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001318:	f7ff fb70 	bl	80009fc <HAL_GetTick>
 800131c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800131e:	e008      	b.n	8001332 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001320:	f7ff fb6c 	bl	80009fc <HAL_GetTick>
 8001324:	4602      	mov	r2, r0
 8001326:	693b      	ldr	r3, [r7, #16]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	2b02      	cmp	r3, #2
 800132c:	d901      	bls.n	8001332 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800132e:	2303      	movs	r3, #3
 8001330:	e087      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001332:	4b27      	ldr	r3, [pc, #156]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133a:	2b00      	cmp	r3, #0
 800133c:	d1f0      	bne.n	8001320 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	69da      	ldr	r2, [r3, #28]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	431a      	orrs	r2, r3
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134c:	019b      	lsls	r3, r3, #6
 800134e:	431a      	orrs	r2, r3
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001354:	085b      	lsrs	r3, r3, #1
 8001356:	3b01      	subs	r3, #1
 8001358:	041b      	lsls	r3, r3, #16
 800135a:	431a      	orrs	r2, r3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	061b      	lsls	r3, r3, #24
 8001362:	491b      	ldr	r1, [pc, #108]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001368:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_RCC_OscConfig+0x478>)
 800136a:	2201      	movs	r2, #1
 800136c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800136e:	f7ff fb45 	bl	80009fc <HAL_GetTick>
 8001372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001374:	e008      	b.n	8001388 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001376:	f7ff fb41 	bl	80009fc <HAL_GetTick>
 800137a:	4602      	mov	r2, r0
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	1ad3      	subs	r3, r2, r3
 8001380:	2b02      	cmp	r3, #2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e05c      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0f0      	beq.n	8001376 <HAL_RCC_OscConfig+0x416>
 8001394:	e054      	b.n	8001440 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001396:	4b10      	ldr	r3, [pc, #64]	; (80013d8 <HAL_RCC_OscConfig+0x478>)
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fb2e 	bl	80009fc <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a4:	f7ff fb2a 	bl	80009fc <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e045      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <HAL_RCC_OscConfig+0x470>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0x444>
 80013c2:	e03d      	b.n	8001440 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d107      	bne.n	80013dc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e038      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	40007000 	.word	0x40007000
 80013d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <HAL_RCC_OscConfig+0x4ec>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	699b      	ldr	r3, [r3, #24]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d028      	beq.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f4:	429a      	cmp	r2, r3
 80013f6:	d121      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001402:	429a      	cmp	r2, r3
 8001404:	d11a      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800140c:	4013      	ands	r3, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001412:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001414:	4293      	cmp	r3, r2
 8001416:	d111      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001422:	085b      	lsrs	r3, r3, #1
 8001424:	3b01      	subs	r3, #1
 8001426:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001428:	429a      	cmp	r2, r3
 800142a:	d107      	bne.n	800143c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001436:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001438:	429a      	cmp	r2, r3
 800143a:	d001      	beq.n	8001440 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e000      	b.n	8001442 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	40023800 	.word	0x40023800

08001450 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d101      	bne.n	8001464 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001460:	2301      	movs	r3, #1
 8001462:	e0cc      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001464:	4b68      	ldr	r3, [pc, #416]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f003 0307 	and.w	r3, r3, #7
 800146c:	683a      	ldr	r2, [r7, #0]
 800146e:	429a      	cmp	r2, r3
 8001470:	d90c      	bls.n	800148c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	4b65      	ldr	r3, [pc, #404]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001474:	683a      	ldr	r2, [r7, #0]
 8001476:	b2d2      	uxtb	r2, r2
 8001478:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147a:	4b63      	ldr	r3, [pc, #396]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	683a      	ldr	r2, [r7, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d001      	beq.n	800148c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
 800148a:	e0b8      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 0302 	and.w	r3, r3, #2
 8001494:	2b00      	cmp	r3, #0
 8001496:	d020      	beq.n	80014da <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 0304 	and.w	r3, r3, #4
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a4:	4b59      	ldr	r3, [pc, #356]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	4a58      	ldr	r2, [pc, #352]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ae:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0308 	and.w	r3, r3, #8
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d005      	beq.n	80014c8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014bc:	4b53      	ldr	r3, [pc, #332]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014be:	689b      	ldr	r3, [r3, #8]
 80014c0:	4a52      	ldr	r2, [pc, #328]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014c8:	4b50      	ldr	r3, [pc, #320]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	494d      	ldr	r1, [pc, #308]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014d6:	4313      	orrs	r3, r2
 80014d8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0301 	and.w	r3, r3, #1
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d044      	beq.n	8001570 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b01      	cmp	r3, #1
 80014ec:	d107      	bne.n	80014fe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ee:	4b47      	ldr	r3, [pc, #284]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d119      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e07f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d003      	beq.n	800150e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150a:	2b03      	cmp	r3, #3
 800150c:	d107      	bne.n	800151e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800150e:	4b3f      	ldr	r3, [pc, #252]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d109      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e06f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151e:	4b3b      	ldr	r3, [pc, #236]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	f003 0302 	and.w	r3, r3, #2
 8001526:	2b00      	cmp	r3, #0
 8001528:	d101      	bne.n	800152e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e067      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800152e:	4b37      	ldr	r3, [pc, #220]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	f023 0203 	bic.w	r2, r3, #3
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	4934      	ldr	r1, [pc, #208]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	4313      	orrs	r3, r2
 800153e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001540:	f7ff fa5c 	bl	80009fc <HAL_GetTick>
 8001544:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001546:	e00a      	b.n	800155e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001548:	f7ff fa58 	bl	80009fc <HAL_GetTick>
 800154c:	4602      	mov	r2, r0
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	f241 3288 	movw	r2, #5000	; 0x1388
 8001556:	4293      	cmp	r3, r2
 8001558:	d901      	bls.n	800155e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e04f      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800155e:	4b2b      	ldr	r3, [pc, #172]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 8001560:	689b      	ldr	r3, [r3, #8]
 8001562:	f003 020c 	and.w	r2, r3, #12
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	429a      	cmp	r2, r3
 800156e:	d1eb      	bne.n	8001548 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001570:	4b25      	ldr	r3, [pc, #148]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d20c      	bcs.n	8001598 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b22      	ldr	r3, [pc, #136]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b20      	ldr	r3, [pc, #128]	; (8001608 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e032      	b.n	80015fe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0304 	and.w	r3, r3, #4
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d008      	beq.n	80015b6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	68db      	ldr	r3, [r3, #12]
 80015b0:	4916      	ldr	r1, [pc, #88]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	4313      	orrs	r3, r2
 80015b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0308 	and.w	r3, r3, #8
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c2:	4b12      	ldr	r3, [pc, #72]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015c4:	689b      	ldr	r3, [r3, #8]
 80015c6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	691b      	ldr	r3, [r3, #16]
 80015ce:	00db      	lsls	r3, r3, #3
 80015d0:	490e      	ldr	r1, [pc, #56]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	4313      	orrs	r3, r2
 80015d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015d6:	f000 f821 	bl	800161c <HAL_RCC_GetSysClockFreq>
 80015da:	4602      	mov	r2, r0
 80015dc:	4b0b      	ldr	r3, [pc, #44]	; (800160c <HAL_RCC_ClockConfig+0x1bc>)
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	091b      	lsrs	r3, r3, #4
 80015e2:	f003 030f 	and.w	r3, r3, #15
 80015e6:	490a      	ldr	r1, [pc, #40]	; (8001610 <HAL_RCC_ClockConfig+0x1c0>)
 80015e8:	5ccb      	ldrb	r3, [r1, r3]
 80015ea:	fa22 f303 	lsr.w	r3, r2, r3
 80015ee:	4a09      	ldr	r2, [pc, #36]	; (8001614 <HAL_RCC_ClockConfig+0x1c4>)
 80015f0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f2:	4b09      	ldr	r3, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c8>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4618      	mov	r0, r3
 80015f8:	f7ff f9bc 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	3710      	adds	r7, #16
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40023c00 	.word	0x40023c00
 800160c:	40023800 	.word	0x40023800
 8001610:	080029a8 	.word	0x080029a8
 8001614:	20000000 	.word	0x20000000
 8001618:	20000004 	.word	0x20000004

0800161c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800161c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001620:	b090      	sub	sp, #64	; 0x40
 8001622:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001624:	2300      	movs	r3, #0
 8001626:	637b      	str	r3, [r7, #52]	; 0x34
 8001628:	2300      	movs	r3, #0
 800162a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800162c:	2300      	movs	r3, #0
 800162e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8001630:	2300      	movs	r3, #0
 8001632:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001634:	4b59      	ldr	r3, [pc, #356]	; (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f003 030c 	and.w	r3, r3, #12
 800163c:	2b08      	cmp	r3, #8
 800163e:	d00d      	beq.n	800165c <HAL_RCC_GetSysClockFreq+0x40>
 8001640:	2b08      	cmp	r3, #8
 8001642:	f200 80a1 	bhi.w	8001788 <HAL_RCC_GetSysClockFreq+0x16c>
 8001646:	2b00      	cmp	r3, #0
 8001648:	d002      	beq.n	8001650 <HAL_RCC_GetSysClockFreq+0x34>
 800164a:	2b04      	cmp	r3, #4
 800164c:	d003      	beq.n	8001656 <HAL_RCC_GetSysClockFreq+0x3a>
 800164e:	e09b      	b.n	8001788 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x184>)
 8001652:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001654:	e09b      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001656:	4b53      	ldr	r3, [pc, #332]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001658:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800165a:	e098      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800165c:	4b4f      	ldr	r3, [pc, #316]	; (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 800165e:	685b      	ldr	r3, [r3, #4]
 8001660:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001664:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800166e:	2b00      	cmp	r3, #0
 8001670:	d028      	beq.n	80016c4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001672:	4b4a      	ldr	r3, [pc, #296]	; (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	099b      	lsrs	r3, r3, #6
 8001678:	2200      	movs	r2, #0
 800167a:	623b      	str	r3, [r7, #32]
 800167c:	627a      	str	r2, [r7, #36]	; 0x24
 800167e:	6a3b      	ldr	r3, [r7, #32]
 8001680:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001684:	2100      	movs	r1, #0
 8001686:	4b47      	ldr	r3, [pc, #284]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001688:	fb03 f201 	mul.w	r2, r3, r1
 800168c:	2300      	movs	r3, #0
 800168e:	fb00 f303 	mul.w	r3, r0, r3
 8001692:	4413      	add	r3, r2
 8001694:	4a43      	ldr	r2, [pc, #268]	; (80017a4 <HAL_RCC_GetSysClockFreq+0x188>)
 8001696:	fba0 1202 	umull	r1, r2, r0, r2
 800169a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800169c:	460a      	mov	r2, r1
 800169e:	62ba      	str	r2, [r7, #40]	; 0x28
 80016a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80016a2:	4413      	add	r3, r2
 80016a4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80016a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80016a8:	2200      	movs	r2, #0
 80016aa:	61bb      	str	r3, [r7, #24]
 80016ac:	61fa      	str	r2, [r7, #28]
 80016ae:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80016b2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80016b6:	f7fe fddb 	bl	8000270 <__aeabi_uldivmod>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4613      	mov	r3, r2
 80016c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80016c2:	e053      	b.n	800176c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	099b      	lsrs	r3, r3, #6
 80016ca:	2200      	movs	r2, #0
 80016cc:	613b      	str	r3, [r7, #16]
 80016ce:	617a      	str	r2, [r7, #20]
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80016d6:	f04f 0b00 	mov.w	fp, #0
 80016da:	4652      	mov	r2, sl
 80016dc:	465b      	mov	r3, fp
 80016de:	f04f 0000 	mov.w	r0, #0
 80016e2:	f04f 0100 	mov.w	r1, #0
 80016e6:	0159      	lsls	r1, r3, #5
 80016e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016ec:	0150      	lsls	r0, r2, #5
 80016ee:	4602      	mov	r2, r0
 80016f0:	460b      	mov	r3, r1
 80016f2:	ebb2 080a 	subs.w	r8, r2, sl
 80016f6:	eb63 090b 	sbc.w	r9, r3, fp
 80016fa:	f04f 0200 	mov.w	r2, #0
 80016fe:	f04f 0300 	mov.w	r3, #0
 8001702:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001706:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800170a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800170e:	ebb2 0408 	subs.w	r4, r2, r8
 8001712:	eb63 0509 	sbc.w	r5, r3, r9
 8001716:	f04f 0200 	mov.w	r2, #0
 800171a:	f04f 0300 	mov.w	r3, #0
 800171e:	00eb      	lsls	r3, r5, #3
 8001720:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001724:	00e2      	lsls	r2, r4, #3
 8001726:	4614      	mov	r4, r2
 8001728:	461d      	mov	r5, r3
 800172a:	eb14 030a 	adds.w	r3, r4, sl
 800172e:	603b      	str	r3, [r7, #0]
 8001730:	eb45 030b 	adc.w	r3, r5, fp
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	f04f 0200 	mov.w	r2, #0
 800173a:	f04f 0300 	mov.w	r3, #0
 800173e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001742:	4629      	mov	r1, r5
 8001744:	028b      	lsls	r3, r1, #10
 8001746:	4621      	mov	r1, r4
 8001748:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800174c:	4621      	mov	r1, r4
 800174e:	028a      	lsls	r2, r1, #10
 8001750:	4610      	mov	r0, r2
 8001752:	4619      	mov	r1, r3
 8001754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001756:	2200      	movs	r2, #0
 8001758:	60bb      	str	r3, [r7, #8]
 800175a:	60fa      	str	r2, [r7, #12]
 800175c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001760:	f7fe fd86 	bl	8000270 <__aeabi_uldivmod>
 8001764:	4602      	mov	r2, r0
 8001766:	460b      	mov	r3, r1
 8001768:	4613      	mov	r3, r2
 800176a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800176c:	4b0b      	ldr	r3, [pc, #44]	; (800179c <HAL_RCC_GetSysClockFreq+0x180>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	0c1b      	lsrs	r3, r3, #16
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	3301      	adds	r3, #1
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800177c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800177e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001780:	fbb2 f3f3 	udiv	r3, r2, r3
 8001784:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001786:	e002      	b.n	800178e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001788:	4b05      	ldr	r3, [pc, #20]	; (80017a0 <HAL_RCC_GetSysClockFreq+0x184>)
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800178c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001790:	4618      	mov	r0, r3
 8001792:	3740      	adds	r7, #64	; 0x40
 8001794:	46bd      	mov	sp, r7
 8001796:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800179a:	bf00      	nop
 800179c:	40023800 	.word	0x40023800
 80017a0:	00f42400 	.word	0x00f42400
 80017a4:	017d7840 	.word	0x017d7840

080017a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80017ac:	4b03      	ldr	r3, [pc, #12]	; (80017bc <HAL_RCC_GetHCLKFreq+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	20000000 	.word	0x20000000

080017c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80017c4:	f7ff fff0 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80017c8:	4602      	mov	r2, r0
 80017ca:	4b05      	ldr	r3, [pc, #20]	; (80017e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80017cc:	689b      	ldr	r3, [r3, #8]
 80017ce:	0a9b      	lsrs	r3, r3, #10
 80017d0:	f003 0307 	and.w	r3, r3, #7
 80017d4:	4903      	ldr	r1, [pc, #12]	; (80017e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80017d6:	5ccb      	ldrb	r3, [r1, r3]
 80017d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017dc:	4618      	mov	r0, r3
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	40023800 	.word	0x40023800
 80017e4:	080029b8 	.word	0x080029b8

080017e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017e8:	b580      	push	{r7, lr}
 80017ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80017ec:	f7ff ffdc 	bl	80017a8 <HAL_RCC_GetHCLKFreq>
 80017f0:	4602      	mov	r2, r0
 80017f2:	4b05      	ldr	r3, [pc, #20]	; (8001808 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017f4:	689b      	ldr	r3, [r3, #8]
 80017f6:	0b5b      	lsrs	r3, r3, #13
 80017f8:	f003 0307 	and.w	r3, r3, #7
 80017fc:	4903      	ldr	r1, [pc, #12]	; (800180c <HAL_RCC_GetPCLK2Freq+0x24>)
 80017fe:	5ccb      	ldrb	r3, [r1, r3]
 8001800:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001804:	4618      	mov	r0, r3
 8001806:	bd80      	pop	{r7, pc}
 8001808:	40023800 	.word	0x40023800
 800180c:	080029b8 	.word	0x080029b8

08001810 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d101      	bne.n	8001822 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e042      	b.n	80018a8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001828:	b2db      	uxtb	r3, r3
 800182a:	2b00      	cmp	r3, #0
 800182c:	d106      	bne.n	800183c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	2200      	movs	r2, #0
 8001832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f7fe ff96 	bl	8000768 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2224      	movs	r2, #36	; 0x24
 8001840:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	68da      	ldr	r2, [r3, #12]
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001852:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f000 f973 	bl	8001b40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	691a      	ldr	r2, [r3, #16]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001868:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	695a      	ldr	r2, [r3, #20]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001878:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	68da      	ldr	r2, [r3, #12]
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001888:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	2200      	movs	r2, #0
 800188e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2220      	movs	r2, #32
 8001894:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2220      	movs	r2, #32
 800189c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2200      	movs	r2, #0
 80018a4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	4613      	mov	r3, r2
 80018be:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	d175      	bne.n	80019bc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80018d0:	68bb      	ldr	r3, [r7, #8]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d002      	beq.n	80018dc <HAL_UART_Transmit+0x2c>
 80018d6:	88fb      	ldrh	r3, [r7, #6]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d101      	bne.n	80018e0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	e06e      	b.n	80019be <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	2221      	movs	r2, #33	; 0x21
 80018ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80018ee:	f7ff f885 	bl	80009fc <HAL_GetTick>
 80018f2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	88fa      	ldrh	r2, [r7, #6]
 80018f8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	88fa      	ldrh	r2, [r7, #6]
 80018fe:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001908:	d108      	bne.n	800191c <HAL_UART_Transmit+0x6c>
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d104      	bne.n	800191c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001912:	2300      	movs	r3, #0
 8001914:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001916:	68bb      	ldr	r3, [r7, #8]
 8001918:	61bb      	str	r3, [r7, #24]
 800191a:	e003      	b.n	8001924 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800191c:	68bb      	ldr	r3, [r7, #8]
 800191e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001920:	2300      	movs	r3, #0
 8001922:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001924:	e02e      	b.n	8001984 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	697b      	ldr	r3, [r7, #20]
 800192c:	2200      	movs	r2, #0
 800192e:	2180      	movs	r1, #128	; 0x80
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f000 f848 	bl	80019c6 <UART_WaitOnFlagUntilTimeout>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d005      	beq.n	8001948 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	2220      	movs	r2, #32
 8001940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e03a      	b.n	80019be <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001948:	69fb      	ldr	r3, [r7, #28]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d10b      	bne.n	8001966 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	881b      	ldrh	r3, [r3, #0]
 8001952:	461a      	mov	r2, r3
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800195c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800195e:	69bb      	ldr	r3, [r7, #24]
 8001960:	3302      	adds	r3, #2
 8001962:	61bb      	str	r3, [r7, #24]
 8001964:	e007      	b.n	8001976 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001966:	69fb      	ldr	r3, [r7, #28]
 8001968:	781a      	ldrb	r2, [r3, #0]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	3301      	adds	r3, #1
 8001974:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800197a:	b29b      	uxth	r3, r3
 800197c:	3b01      	subs	r3, #1
 800197e:	b29a      	uxth	r2, r3
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001988:	b29b      	uxth	r3, r3
 800198a:	2b00      	cmp	r3, #0
 800198c:	d1cb      	bne.n	8001926 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	9300      	str	r3, [sp, #0]
 8001992:	697b      	ldr	r3, [r7, #20]
 8001994:	2200      	movs	r2, #0
 8001996:	2140      	movs	r1, #64	; 0x40
 8001998:	68f8      	ldr	r0, [r7, #12]
 800199a:	f000 f814 	bl	80019c6 <UART_WaitOnFlagUntilTimeout>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d005      	beq.n	80019b0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 80019ac:	2303      	movs	r3, #3
 80019ae:	e006      	b.n	80019be <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	2220      	movs	r2, #32
 80019b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 80019b8:	2300      	movs	r3, #0
 80019ba:	e000      	b.n	80019be <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80019bc:	2302      	movs	r3, #2
  }
}
 80019be:	4618      	mov	r0, r3
 80019c0:	3720      	adds	r7, #32
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}

080019c6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80019c6:	b580      	push	{r7, lr}
 80019c8:	b086      	sub	sp, #24
 80019ca:	af00      	add	r7, sp, #0
 80019cc:	60f8      	str	r0, [r7, #12]
 80019ce:	60b9      	str	r1, [r7, #8]
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4613      	mov	r3, r2
 80019d4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80019d6:	e03b      	b.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80019d8:	6a3b      	ldr	r3, [r7, #32]
 80019da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019de:	d037      	beq.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80019e0:	f7ff f80c 	bl	80009fc <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	6a3a      	ldr	r2, [r7, #32]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d302      	bcc.n	80019f6 <UART_WaitOnFlagUntilTimeout+0x30>
 80019f0:	6a3b      	ldr	r3, [r7, #32]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d101      	bne.n	80019fa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e03a      	b.n	8001a70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	f003 0304 	and.w	r3, r3, #4
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d023      	beq.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	2b80      	cmp	r3, #128	; 0x80
 8001a0c:	d020      	beq.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8001a0e:	68bb      	ldr	r3, [r7, #8]
 8001a10:	2b40      	cmp	r3, #64	; 0x40
 8001a12:	d01d      	beq.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b08      	cmp	r3, #8
 8001a20:	d116      	bne.n	8001a50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001a22:	2300      	movs	r3, #0
 8001a24:	617b      	str	r3, [r7, #20]
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	617b      	str	r3, [r7, #20]
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	617b      	str	r3, [r7, #20]
 8001a36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001a38:	68f8      	ldr	r0, [r7, #12]
 8001a3a:	f000 f81d 	bl	8001a78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2208      	movs	r2, #8
 8001a42:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e00f      	b.n	8001a70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	4013      	ands	r3, r2
 8001a5a:	68ba      	ldr	r2, [r7, #8]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	bf0c      	ite	eq
 8001a60:	2301      	moveq	r3, #1
 8001a62:	2300      	movne	r3, #0
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	461a      	mov	r2, r3
 8001a68:	79fb      	ldrb	r3, [r7, #7]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d0b4      	beq.n	80019d8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001a6e:	2300      	movs	r3, #0
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	3718      	adds	r7, #24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	bd80      	pop	{r7, pc}

08001a78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b095      	sub	sp, #84	; 0x54
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	330c      	adds	r3, #12
 8001a86:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a8a:	e853 3f00 	ldrex	r3, [r3]
 8001a8e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001a90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a92:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001a96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	330c      	adds	r3, #12
 8001a9e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001aa0:	643a      	str	r2, [r7, #64]	; 0x40
 8001aa2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001aa4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001aa6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001aa8:	e841 2300 	strex	r3, r2, [r1]
 8001aac:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d1e5      	bne.n	8001a80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	3314      	adds	r3, #20
 8001aba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001abc:	6a3b      	ldr	r3, [r7, #32]
 8001abe:	e853 3f00 	ldrex	r3, [r3]
 8001ac2:	61fb      	str	r3, [r7, #28]
   return(result);
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	f023 0301 	bic.w	r3, r3, #1
 8001aca:	64bb      	str	r3, [r7, #72]	; 0x48
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	3314      	adds	r3, #20
 8001ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001ad4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001ad6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ad8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001ada:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001adc:	e841 2300 	strex	r3, r2, [r1]
 8001ae0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d1e5      	bne.n	8001ab4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d119      	bne.n	8001b24 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	330c      	adds	r3, #12
 8001af6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	e853 3f00 	ldrex	r3, [r3]
 8001afe:	60bb      	str	r3, [r7, #8]
   return(result);
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	f023 0310 	bic.w	r3, r3, #16
 8001b06:	647b      	str	r3, [r7, #68]	; 0x44
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	330c      	adds	r3, #12
 8001b0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001b10:	61ba      	str	r2, [r7, #24]
 8001b12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001b14:	6979      	ldr	r1, [r7, #20]
 8001b16:	69ba      	ldr	r2, [r7, #24]
 8001b18:	e841 2300 	strex	r3, r2, [r1]
 8001b1c:	613b      	str	r3, [r7, #16]
   return(result);
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d1e5      	bne.n	8001af0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2220      	movs	r2, #32
 8001b28:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001b32:	bf00      	nop
 8001b34:	3754      	adds	r7, #84	; 0x54
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
	...

08001b40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001b44:	b0c0      	sub	sp, #256	; 0x100
 8001b46:	af00      	add	r7, sp, #0
 8001b48:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b5c:	68d9      	ldr	r1, [r3, #12]
 8001b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b62:	681a      	ldr	r2, [r3, #0]
 8001b64:	ea40 0301 	orr.w	r3, r0, r1
 8001b68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001b6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b6e:	689a      	ldr	r2, [r3, #8]
 8001b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b74:	691b      	ldr	r3, [r3, #16]
 8001b76:	431a      	orrs	r2, r3
 8001b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b7c:	695b      	ldr	r3, [r3, #20]
 8001b7e:	431a      	orrs	r2, r3
 8001b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	4313      	orrs	r3, r2
 8001b88:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001b98:	f021 010c 	bic.w	r1, r1, #12
 8001b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001ba6:	430b      	orrs	r3, r1
 8001ba8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	695b      	ldr	r3, [r3, #20]
 8001bb2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001bb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bba:	6999      	ldr	r1, [r3, #24]
 8001bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	ea40 0301 	orr.w	r3, r0, r1
 8001bc6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	4b8f      	ldr	r3, [pc, #572]	; (8001e0c <UART_SetConfig+0x2cc>)
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d005      	beq.n	8001be0 <UART_SetConfig+0xa0>
 8001bd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	4b8d      	ldr	r3, [pc, #564]	; (8001e10 <UART_SetConfig+0x2d0>)
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d104      	bne.n	8001bea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001be0:	f7ff fe02 	bl	80017e8 <HAL_RCC_GetPCLK2Freq>
 8001be4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001be8:	e003      	b.n	8001bf2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001bea:	f7ff fde9 	bl	80017c0 <HAL_RCC_GetPCLK1Freq>
 8001bee:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bfc:	f040 810c 	bne.w	8001e18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001c00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c04:	2200      	movs	r2, #0
 8001c06:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001c0a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001c12:	4622      	mov	r2, r4
 8001c14:	462b      	mov	r3, r5
 8001c16:	1891      	adds	r1, r2, r2
 8001c18:	65b9      	str	r1, [r7, #88]	; 0x58
 8001c1a:	415b      	adcs	r3, r3
 8001c1c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001c1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001c22:	4621      	mov	r1, r4
 8001c24:	eb12 0801 	adds.w	r8, r2, r1
 8001c28:	4629      	mov	r1, r5
 8001c2a:	eb43 0901 	adc.w	r9, r3, r1
 8001c2e:	f04f 0200 	mov.w	r2, #0
 8001c32:	f04f 0300 	mov.w	r3, #0
 8001c36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001c3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001c3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001c42:	4690      	mov	r8, r2
 8001c44:	4699      	mov	r9, r3
 8001c46:	4623      	mov	r3, r4
 8001c48:	eb18 0303 	adds.w	r3, r8, r3
 8001c4c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001c50:	462b      	mov	r3, r5
 8001c52:	eb49 0303 	adc.w	r3, r9, r3
 8001c56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c66:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001c6e:	460b      	mov	r3, r1
 8001c70:	18db      	adds	r3, r3, r3
 8001c72:	653b      	str	r3, [r7, #80]	; 0x50
 8001c74:	4613      	mov	r3, r2
 8001c76:	eb42 0303 	adc.w	r3, r2, r3
 8001c7a:	657b      	str	r3, [r7, #84]	; 0x54
 8001c7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001c80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001c84:	f7fe faf4 	bl	8000270 <__aeabi_uldivmod>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	460b      	mov	r3, r1
 8001c8c:	4b61      	ldr	r3, [pc, #388]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001c8e:	fba3 2302 	umull	r2, r3, r3, r2
 8001c92:	095b      	lsrs	r3, r3, #5
 8001c94:	011c      	lsls	r4, r3, #4
 8001c96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ca0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001ca4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ca8:	4642      	mov	r2, r8
 8001caa:	464b      	mov	r3, r9
 8001cac:	1891      	adds	r1, r2, r2
 8001cae:	64b9      	str	r1, [r7, #72]	; 0x48
 8001cb0:	415b      	adcs	r3, r3
 8001cb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001cb8:	4641      	mov	r1, r8
 8001cba:	eb12 0a01 	adds.w	sl, r2, r1
 8001cbe:	4649      	mov	r1, r9
 8001cc0:	eb43 0b01 	adc.w	fp, r3, r1
 8001cc4:	f04f 0200 	mov.w	r2, #0
 8001cc8:	f04f 0300 	mov.w	r3, #0
 8001ccc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001cd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001cd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001cd8:	4692      	mov	sl, r2
 8001cda:	469b      	mov	fp, r3
 8001cdc:	4643      	mov	r3, r8
 8001cde:	eb1a 0303 	adds.w	r3, sl, r3
 8001ce2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001ce6:	464b      	mov	r3, r9
 8001ce8:	eb4b 0303 	adc.w	r3, fp, r3
 8001cec:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001cf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001cfc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001d00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001d04:	460b      	mov	r3, r1
 8001d06:	18db      	adds	r3, r3, r3
 8001d08:	643b      	str	r3, [r7, #64]	; 0x40
 8001d0a:	4613      	mov	r3, r2
 8001d0c:	eb42 0303 	adc.w	r3, r2, r3
 8001d10:	647b      	str	r3, [r7, #68]	; 0x44
 8001d12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001d16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001d1a:	f7fe faa9 	bl	8000270 <__aeabi_uldivmod>
 8001d1e:	4602      	mov	r2, r0
 8001d20:	460b      	mov	r3, r1
 8001d22:	4611      	mov	r1, r2
 8001d24:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001d26:	fba3 2301 	umull	r2, r3, r3, r1
 8001d2a:	095b      	lsrs	r3, r3, #5
 8001d2c:	2264      	movs	r2, #100	; 0x64
 8001d2e:	fb02 f303 	mul.w	r3, r2, r3
 8001d32:	1acb      	subs	r3, r1, r3
 8001d34:	00db      	lsls	r3, r3, #3
 8001d36:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001d3a:	4b36      	ldr	r3, [pc, #216]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001d3c:	fba3 2302 	umull	r2, r3, r3, r2
 8001d40:	095b      	lsrs	r3, r3, #5
 8001d42:	005b      	lsls	r3, r3, #1
 8001d44:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001d48:	441c      	add	r4, r3
 8001d4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001d4e:	2200      	movs	r2, #0
 8001d50:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001d54:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001d58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001d5c:	4642      	mov	r2, r8
 8001d5e:	464b      	mov	r3, r9
 8001d60:	1891      	adds	r1, r2, r2
 8001d62:	63b9      	str	r1, [r7, #56]	; 0x38
 8001d64:	415b      	adcs	r3, r3
 8001d66:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001d68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001d6c:	4641      	mov	r1, r8
 8001d6e:	1851      	adds	r1, r2, r1
 8001d70:	6339      	str	r1, [r7, #48]	; 0x30
 8001d72:	4649      	mov	r1, r9
 8001d74:	414b      	adcs	r3, r1
 8001d76:	637b      	str	r3, [r7, #52]	; 0x34
 8001d78:	f04f 0200 	mov.w	r2, #0
 8001d7c:	f04f 0300 	mov.w	r3, #0
 8001d80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001d84:	4659      	mov	r1, fp
 8001d86:	00cb      	lsls	r3, r1, #3
 8001d88:	4651      	mov	r1, sl
 8001d8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001d8e:	4651      	mov	r1, sl
 8001d90:	00ca      	lsls	r2, r1, #3
 8001d92:	4610      	mov	r0, r2
 8001d94:	4619      	mov	r1, r3
 8001d96:	4603      	mov	r3, r0
 8001d98:	4642      	mov	r2, r8
 8001d9a:	189b      	adds	r3, r3, r2
 8001d9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001da0:	464b      	mov	r3, r9
 8001da2:	460a      	mov	r2, r1
 8001da4:	eb42 0303 	adc.w	r3, r2, r3
 8001da8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	2200      	movs	r2, #0
 8001db4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001db8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001dbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001dc0:	460b      	mov	r3, r1
 8001dc2:	18db      	adds	r3, r3, r3
 8001dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001dc6:	4613      	mov	r3, r2
 8001dc8:	eb42 0303 	adc.w	r3, r2, r3
 8001dcc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001dd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8001dd6:	f7fe fa4b 	bl	8000270 <__aeabi_uldivmod>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001de0:	fba3 1302 	umull	r1, r3, r3, r2
 8001de4:	095b      	lsrs	r3, r3, #5
 8001de6:	2164      	movs	r1, #100	; 0x64
 8001de8:	fb01 f303 	mul.w	r3, r1, r3
 8001dec:	1ad3      	subs	r3, r2, r3
 8001dee:	00db      	lsls	r3, r3, #3
 8001df0:	3332      	adds	r3, #50	; 0x32
 8001df2:	4a08      	ldr	r2, [pc, #32]	; (8001e14 <UART_SetConfig+0x2d4>)
 8001df4:	fba2 2303 	umull	r2, r3, r2, r3
 8001df8:	095b      	lsrs	r3, r3, #5
 8001dfa:	f003 0207 	and.w	r2, r3, #7
 8001dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4422      	add	r2, r4
 8001e06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8001e08:	e106      	b.n	8002018 <UART_SetConfig+0x4d8>
 8001e0a:	bf00      	nop
 8001e0c:	40011000 	.word	0x40011000
 8001e10:	40011400 	.word	0x40011400
 8001e14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8001e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001e22:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001e26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8001e2a:	4642      	mov	r2, r8
 8001e2c:	464b      	mov	r3, r9
 8001e2e:	1891      	adds	r1, r2, r2
 8001e30:	6239      	str	r1, [r7, #32]
 8001e32:	415b      	adcs	r3, r3
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
 8001e36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001e3a:	4641      	mov	r1, r8
 8001e3c:	1854      	adds	r4, r2, r1
 8001e3e:	4649      	mov	r1, r9
 8001e40:	eb43 0501 	adc.w	r5, r3, r1
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	00eb      	lsls	r3, r5, #3
 8001e4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e52:	00e2      	lsls	r2, r4, #3
 8001e54:	4614      	mov	r4, r2
 8001e56:	461d      	mov	r5, r3
 8001e58:	4643      	mov	r3, r8
 8001e5a:	18e3      	adds	r3, r4, r3
 8001e5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001e60:	464b      	mov	r3, r9
 8001e62:	eb45 0303 	adc.w	r3, r5, r3
 8001e66:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001e76:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001e7a:	f04f 0200 	mov.w	r2, #0
 8001e7e:	f04f 0300 	mov.w	r3, #0
 8001e82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001e86:	4629      	mov	r1, r5
 8001e88:	008b      	lsls	r3, r1, #2
 8001e8a:	4621      	mov	r1, r4
 8001e8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001e90:	4621      	mov	r1, r4
 8001e92:	008a      	lsls	r2, r1, #2
 8001e94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8001e98:	f7fe f9ea 	bl	8000270 <__aeabi_uldivmod>
 8001e9c:	4602      	mov	r2, r0
 8001e9e:	460b      	mov	r3, r1
 8001ea0:	4b60      	ldr	r3, [pc, #384]	; (8002024 <UART_SetConfig+0x4e4>)
 8001ea2:	fba3 2302 	umull	r2, r3, r3, r2
 8001ea6:	095b      	lsrs	r3, r3, #5
 8001ea8:	011c      	lsls	r4, r3, #4
 8001eaa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001eae:	2200      	movs	r2, #0
 8001eb0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001eb4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001eb8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8001ebc:	4642      	mov	r2, r8
 8001ebe:	464b      	mov	r3, r9
 8001ec0:	1891      	adds	r1, r2, r2
 8001ec2:	61b9      	str	r1, [r7, #24]
 8001ec4:	415b      	adcs	r3, r3
 8001ec6:	61fb      	str	r3, [r7, #28]
 8001ec8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ecc:	4641      	mov	r1, r8
 8001ece:	1851      	adds	r1, r2, r1
 8001ed0:	6139      	str	r1, [r7, #16]
 8001ed2:	4649      	mov	r1, r9
 8001ed4:	414b      	adcs	r3, r1
 8001ed6:	617b      	str	r3, [r7, #20]
 8001ed8:	f04f 0200 	mov.w	r2, #0
 8001edc:	f04f 0300 	mov.w	r3, #0
 8001ee0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ee4:	4659      	mov	r1, fp
 8001ee6:	00cb      	lsls	r3, r1, #3
 8001ee8:	4651      	mov	r1, sl
 8001eea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001eee:	4651      	mov	r1, sl
 8001ef0:	00ca      	lsls	r2, r1, #3
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	4642      	mov	r2, r8
 8001efa:	189b      	adds	r3, r3, r2
 8001efc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001f00:	464b      	mov	r3, r9
 8001f02:	460a      	mov	r2, r1
 8001f04:	eb42 0303 	adc.w	r3, r2, r3
 8001f08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	2200      	movs	r2, #0
 8001f14:	67bb      	str	r3, [r7, #120]	; 0x78
 8001f16:	67fa      	str	r2, [r7, #124]	; 0x7c
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	f04f 0300 	mov.w	r3, #0
 8001f20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8001f24:	4649      	mov	r1, r9
 8001f26:	008b      	lsls	r3, r1, #2
 8001f28:	4641      	mov	r1, r8
 8001f2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001f2e:	4641      	mov	r1, r8
 8001f30:	008a      	lsls	r2, r1, #2
 8001f32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8001f36:	f7fe f99b 	bl	8000270 <__aeabi_uldivmod>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	4611      	mov	r1, r2
 8001f40:	4b38      	ldr	r3, [pc, #224]	; (8002024 <UART_SetConfig+0x4e4>)
 8001f42:	fba3 2301 	umull	r2, r3, r3, r1
 8001f46:	095b      	lsrs	r3, r3, #5
 8001f48:	2264      	movs	r2, #100	; 0x64
 8001f4a:	fb02 f303 	mul.w	r3, r2, r3
 8001f4e:	1acb      	subs	r3, r1, r3
 8001f50:	011b      	lsls	r3, r3, #4
 8001f52:	3332      	adds	r3, #50	; 0x32
 8001f54:	4a33      	ldr	r2, [pc, #204]	; (8002024 <UART_SetConfig+0x4e4>)
 8001f56:	fba2 2303 	umull	r2, r3, r2, r3
 8001f5a:	095b      	lsrs	r3, r3, #5
 8001f5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f60:	441c      	add	r4, r3
 8001f62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f66:	2200      	movs	r2, #0
 8001f68:	673b      	str	r3, [r7, #112]	; 0x70
 8001f6a:	677a      	str	r2, [r7, #116]	; 0x74
 8001f6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001f70:	4642      	mov	r2, r8
 8001f72:	464b      	mov	r3, r9
 8001f74:	1891      	adds	r1, r2, r2
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	415b      	adcs	r3, r3
 8001f7a:	60fb      	str	r3, [r7, #12]
 8001f7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001f80:	4641      	mov	r1, r8
 8001f82:	1851      	adds	r1, r2, r1
 8001f84:	6039      	str	r1, [r7, #0]
 8001f86:	4649      	mov	r1, r9
 8001f88:	414b      	adcs	r3, r1
 8001f8a:	607b      	str	r3, [r7, #4]
 8001f8c:	f04f 0200 	mov.w	r2, #0
 8001f90:	f04f 0300 	mov.w	r3, #0
 8001f94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8001f98:	4659      	mov	r1, fp
 8001f9a:	00cb      	lsls	r3, r1, #3
 8001f9c:	4651      	mov	r1, sl
 8001f9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fa2:	4651      	mov	r1, sl
 8001fa4:	00ca      	lsls	r2, r1, #3
 8001fa6:	4610      	mov	r0, r2
 8001fa8:	4619      	mov	r1, r3
 8001faa:	4603      	mov	r3, r0
 8001fac:	4642      	mov	r2, r8
 8001fae:	189b      	adds	r3, r3, r2
 8001fb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8001fb2:	464b      	mov	r3, r9
 8001fb4:	460a      	mov	r2, r1
 8001fb6:	eb42 0303 	adc.w	r3, r2, r3
 8001fba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001fbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	663b      	str	r3, [r7, #96]	; 0x60
 8001fc6:	667a      	str	r2, [r7, #100]	; 0x64
 8001fc8:	f04f 0200 	mov.w	r2, #0
 8001fcc:	f04f 0300 	mov.w	r3, #0
 8001fd0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	008b      	lsls	r3, r1, #2
 8001fd8:	4641      	mov	r1, r8
 8001fda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001fde:	4641      	mov	r1, r8
 8001fe0:	008a      	lsls	r2, r1, #2
 8001fe2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8001fe6:	f7fe f943 	bl	8000270 <__aeabi_uldivmod>
 8001fea:	4602      	mov	r2, r0
 8001fec:	460b      	mov	r3, r1
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <UART_SetConfig+0x4e4>)
 8001ff0:	fba3 1302 	umull	r1, r3, r3, r2
 8001ff4:	095b      	lsrs	r3, r3, #5
 8001ff6:	2164      	movs	r1, #100	; 0x64
 8001ff8:	fb01 f303 	mul.w	r3, r1, r3
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	011b      	lsls	r3, r3, #4
 8002000:	3332      	adds	r3, #50	; 0x32
 8002002:	4a08      	ldr	r2, [pc, #32]	; (8002024 <UART_SetConfig+0x4e4>)
 8002004:	fba2 2303 	umull	r2, r3, r2, r3
 8002008:	095b      	lsrs	r3, r3, #5
 800200a:	f003 020f 	and.w	r2, r3, #15
 800200e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4422      	add	r2, r4
 8002016:	609a      	str	r2, [r3, #8]
}
 8002018:	bf00      	nop
 800201a:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800201e:	46bd      	mov	sp, r7
 8002020:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002024:	51eb851f 	.word	0x51eb851f

08002028 <siprintf>:
 8002028:	b40e      	push	{r1, r2, r3}
 800202a:	b500      	push	{lr}
 800202c:	b09c      	sub	sp, #112	; 0x70
 800202e:	ab1d      	add	r3, sp, #116	; 0x74
 8002030:	9002      	str	r0, [sp, #8]
 8002032:	9006      	str	r0, [sp, #24]
 8002034:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002038:	4809      	ldr	r0, [pc, #36]	; (8002060 <siprintf+0x38>)
 800203a:	9107      	str	r1, [sp, #28]
 800203c:	9104      	str	r1, [sp, #16]
 800203e:	4909      	ldr	r1, [pc, #36]	; (8002064 <siprintf+0x3c>)
 8002040:	f853 2b04 	ldr.w	r2, [r3], #4
 8002044:	9105      	str	r1, [sp, #20]
 8002046:	6800      	ldr	r0, [r0, #0]
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	a902      	add	r1, sp, #8
 800204c:	f000 f992 	bl	8002374 <_svfiprintf_r>
 8002050:	9b02      	ldr	r3, [sp, #8]
 8002052:	2200      	movs	r2, #0
 8002054:	701a      	strb	r2, [r3, #0]
 8002056:	b01c      	add	sp, #112	; 0x70
 8002058:	f85d eb04 	ldr.w	lr, [sp], #4
 800205c:	b003      	add	sp, #12
 800205e:	4770      	bx	lr
 8002060:	20000058 	.word	0x20000058
 8002064:	ffff0208 	.word	0xffff0208

08002068 <memset>:
 8002068:	4402      	add	r2, r0
 800206a:	4603      	mov	r3, r0
 800206c:	4293      	cmp	r3, r2
 800206e:	d100      	bne.n	8002072 <memset+0xa>
 8002070:	4770      	bx	lr
 8002072:	f803 1b01 	strb.w	r1, [r3], #1
 8002076:	e7f9      	b.n	800206c <memset+0x4>

08002078 <__errno>:
 8002078:	4b01      	ldr	r3, [pc, #4]	; (8002080 <__errno+0x8>)
 800207a:	6818      	ldr	r0, [r3, #0]
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000058 	.word	0x20000058

08002084 <__libc_init_array>:
 8002084:	b570      	push	{r4, r5, r6, lr}
 8002086:	4d0d      	ldr	r5, [pc, #52]	; (80020bc <__libc_init_array+0x38>)
 8002088:	4c0d      	ldr	r4, [pc, #52]	; (80020c0 <__libc_init_array+0x3c>)
 800208a:	1b64      	subs	r4, r4, r5
 800208c:	10a4      	asrs	r4, r4, #2
 800208e:	2600      	movs	r6, #0
 8002090:	42a6      	cmp	r6, r4
 8002092:	d109      	bne.n	80020a8 <__libc_init_array+0x24>
 8002094:	4d0b      	ldr	r5, [pc, #44]	; (80020c4 <__libc_init_array+0x40>)
 8002096:	4c0c      	ldr	r4, [pc, #48]	; (80020c8 <__libc_init_array+0x44>)
 8002098:	f000 fc6a 	bl	8002970 <_init>
 800209c:	1b64      	subs	r4, r4, r5
 800209e:	10a4      	asrs	r4, r4, #2
 80020a0:	2600      	movs	r6, #0
 80020a2:	42a6      	cmp	r6, r4
 80020a4:	d105      	bne.n	80020b2 <__libc_init_array+0x2e>
 80020a6:	bd70      	pop	{r4, r5, r6, pc}
 80020a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80020ac:	4798      	blx	r3
 80020ae:	3601      	adds	r6, #1
 80020b0:	e7ee      	b.n	8002090 <__libc_init_array+0xc>
 80020b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80020b6:	4798      	blx	r3
 80020b8:	3601      	adds	r6, #1
 80020ba:	e7f2      	b.n	80020a2 <__libc_init_array+0x1e>
 80020bc:	080029fc 	.word	0x080029fc
 80020c0:	080029fc 	.word	0x080029fc
 80020c4:	080029fc 	.word	0x080029fc
 80020c8:	08002a00 	.word	0x08002a00

080020cc <__retarget_lock_acquire_recursive>:
 80020cc:	4770      	bx	lr

080020ce <__retarget_lock_release_recursive>:
 80020ce:	4770      	bx	lr

080020d0 <_free_r>:
 80020d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80020d2:	2900      	cmp	r1, #0
 80020d4:	d044      	beq.n	8002160 <_free_r+0x90>
 80020d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80020da:	9001      	str	r0, [sp, #4]
 80020dc:	2b00      	cmp	r3, #0
 80020de:	f1a1 0404 	sub.w	r4, r1, #4
 80020e2:	bfb8      	it	lt
 80020e4:	18e4      	addlt	r4, r4, r3
 80020e6:	f000 f8df 	bl	80022a8 <__malloc_lock>
 80020ea:	4a1e      	ldr	r2, [pc, #120]	; (8002164 <_free_r+0x94>)
 80020ec:	9801      	ldr	r0, [sp, #4]
 80020ee:	6813      	ldr	r3, [r2, #0]
 80020f0:	b933      	cbnz	r3, 8002100 <_free_r+0x30>
 80020f2:	6063      	str	r3, [r4, #4]
 80020f4:	6014      	str	r4, [r2, #0]
 80020f6:	b003      	add	sp, #12
 80020f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80020fc:	f000 b8da 	b.w	80022b4 <__malloc_unlock>
 8002100:	42a3      	cmp	r3, r4
 8002102:	d908      	bls.n	8002116 <_free_r+0x46>
 8002104:	6825      	ldr	r5, [r4, #0]
 8002106:	1961      	adds	r1, r4, r5
 8002108:	428b      	cmp	r3, r1
 800210a:	bf01      	itttt	eq
 800210c:	6819      	ldreq	r1, [r3, #0]
 800210e:	685b      	ldreq	r3, [r3, #4]
 8002110:	1949      	addeq	r1, r1, r5
 8002112:	6021      	streq	r1, [r4, #0]
 8002114:	e7ed      	b.n	80020f2 <_free_r+0x22>
 8002116:	461a      	mov	r2, r3
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	b10b      	cbz	r3, 8002120 <_free_r+0x50>
 800211c:	42a3      	cmp	r3, r4
 800211e:	d9fa      	bls.n	8002116 <_free_r+0x46>
 8002120:	6811      	ldr	r1, [r2, #0]
 8002122:	1855      	adds	r5, r2, r1
 8002124:	42a5      	cmp	r5, r4
 8002126:	d10b      	bne.n	8002140 <_free_r+0x70>
 8002128:	6824      	ldr	r4, [r4, #0]
 800212a:	4421      	add	r1, r4
 800212c:	1854      	adds	r4, r2, r1
 800212e:	42a3      	cmp	r3, r4
 8002130:	6011      	str	r1, [r2, #0]
 8002132:	d1e0      	bne.n	80020f6 <_free_r+0x26>
 8002134:	681c      	ldr	r4, [r3, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	6053      	str	r3, [r2, #4]
 800213a:	440c      	add	r4, r1
 800213c:	6014      	str	r4, [r2, #0]
 800213e:	e7da      	b.n	80020f6 <_free_r+0x26>
 8002140:	d902      	bls.n	8002148 <_free_r+0x78>
 8002142:	230c      	movs	r3, #12
 8002144:	6003      	str	r3, [r0, #0]
 8002146:	e7d6      	b.n	80020f6 <_free_r+0x26>
 8002148:	6825      	ldr	r5, [r4, #0]
 800214a:	1961      	adds	r1, r4, r5
 800214c:	428b      	cmp	r3, r1
 800214e:	bf04      	itt	eq
 8002150:	6819      	ldreq	r1, [r3, #0]
 8002152:	685b      	ldreq	r3, [r3, #4]
 8002154:	6063      	str	r3, [r4, #4]
 8002156:	bf04      	itt	eq
 8002158:	1949      	addeq	r1, r1, r5
 800215a:	6021      	streq	r1, [r4, #0]
 800215c:	6054      	str	r4, [r2, #4]
 800215e:	e7ca      	b.n	80020f6 <_free_r+0x26>
 8002160:	b003      	add	sp, #12
 8002162:	bd30      	pop	{r4, r5, pc}
 8002164:	2000023c 	.word	0x2000023c

08002168 <sbrk_aligned>:
 8002168:	b570      	push	{r4, r5, r6, lr}
 800216a:	4e0e      	ldr	r6, [pc, #56]	; (80021a4 <sbrk_aligned+0x3c>)
 800216c:	460c      	mov	r4, r1
 800216e:	6831      	ldr	r1, [r6, #0]
 8002170:	4605      	mov	r5, r0
 8002172:	b911      	cbnz	r1, 800217a <sbrk_aligned+0x12>
 8002174:	f000 fba6 	bl	80028c4 <_sbrk_r>
 8002178:	6030      	str	r0, [r6, #0]
 800217a:	4621      	mov	r1, r4
 800217c:	4628      	mov	r0, r5
 800217e:	f000 fba1 	bl	80028c4 <_sbrk_r>
 8002182:	1c43      	adds	r3, r0, #1
 8002184:	d00a      	beq.n	800219c <sbrk_aligned+0x34>
 8002186:	1cc4      	adds	r4, r0, #3
 8002188:	f024 0403 	bic.w	r4, r4, #3
 800218c:	42a0      	cmp	r0, r4
 800218e:	d007      	beq.n	80021a0 <sbrk_aligned+0x38>
 8002190:	1a21      	subs	r1, r4, r0
 8002192:	4628      	mov	r0, r5
 8002194:	f000 fb96 	bl	80028c4 <_sbrk_r>
 8002198:	3001      	adds	r0, #1
 800219a:	d101      	bne.n	80021a0 <sbrk_aligned+0x38>
 800219c:	f04f 34ff 	mov.w	r4, #4294967295
 80021a0:	4620      	mov	r0, r4
 80021a2:	bd70      	pop	{r4, r5, r6, pc}
 80021a4:	20000240 	.word	0x20000240

080021a8 <_malloc_r>:
 80021a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80021ac:	1ccd      	adds	r5, r1, #3
 80021ae:	f025 0503 	bic.w	r5, r5, #3
 80021b2:	3508      	adds	r5, #8
 80021b4:	2d0c      	cmp	r5, #12
 80021b6:	bf38      	it	cc
 80021b8:	250c      	movcc	r5, #12
 80021ba:	2d00      	cmp	r5, #0
 80021bc:	4607      	mov	r7, r0
 80021be:	db01      	blt.n	80021c4 <_malloc_r+0x1c>
 80021c0:	42a9      	cmp	r1, r5
 80021c2:	d905      	bls.n	80021d0 <_malloc_r+0x28>
 80021c4:	230c      	movs	r3, #12
 80021c6:	603b      	str	r3, [r7, #0]
 80021c8:	2600      	movs	r6, #0
 80021ca:	4630      	mov	r0, r6
 80021cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80021d0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80022a4 <_malloc_r+0xfc>
 80021d4:	f000 f868 	bl	80022a8 <__malloc_lock>
 80021d8:	f8d8 3000 	ldr.w	r3, [r8]
 80021dc:	461c      	mov	r4, r3
 80021de:	bb5c      	cbnz	r4, 8002238 <_malloc_r+0x90>
 80021e0:	4629      	mov	r1, r5
 80021e2:	4638      	mov	r0, r7
 80021e4:	f7ff ffc0 	bl	8002168 <sbrk_aligned>
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	4604      	mov	r4, r0
 80021ec:	d155      	bne.n	800229a <_malloc_r+0xf2>
 80021ee:	f8d8 4000 	ldr.w	r4, [r8]
 80021f2:	4626      	mov	r6, r4
 80021f4:	2e00      	cmp	r6, #0
 80021f6:	d145      	bne.n	8002284 <_malloc_r+0xdc>
 80021f8:	2c00      	cmp	r4, #0
 80021fa:	d048      	beq.n	800228e <_malloc_r+0xe6>
 80021fc:	6823      	ldr	r3, [r4, #0]
 80021fe:	4631      	mov	r1, r6
 8002200:	4638      	mov	r0, r7
 8002202:	eb04 0903 	add.w	r9, r4, r3
 8002206:	f000 fb5d 	bl	80028c4 <_sbrk_r>
 800220a:	4581      	cmp	r9, r0
 800220c:	d13f      	bne.n	800228e <_malloc_r+0xe6>
 800220e:	6821      	ldr	r1, [r4, #0]
 8002210:	1a6d      	subs	r5, r5, r1
 8002212:	4629      	mov	r1, r5
 8002214:	4638      	mov	r0, r7
 8002216:	f7ff ffa7 	bl	8002168 <sbrk_aligned>
 800221a:	3001      	adds	r0, #1
 800221c:	d037      	beq.n	800228e <_malloc_r+0xe6>
 800221e:	6823      	ldr	r3, [r4, #0]
 8002220:	442b      	add	r3, r5
 8002222:	6023      	str	r3, [r4, #0]
 8002224:	f8d8 3000 	ldr.w	r3, [r8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d038      	beq.n	800229e <_malloc_r+0xf6>
 800222c:	685a      	ldr	r2, [r3, #4]
 800222e:	42a2      	cmp	r2, r4
 8002230:	d12b      	bne.n	800228a <_malloc_r+0xe2>
 8002232:	2200      	movs	r2, #0
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	e00f      	b.n	8002258 <_malloc_r+0xb0>
 8002238:	6822      	ldr	r2, [r4, #0]
 800223a:	1b52      	subs	r2, r2, r5
 800223c:	d41f      	bmi.n	800227e <_malloc_r+0xd6>
 800223e:	2a0b      	cmp	r2, #11
 8002240:	d917      	bls.n	8002272 <_malloc_r+0xca>
 8002242:	1961      	adds	r1, r4, r5
 8002244:	42a3      	cmp	r3, r4
 8002246:	6025      	str	r5, [r4, #0]
 8002248:	bf18      	it	ne
 800224a:	6059      	strne	r1, [r3, #4]
 800224c:	6863      	ldr	r3, [r4, #4]
 800224e:	bf08      	it	eq
 8002250:	f8c8 1000 	streq.w	r1, [r8]
 8002254:	5162      	str	r2, [r4, r5]
 8002256:	604b      	str	r3, [r1, #4]
 8002258:	4638      	mov	r0, r7
 800225a:	f104 060b 	add.w	r6, r4, #11
 800225e:	f000 f829 	bl	80022b4 <__malloc_unlock>
 8002262:	f026 0607 	bic.w	r6, r6, #7
 8002266:	1d23      	adds	r3, r4, #4
 8002268:	1af2      	subs	r2, r6, r3
 800226a:	d0ae      	beq.n	80021ca <_malloc_r+0x22>
 800226c:	1b9b      	subs	r3, r3, r6
 800226e:	50a3      	str	r3, [r4, r2]
 8002270:	e7ab      	b.n	80021ca <_malloc_r+0x22>
 8002272:	42a3      	cmp	r3, r4
 8002274:	6862      	ldr	r2, [r4, #4]
 8002276:	d1dd      	bne.n	8002234 <_malloc_r+0x8c>
 8002278:	f8c8 2000 	str.w	r2, [r8]
 800227c:	e7ec      	b.n	8002258 <_malloc_r+0xb0>
 800227e:	4623      	mov	r3, r4
 8002280:	6864      	ldr	r4, [r4, #4]
 8002282:	e7ac      	b.n	80021de <_malloc_r+0x36>
 8002284:	4634      	mov	r4, r6
 8002286:	6876      	ldr	r6, [r6, #4]
 8002288:	e7b4      	b.n	80021f4 <_malloc_r+0x4c>
 800228a:	4613      	mov	r3, r2
 800228c:	e7cc      	b.n	8002228 <_malloc_r+0x80>
 800228e:	230c      	movs	r3, #12
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4638      	mov	r0, r7
 8002294:	f000 f80e 	bl	80022b4 <__malloc_unlock>
 8002298:	e797      	b.n	80021ca <_malloc_r+0x22>
 800229a:	6025      	str	r5, [r4, #0]
 800229c:	e7dc      	b.n	8002258 <_malloc_r+0xb0>
 800229e:	605b      	str	r3, [r3, #4]
 80022a0:	deff      	udf	#255	; 0xff
 80022a2:	bf00      	nop
 80022a4:	2000023c 	.word	0x2000023c

080022a8 <__malloc_lock>:
 80022a8:	4801      	ldr	r0, [pc, #4]	; (80022b0 <__malloc_lock+0x8>)
 80022aa:	f7ff bf0f 	b.w	80020cc <__retarget_lock_acquire_recursive>
 80022ae:	bf00      	nop
 80022b0:	20000238 	.word	0x20000238

080022b4 <__malloc_unlock>:
 80022b4:	4801      	ldr	r0, [pc, #4]	; (80022bc <__malloc_unlock+0x8>)
 80022b6:	f7ff bf0a 	b.w	80020ce <__retarget_lock_release_recursive>
 80022ba:	bf00      	nop
 80022bc:	20000238 	.word	0x20000238

080022c0 <__ssputs_r>:
 80022c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80022c4:	688e      	ldr	r6, [r1, #8]
 80022c6:	461f      	mov	r7, r3
 80022c8:	42be      	cmp	r6, r7
 80022ca:	680b      	ldr	r3, [r1, #0]
 80022cc:	4682      	mov	sl, r0
 80022ce:	460c      	mov	r4, r1
 80022d0:	4690      	mov	r8, r2
 80022d2:	d82c      	bhi.n	800232e <__ssputs_r+0x6e>
 80022d4:	898a      	ldrh	r2, [r1, #12]
 80022d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80022da:	d026      	beq.n	800232a <__ssputs_r+0x6a>
 80022dc:	6965      	ldr	r5, [r4, #20]
 80022de:	6909      	ldr	r1, [r1, #16]
 80022e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80022e4:	eba3 0901 	sub.w	r9, r3, r1
 80022e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80022ec:	1c7b      	adds	r3, r7, #1
 80022ee:	444b      	add	r3, r9
 80022f0:	106d      	asrs	r5, r5, #1
 80022f2:	429d      	cmp	r5, r3
 80022f4:	bf38      	it	cc
 80022f6:	461d      	movcc	r5, r3
 80022f8:	0553      	lsls	r3, r2, #21
 80022fa:	d527      	bpl.n	800234c <__ssputs_r+0x8c>
 80022fc:	4629      	mov	r1, r5
 80022fe:	f7ff ff53 	bl	80021a8 <_malloc_r>
 8002302:	4606      	mov	r6, r0
 8002304:	b360      	cbz	r0, 8002360 <__ssputs_r+0xa0>
 8002306:	6921      	ldr	r1, [r4, #16]
 8002308:	464a      	mov	r2, r9
 800230a:	f000 faeb 	bl	80028e4 <memcpy>
 800230e:	89a3      	ldrh	r3, [r4, #12]
 8002310:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002314:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002318:	81a3      	strh	r3, [r4, #12]
 800231a:	6126      	str	r6, [r4, #16]
 800231c:	6165      	str	r5, [r4, #20]
 800231e:	444e      	add	r6, r9
 8002320:	eba5 0509 	sub.w	r5, r5, r9
 8002324:	6026      	str	r6, [r4, #0]
 8002326:	60a5      	str	r5, [r4, #8]
 8002328:	463e      	mov	r6, r7
 800232a:	42be      	cmp	r6, r7
 800232c:	d900      	bls.n	8002330 <__ssputs_r+0x70>
 800232e:	463e      	mov	r6, r7
 8002330:	6820      	ldr	r0, [r4, #0]
 8002332:	4632      	mov	r2, r6
 8002334:	4641      	mov	r1, r8
 8002336:	f000 faab 	bl	8002890 <memmove>
 800233a:	68a3      	ldr	r3, [r4, #8]
 800233c:	1b9b      	subs	r3, r3, r6
 800233e:	60a3      	str	r3, [r4, #8]
 8002340:	6823      	ldr	r3, [r4, #0]
 8002342:	4433      	add	r3, r6
 8002344:	6023      	str	r3, [r4, #0]
 8002346:	2000      	movs	r0, #0
 8002348:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800234c:	462a      	mov	r2, r5
 800234e:	f000 fad7 	bl	8002900 <_realloc_r>
 8002352:	4606      	mov	r6, r0
 8002354:	2800      	cmp	r0, #0
 8002356:	d1e0      	bne.n	800231a <__ssputs_r+0x5a>
 8002358:	6921      	ldr	r1, [r4, #16]
 800235a:	4650      	mov	r0, sl
 800235c:	f7ff feb8 	bl	80020d0 <_free_r>
 8002360:	230c      	movs	r3, #12
 8002362:	f8ca 3000 	str.w	r3, [sl]
 8002366:	89a3      	ldrh	r3, [r4, #12]
 8002368:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800236c:	81a3      	strh	r3, [r4, #12]
 800236e:	f04f 30ff 	mov.w	r0, #4294967295
 8002372:	e7e9      	b.n	8002348 <__ssputs_r+0x88>

08002374 <_svfiprintf_r>:
 8002374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002378:	4698      	mov	r8, r3
 800237a:	898b      	ldrh	r3, [r1, #12]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	b09d      	sub	sp, #116	; 0x74
 8002380:	4607      	mov	r7, r0
 8002382:	460d      	mov	r5, r1
 8002384:	4614      	mov	r4, r2
 8002386:	d50e      	bpl.n	80023a6 <_svfiprintf_r+0x32>
 8002388:	690b      	ldr	r3, [r1, #16]
 800238a:	b963      	cbnz	r3, 80023a6 <_svfiprintf_r+0x32>
 800238c:	2140      	movs	r1, #64	; 0x40
 800238e:	f7ff ff0b 	bl	80021a8 <_malloc_r>
 8002392:	6028      	str	r0, [r5, #0]
 8002394:	6128      	str	r0, [r5, #16]
 8002396:	b920      	cbnz	r0, 80023a2 <_svfiprintf_r+0x2e>
 8002398:	230c      	movs	r3, #12
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	f04f 30ff 	mov.w	r0, #4294967295
 80023a0:	e0d0      	b.n	8002544 <_svfiprintf_r+0x1d0>
 80023a2:	2340      	movs	r3, #64	; 0x40
 80023a4:	616b      	str	r3, [r5, #20]
 80023a6:	2300      	movs	r3, #0
 80023a8:	9309      	str	r3, [sp, #36]	; 0x24
 80023aa:	2320      	movs	r3, #32
 80023ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80023b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80023b4:	2330      	movs	r3, #48	; 0x30
 80023b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800255c <_svfiprintf_r+0x1e8>
 80023ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80023be:	f04f 0901 	mov.w	r9, #1
 80023c2:	4623      	mov	r3, r4
 80023c4:	469a      	mov	sl, r3
 80023c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80023ca:	b10a      	cbz	r2, 80023d0 <_svfiprintf_r+0x5c>
 80023cc:	2a25      	cmp	r2, #37	; 0x25
 80023ce:	d1f9      	bne.n	80023c4 <_svfiprintf_r+0x50>
 80023d0:	ebba 0b04 	subs.w	fp, sl, r4
 80023d4:	d00b      	beq.n	80023ee <_svfiprintf_r+0x7a>
 80023d6:	465b      	mov	r3, fp
 80023d8:	4622      	mov	r2, r4
 80023da:	4629      	mov	r1, r5
 80023dc:	4638      	mov	r0, r7
 80023de:	f7ff ff6f 	bl	80022c0 <__ssputs_r>
 80023e2:	3001      	adds	r0, #1
 80023e4:	f000 80a9 	beq.w	800253a <_svfiprintf_r+0x1c6>
 80023e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023ea:	445a      	add	r2, fp
 80023ec:	9209      	str	r2, [sp, #36]	; 0x24
 80023ee:	f89a 3000 	ldrb.w	r3, [sl]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	f000 80a1 	beq.w	800253a <_svfiprintf_r+0x1c6>
 80023f8:	2300      	movs	r3, #0
 80023fa:	f04f 32ff 	mov.w	r2, #4294967295
 80023fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002402:	f10a 0a01 	add.w	sl, sl, #1
 8002406:	9304      	str	r3, [sp, #16]
 8002408:	9307      	str	r3, [sp, #28]
 800240a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800240e:	931a      	str	r3, [sp, #104]	; 0x68
 8002410:	4654      	mov	r4, sl
 8002412:	2205      	movs	r2, #5
 8002414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002418:	4850      	ldr	r0, [pc, #320]	; (800255c <_svfiprintf_r+0x1e8>)
 800241a:	f7fd fed9 	bl	80001d0 <memchr>
 800241e:	9a04      	ldr	r2, [sp, #16]
 8002420:	b9d8      	cbnz	r0, 800245a <_svfiprintf_r+0xe6>
 8002422:	06d0      	lsls	r0, r2, #27
 8002424:	bf44      	itt	mi
 8002426:	2320      	movmi	r3, #32
 8002428:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800242c:	0711      	lsls	r1, r2, #28
 800242e:	bf44      	itt	mi
 8002430:	232b      	movmi	r3, #43	; 0x2b
 8002432:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002436:	f89a 3000 	ldrb.w	r3, [sl]
 800243a:	2b2a      	cmp	r3, #42	; 0x2a
 800243c:	d015      	beq.n	800246a <_svfiprintf_r+0xf6>
 800243e:	9a07      	ldr	r2, [sp, #28]
 8002440:	4654      	mov	r4, sl
 8002442:	2000      	movs	r0, #0
 8002444:	f04f 0c0a 	mov.w	ip, #10
 8002448:	4621      	mov	r1, r4
 800244a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800244e:	3b30      	subs	r3, #48	; 0x30
 8002450:	2b09      	cmp	r3, #9
 8002452:	d94d      	bls.n	80024f0 <_svfiprintf_r+0x17c>
 8002454:	b1b0      	cbz	r0, 8002484 <_svfiprintf_r+0x110>
 8002456:	9207      	str	r2, [sp, #28]
 8002458:	e014      	b.n	8002484 <_svfiprintf_r+0x110>
 800245a:	eba0 0308 	sub.w	r3, r0, r8
 800245e:	fa09 f303 	lsl.w	r3, r9, r3
 8002462:	4313      	orrs	r3, r2
 8002464:	9304      	str	r3, [sp, #16]
 8002466:	46a2      	mov	sl, r4
 8002468:	e7d2      	b.n	8002410 <_svfiprintf_r+0x9c>
 800246a:	9b03      	ldr	r3, [sp, #12]
 800246c:	1d19      	adds	r1, r3, #4
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	9103      	str	r1, [sp, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	bfbb      	ittet	lt
 8002476:	425b      	neglt	r3, r3
 8002478:	f042 0202 	orrlt.w	r2, r2, #2
 800247c:	9307      	strge	r3, [sp, #28]
 800247e:	9307      	strlt	r3, [sp, #28]
 8002480:	bfb8      	it	lt
 8002482:	9204      	strlt	r2, [sp, #16]
 8002484:	7823      	ldrb	r3, [r4, #0]
 8002486:	2b2e      	cmp	r3, #46	; 0x2e
 8002488:	d10c      	bne.n	80024a4 <_svfiprintf_r+0x130>
 800248a:	7863      	ldrb	r3, [r4, #1]
 800248c:	2b2a      	cmp	r3, #42	; 0x2a
 800248e:	d134      	bne.n	80024fa <_svfiprintf_r+0x186>
 8002490:	9b03      	ldr	r3, [sp, #12]
 8002492:	1d1a      	adds	r2, r3, #4
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	9203      	str	r2, [sp, #12]
 8002498:	2b00      	cmp	r3, #0
 800249a:	bfb8      	it	lt
 800249c:	f04f 33ff 	movlt.w	r3, #4294967295
 80024a0:	3402      	adds	r4, #2
 80024a2:	9305      	str	r3, [sp, #20]
 80024a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800256c <_svfiprintf_r+0x1f8>
 80024a8:	7821      	ldrb	r1, [r4, #0]
 80024aa:	2203      	movs	r2, #3
 80024ac:	4650      	mov	r0, sl
 80024ae:	f7fd fe8f 	bl	80001d0 <memchr>
 80024b2:	b138      	cbz	r0, 80024c4 <_svfiprintf_r+0x150>
 80024b4:	9b04      	ldr	r3, [sp, #16]
 80024b6:	eba0 000a 	sub.w	r0, r0, sl
 80024ba:	2240      	movs	r2, #64	; 0x40
 80024bc:	4082      	lsls	r2, r0
 80024be:	4313      	orrs	r3, r2
 80024c0:	3401      	adds	r4, #1
 80024c2:	9304      	str	r3, [sp, #16]
 80024c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80024c8:	4825      	ldr	r0, [pc, #148]	; (8002560 <_svfiprintf_r+0x1ec>)
 80024ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80024ce:	2206      	movs	r2, #6
 80024d0:	f7fd fe7e 	bl	80001d0 <memchr>
 80024d4:	2800      	cmp	r0, #0
 80024d6:	d038      	beq.n	800254a <_svfiprintf_r+0x1d6>
 80024d8:	4b22      	ldr	r3, [pc, #136]	; (8002564 <_svfiprintf_r+0x1f0>)
 80024da:	bb1b      	cbnz	r3, 8002524 <_svfiprintf_r+0x1b0>
 80024dc:	9b03      	ldr	r3, [sp, #12]
 80024de:	3307      	adds	r3, #7
 80024e0:	f023 0307 	bic.w	r3, r3, #7
 80024e4:	3308      	adds	r3, #8
 80024e6:	9303      	str	r3, [sp, #12]
 80024e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80024ea:	4433      	add	r3, r6
 80024ec:	9309      	str	r3, [sp, #36]	; 0x24
 80024ee:	e768      	b.n	80023c2 <_svfiprintf_r+0x4e>
 80024f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80024f4:	460c      	mov	r4, r1
 80024f6:	2001      	movs	r0, #1
 80024f8:	e7a6      	b.n	8002448 <_svfiprintf_r+0xd4>
 80024fa:	2300      	movs	r3, #0
 80024fc:	3401      	adds	r4, #1
 80024fe:	9305      	str	r3, [sp, #20]
 8002500:	4619      	mov	r1, r3
 8002502:	f04f 0c0a 	mov.w	ip, #10
 8002506:	4620      	mov	r0, r4
 8002508:	f810 2b01 	ldrb.w	r2, [r0], #1
 800250c:	3a30      	subs	r2, #48	; 0x30
 800250e:	2a09      	cmp	r2, #9
 8002510:	d903      	bls.n	800251a <_svfiprintf_r+0x1a6>
 8002512:	2b00      	cmp	r3, #0
 8002514:	d0c6      	beq.n	80024a4 <_svfiprintf_r+0x130>
 8002516:	9105      	str	r1, [sp, #20]
 8002518:	e7c4      	b.n	80024a4 <_svfiprintf_r+0x130>
 800251a:	fb0c 2101 	mla	r1, ip, r1, r2
 800251e:	4604      	mov	r4, r0
 8002520:	2301      	movs	r3, #1
 8002522:	e7f0      	b.n	8002506 <_svfiprintf_r+0x192>
 8002524:	ab03      	add	r3, sp, #12
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	462a      	mov	r2, r5
 800252a:	4b0f      	ldr	r3, [pc, #60]	; (8002568 <_svfiprintf_r+0x1f4>)
 800252c:	a904      	add	r1, sp, #16
 800252e:	4638      	mov	r0, r7
 8002530:	f3af 8000 	nop.w
 8002534:	1c42      	adds	r2, r0, #1
 8002536:	4606      	mov	r6, r0
 8002538:	d1d6      	bne.n	80024e8 <_svfiprintf_r+0x174>
 800253a:	89ab      	ldrh	r3, [r5, #12]
 800253c:	065b      	lsls	r3, r3, #25
 800253e:	f53f af2d 	bmi.w	800239c <_svfiprintf_r+0x28>
 8002542:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002544:	b01d      	add	sp, #116	; 0x74
 8002546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800254a:	ab03      	add	r3, sp, #12
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	462a      	mov	r2, r5
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <_svfiprintf_r+0x1f4>)
 8002552:	a904      	add	r1, sp, #16
 8002554:	4638      	mov	r0, r7
 8002556:	f000 f879 	bl	800264c <_printf_i>
 800255a:	e7eb      	b.n	8002534 <_svfiprintf_r+0x1c0>
 800255c:	080029c0 	.word	0x080029c0
 8002560:	080029ca 	.word	0x080029ca
 8002564:	00000000 	.word	0x00000000
 8002568:	080022c1 	.word	0x080022c1
 800256c:	080029c6 	.word	0x080029c6

08002570 <_printf_common>:
 8002570:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002574:	4616      	mov	r6, r2
 8002576:	4699      	mov	r9, r3
 8002578:	688a      	ldr	r2, [r1, #8]
 800257a:	690b      	ldr	r3, [r1, #16]
 800257c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002580:	4293      	cmp	r3, r2
 8002582:	bfb8      	it	lt
 8002584:	4613      	movlt	r3, r2
 8002586:	6033      	str	r3, [r6, #0]
 8002588:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800258c:	4607      	mov	r7, r0
 800258e:	460c      	mov	r4, r1
 8002590:	b10a      	cbz	r2, 8002596 <_printf_common+0x26>
 8002592:	3301      	adds	r3, #1
 8002594:	6033      	str	r3, [r6, #0]
 8002596:	6823      	ldr	r3, [r4, #0]
 8002598:	0699      	lsls	r1, r3, #26
 800259a:	bf42      	ittt	mi
 800259c:	6833      	ldrmi	r3, [r6, #0]
 800259e:	3302      	addmi	r3, #2
 80025a0:	6033      	strmi	r3, [r6, #0]
 80025a2:	6825      	ldr	r5, [r4, #0]
 80025a4:	f015 0506 	ands.w	r5, r5, #6
 80025a8:	d106      	bne.n	80025b8 <_printf_common+0x48>
 80025aa:	f104 0a19 	add.w	sl, r4, #25
 80025ae:	68e3      	ldr	r3, [r4, #12]
 80025b0:	6832      	ldr	r2, [r6, #0]
 80025b2:	1a9b      	subs	r3, r3, r2
 80025b4:	42ab      	cmp	r3, r5
 80025b6:	dc26      	bgt.n	8002606 <_printf_common+0x96>
 80025b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80025bc:	1e13      	subs	r3, r2, #0
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	bf18      	it	ne
 80025c2:	2301      	movne	r3, #1
 80025c4:	0692      	lsls	r2, r2, #26
 80025c6:	d42b      	bmi.n	8002620 <_printf_common+0xb0>
 80025c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80025cc:	4649      	mov	r1, r9
 80025ce:	4638      	mov	r0, r7
 80025d0:	47c0      	blx	r8
 80025d2:	3001      	adds	r0, #1
 80025d4:	d01e      	beq.n	8002614 <_printf_common+0xa4>
 80025d6:	6823      	ldr	r3, [r4, #0]
 80025d8:	6922      	ldr	r2, [r4, #16]
 80025da:	f003 0306 	and.w	r3, r3, #6
 80025de:	2b04      	cmp	r3, #4
 80025e0:	bf02      	ittt	eq
 80025e2:	68e5      	ldreq	r5, [r4, #12]
 80025e4:	6833      	ldreq	r3, [r6, #0]
 80025e6:	1aed      	subeq	r5, r5, r3
 80025e8:	68a3      	ldr	r3, [r4, #8]
 80025ea:	bf0c      	ite	eq
 80025ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80025f0:	2500      	movne	r5, #0
 80025f2:	4293      	cmp	r3, r2
 80025f4:	bfc4      	itt	gt
 80025f6:	1a9b      	subgt	r3, r3, r2
 80025f8:	18ed      	addgt	r5, r5, r3
 80025fa:	2600      	movs	r6, #0
 80025fc:	341a      	adds	r4, #26
 80025fe:	42b5      	cmp	r5, r6
 8002600:	d11a      	bne.n	8002638 <_printf_common+0xc8>
 8002602:	2000      	movs	r0, #0
 8002604:	e008      	b.n	8002618 <_printf_common+0xa8>
 8002606:	2301      	movs	r3, #1
 8002608:	4652      	mov	r2, sl
 800260a:	4649      	mov	r1, r9
 800260c:	4638      	mov	r0, r7
 800260e:	47c0      	blx	r8
 8002610:	3001      	adds	r0, #1
 8002612:	d103      	bne.n	800261c <_printf_common+0xac>
 8002614:	f04f 30ff 	mov.w	r0, #4294967295
 8002618:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800261c:	3501      	adds	r5, #1
 800261e:	e7c6      	b.n	80025ae <_printf_common+0x3e>
 8002620:	18e1      	adds	r1, r4, r3
 8002622:	1c5a      	adds	r2, r3, #1
 8002624:	2030      	movs	r0, #48	; 0x30
 8002626:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800262a:	4422      	add	r2, r4
 800262c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002630:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002634:	3302      	adds	r3, #2
 8002636:	e7c7      	b.n	80025c8 <_printf_common+0x58>
 8002638:	2301      	movs	r3, #1
 800263a:	4622      	mov	r2, r4
 800263c:	4649      	mov	r1, r9
 800263e:	4638      	mov	r0, r7
 8002640:	47c0      	blx	r8
 8002642:	3001      	adds	r0, #1
 8002644:	d0e6      	beq.n	8002614 <_printf_common+0xa4>
 8002646:	3601      	adds	r6, #1
 8002648:	e7d9      	b.n	80025fe <_printf_common+0x8e>
	...

0800264c <_printf_i>:
 800264c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002650:	7e0f      	ldrb	r7, [r1, #24]
 8002652:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002654:	2f78      	cmp	r7, #120	; 0x78
 8002656:	4691      	mov	r9, r2
 8002658:	4680      	mov	r8, r0
 800265a:	460c      	mov	r4, r1
 800265c:	469a      	mov	sl, r3
 800265e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8002662:	d807      	bhi.n	8002674 <_printf_i+0x28>
 8002664:	2f62      	cmp	r7, #98	; 0x62
 8002666:	d80a      	bhi.n	800267e <_printf_i+0x32>
 8002668:	2f00      	cmp	r7, #0
 800266a:	f000 80d4 	beq.w	8002816 <_printf_i+0x1ca>
 800266e:	2f58      	cmp	r7, #88	; 0x58
 8002670:	f000 80c0 	beq.w	80027f4 <_printf_i+0x1a8>
 8002674:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002678:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800267c:	e03a      	b.n	80026f4 <_printf_i+0xa8>
 800267e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8002682:	2b15      	cmp	r3, #21
 8002684:	d8f6      	bhi.n	8002674 <_printf_i+0x28>
 8002686:	a101      	add	r1, pc, #4	; (adr r1, 800268c <_printf_i+0x40>)
 8002688:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800268c:	080026e5 	.word	0x080026e5
 8002690:	080026f9 	.word	0x080026f9
 8002694:	08002675 	.word	0x08002675
 8002698:	08002675 	.word	0x08002675
 800269c:	08002675 	.word	0x08002675
 80026a0:	08002675 	.word	0x08002675
 80026a4:	080026f9 	.word	0x080026f9
 80026a8:	08002675 	.word	0x08002675
 80026ac:	08002675 	.word	0x08002675
 80026b0:	08002675 	.word	0x08002675
 80026b4:	08002675 	.word	0x08002675
 80026b8:	080027fd 	.word	0x080027fd
 80026bc:	08002725 	.word	0x08002725
 80026c0:	080027b7 	.word	0x080027b7
 80026c4:	08002675 	.word	0x08002675
 80026c8:	08002675 	.word	0x08002675
 80026cc:	0800281f 	.word	0x0800281f
 80026d0:	08002675 	.word	0x08002675
 80026d4:	08002725 	.word	0x08002725
 80026d8:	08002675 	.word	0x08002675
 80026dc:	08002675 	.word	0x08002675
 80026e0:	080027bf 	.word	0x080027bf
 80026e4:	682b      	ldr	r3, [r5, #0]
 80026e6:	1d1a      	adds	r2, r3, #4
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	602a      	str	r2, [r5, #0]
 80026ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80026f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80026f4:	2301      	movs	r3, #1
 80026f6:	e09f      	b.n	8002838 <_printf_i+0x1ec>
 80026f8:	6820      	ldr	r0, [r4, #0]
 80026fa:	682b      	ldr	r3, [r5, #0]
 80026fc:	0607      	lsls	r7, r0, #24
 80026fe:	f103 0104 	add.w	r1, r3, #4
 8002702:	6029      	str	r1, [r5, #0]
 8002704:	d501      	bpl.n	800270a <_printf_i+0xbe>
 8002706:	681e      	ldr	r6, [r3, #0]
 8002708:	e003      	b.n	8002712 <_printf_i+0xc6>
 800270a:	0646      	lsls	r6, r0, #25
 800270c:	d5fb      	bpl.n	8002706 <_printf_i+0xba>
 800270e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8002712:	2e00      	cmp	r6, #0
 8002714:	da03      	bge.n	800271e <_printf_i+0xd2>
 8002716:	232d      	movs	r3, #45	; 0x2d
 8002718:	4276      	negs	r6, r6
 800271a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800271e:	485a      	ldr	r0, [pc, #360]	; (8002888 <_printf_i+0x23c>)
 8002720:	230a      	movs	r3, #10
 8002722:	e012      	b.n	800274a <_printf_i+0xfe>
 8002724:	682b      	ldr	r3, [r5, #0]
 8002726:	6820      	ldr	r0, [r4, #0]
 8002728:	1d19      	adds	r1, r3, #4
 800272a:	6029      	str	r1, [r5, #0]
 800272c:	0605      	lsls	r5, r0, #24
 800272e:	d501      	bpl.n	8002734 <_printf_i+0xe8>
 8002730:	681e      	ldr	r6, [r3, #0]
 8002732:	e002      	b.n	800273a <_printf_i+0xee>
 8002734:	0641      	lsls	r1, r0, #25
 8002736:	d5fb      	bpl.n	8002730 <_printf_i+0xe4>
 8002738:	881e      	ldrh	r6, [r3, #0]
 800273a:	4853      	ldr	r0, [pc, #332]	; (8002888 <_printf_i+0x23c>)
 800273c:	2f6f      	cmp	r7, #111	; 0x6f
 800273e:	bf0c      	ite	eq
 8002740:	2308      	moveq	r3, #8
 8002742:	230a      	movne	r3, #10
 8002744:	2100      	movs	r1, #0
 8002746:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800274a:	6865      	ldr	r5, [r4, #4]
 800274c:	60a5      	str	r5, [r4, #8]
 800274e:	2d00      	cmp	r5, #0
 8002750:	bfa2      	ittt	ge
 8002752:	6821      	ldrge	r1, [r4, #0]
 8002754:	f021 0104 	bicge.w	r1, r1, #4
 8002758:	6021      	strge	r1, [r4, #0]
 800275a:	b90e      	cbnz	r6, 8002760 <_printf_i+0x114>
 800275c:	2d00      	cmp	r5, #0
 800275e:	d04b      	beq.n	80027f8 <_printf_i+0x1ac>
 8002760:	4615      	mov	r5, r2
 8002762:	fbb6 f1f3 	udiv	r1, r6, r3
 8002766:	fb03 6711 	mls	r7, r3, r1, r6
 800276a:	5dc7      	ldrb	r7, [r0, r7]
 800276c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8002770:	4637      	mov	r7, r6
 8002772:	42bb      	cmp	r3, r7
 8002774:	460e      	mov	r6, r1
 8002776:	d9f4      	bls.n	8002762 <_printf_i+0x116>
 8002778:	2b08      	cmp	r3, #8
 800277a:	d10b      	bne.n	8002794 <_printf_i+0x148>
 800277c:	6823      	ldr	r3, [r4, #0]
 800277e:	07de      	lsls	r6, r3, #31
 8002780:	d508      	bpl.n	8002794 <_printf_i+0x148>
 8002782:	6923      	ldr	r3, [r4, #16]
 8002784:	6861      	ldr	r1, [r4, #4]
 8002786:	4299      	cmp	r1, r3
 8002788:	bfde      	ittt	le
 800278a:	2330      	movle	r3, #48	; 0x30
 800278c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002790:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002794:	1b52      	subs	r2, r2, r5
 8002796:	6122      	str	r2, [r4, #16]
 8002798:	f8cd a000 	str.w	sl, [sp]
 800279c:	464b      	mov	r3, r9
 800279e:	aa03      	add	r2, sp, #12
 80027a0:	4621      	mov	r1, r4
 80027a2:	4640      	mov	r0, r8
 80027a4:	f7ff fee4 	bl	8002570 <_printf_common>
 80027a8:	3001      	adds	r0, #1
 80027aa:	d14a      	bne.n	8002842 <_printf_i+0x1f6>
 80027ac:	f04f 30ff 	mov.w	r0, #4294967295
 80027b0:	b004      	add	sp, #16
 80027b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	f043 0320 	orr.w	r3, r3, #32
 80027bc:	6023      	str	r3, [r4, #0]
 80027be:	4833      	ldr	r0, [pc, #204]	; (800288c <_printf_i+0x240>)
 80027c0:	2778      	movs	r7, #120	; 0x78
 80027c2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	6829      	ldr	r1, [r5, #0]
 80027ca:	061f      	lsls	r7, r3, #24
 80027cc:	f851 6b04 	ldr.w	r6, [r1], #4
 80027d0:	d402      	bmi.n	80027d8 <_printf_i+0x18c>
 80027d2:	065f      	lsls	r7, r3, #25
 80027d4:	bf48      	it	mi
 80027d6:	b2b6      	uxthmi	r6, r6
 80027d8:	07df      	lsls	r7, r3, #31
 80027da:	bf48      	it	mi
 80027dc:	f043 0320 	orrmi.w	r3, r3, #32
 80027e0:	6029      	str	r1, [r5, #0]
 80027e2:	bf48      	it	mi
 80027e4:	6023      	strmi	r3, [r4, #0]
 80027e6:	b91e      	cbnz	r6, 80027f0 <_printf_i+0x1a4>
 80027e8:	6823      	ldr	r3, [r4, #0]
 80027ea:	f023 0320 	bic.w	r3, r3, #32
 80027ee:	6023      	str	r3, [r4, #0]
 80027f0:	2310      	movs	r3, #16
 80027f2:	e7a7      	b.n	8002744 <_printf_i+0xf8>
 80027f4:	4824      	ldr	r0, [pc, #144]	; (8002888 <_printf_i+0x23c>)
 80027f6:	e7e4      	b.n	80027c2 <_printf_i+0x176>
 80027f8:	4615      	mov	r5, r2
 80027fa:	e7bd      	b.n	8002778 <_printf_i+0x12c>
 80027fc:	682b      	ldr	r3, [r5, #0]
 80027fe:	6826      	ldr	r6, [r4, #0]
 8002800:	6961      	ldr	r1, [r4, #20]
 8002802:	1d18      	adds	r0, r3, #4
 8002804:	6028      	str	r0, [r5, #0]
 8002806:	0635      	lsls	r5, r6, #24
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	d501      	bpl.n	8002810 <_printf_i+0x1c4>
 800280c:	6019      	str	r1, [r3, #0]
 800280e:	e002      	b.n	8002816 <_printf_i+0x1ca>
 8002810:	0670      	lsls	r0, r6, #25
 8002812:	d5fb      	bpl.n	800280c <_printf_i+0x1c0>
 8002814:	8019      	strh	r1, [r3, #0]
 8002816:	2300      	movs	r3, #0
 8002818:	6123      	str	r3, [r4, #16]
 800281a:	4615      	mov	r5, r2
 800281c:	e7bc      	b.n	8002798 <_printf_i+0x14c>
 800281e:	682b      	ldr	r3, [r5, #0]
 8002820:	1d1a      	adds	r2, r3, #4
 8002822:	602a      	str	r2, [r5, #0]
 8002824:	681d      	ldr	r5, [r3, #0]
 8002826:	6862      	ldr	r2, [r4, #4]
 8002828:	2100      	movs	r1, #0
 800282a:	4628      	mov	r0, r5
 800282c:	f7fd fcd0 	bl	80001d0 <memchr>
 8002830:	b108      	cbz	r0, 8002836 <_printf_i+0x1ea>
 8002832:	1b40      	subs	r0, r0, r5
 8002834:	6060      	str	r0, [r4, #4]
 8002836:	6863      	ldr	r3, [r4, #4]
 8002838:	6123      	str	r3, [r4, #16]
 800283a:	2300      	movs	r3, #0
 800283c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002840:	e7aa      	b.n	8002798 <_printf_i+0x14c>
 8002842:	6923      	ldr	r3, [r4, #16]
 8002844:	462a      	mov	r2, r5
 8002846:	4649      	mov	r1, r9
 8002848:	4640      	mov	r0, r8
 800284a:	47d0      	blx	sl
 800284c:	3001      	adds	r0, #1
 800284e:	d0ad      	beq.n	80027ac <_printf_i+0x160>
 8002850:	6823      	ldr	r3, [r4, #0]
 8002852:	079b      	lsls	r3, r3, #30
 8002854:	d413      	bmi.n	800287e <_printf_i+0x232>
 8002856:	68e0      	ldr	r0, [r4, #12]
 8002858:	9b03      	ldr	r3, [sp, #12]
 800285a:	4298      	cmp	r0, r3
 800285c:	bfb8      	it	lt
 800285e:	4618      	movlt	r0, r3
 8002860:	e7a6      	b.n	80027b0 <_printf_i+0x164>
 8002862:	2301      	movs	r3, #1
 8002864:	4632      	mov	r2, r6
 8002866:	4649      	mov	r1, r9
 8002868:	4640      	mov	r0, r8
 800286a:	47d0      	blx	sl
 800286c:	3001      	adds	r0, #1
 800286e:	d09d      	beq.n	80027ac <_printf_i+0x160>
 8002870:	3501      	adds	r5, #1
 8002872:	68e3      	ldr	r3, [r4, #12]
 8002874:	9903      	ldr	r1, [sp, #12]
 8002876:	1a5b      	subs	r3, r3, r1
 8002878:	42ab      	cmp	r3, r5
 800287a:	dcf2      	bgt.n	8002862 <_printf_i+0x216>
 800287c:	e7eb      	b.n	8002856 <_printf_i+0x20a>
 800287e:	2500      	movs	r5, #0
 8002880:	f104 0619 	add.w	r6, r4, #25
 8002884:	e7f5      	b.n	8002872 <_printf_i+0x226>
 8002886:	bf00      	nop
 8002888:	080029d1 	.word	0x080029d1
 800288c:	080029e2 	.word	0x080029e2

08002890 <memmove>:
 8002890:	4288      	cmp	r0, r1
 8002892:	b510      	push	{r4, lr}
 8002894:	eb01 0402 	add.w	r4, r1, r2
 8002898:	d902      	bls.n	80028a0 <memmove+0x10>
 800289a:	4284      	cmp	r4, r0
 800289c:	4623      	mov	r3, r4
 800289e:	d807      	bhi.n	80028b0 <memmove+0x20>
 80028a0:	1e43      	subs	r3, r0, #1
 80028a2:	42a1      	cmp	r1, r4
 80028a4:	d008      	beq.n	80028b8 <memmove+0x28>
 80028a6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80028aa:	f803 2f01 	strb.w	r2, [r3, #1]!
 80028ae:	e7f8      	b.n	80028a2 <memmove+0x12>
 80028b0:	4402      	add	r2, r0
 80028b2:	4601      	mov	r1, r0
 80028b4:	428a      	cmp	r2, r1
 80028b6:	d100      	bne.n	80028ba <memmove+0x2a>
 80028b8:	bd10      	pop	{r4, pc}
 80028ba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80028be:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80028c2:	e7f7      	b.n	80028b4 <memmove+0x24>

080028c4 <_sbrk_r>:
 80028c4:	b538      	push	{r3, r4, r5, lr}
 80028c6:	4d06      	ldr	r5, [pc, #24]	; (80028e0 <_sbrk_r+0x1c>)
 80028c8:	2300      	movs	r3, #0
 80028ca:	4604      	mov	r4, r0
 80028cc:	4608      	mov	r0, r1
 80028ce:	602b      	str	r3, [r5, #0]
 80028d0:	f7fd ffbc 	bl	800084c <_sbrk>
 80028d4:	1c43      	adds	r3, r0, #1
 80028d6:	d102      	bne.n	80028de <_sbrk_r+0x1a>
 80028d8:	682b      	ldr	r3, [r5, #0]
 80028da:	b103      	cbz	r3, 80028de <_sbrk_r+0x1a>
 80028dc:	6023      	str	r3, [r4, #0]
 80028de:	bd38      	pop	{r3, r4, r5, pc}
 80028e0:	20000234 	.word	0x20000234

080028e4 <memcpy>:
 80028e4:	440a      	add	r2, r1
 80028e6:	4291      	cmp	r1, r2
 80028e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80028ec:	d100      	bne.n	80028f0 <memcpy+0xc>
 80028ee:	4770      	bx	lr
 80028f0:	b510      	push	{r4, lr}
 80028f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80028f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80028fa:	4291      	cmp	r1, r2
 80028fc:	d1f9      	bne.n	80028f2 <memcpy+0xe>
 80028fe:	bd10      	pop	{r4, pc}

08002900 <_realloc_r>:
 8002900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002904:	4680      	mov	r8, r0
 8002906:	4614      	mov	r4, r2
 8002908:	460e      	mov	r6, r1
 800290a:	b921      	cbnz	r1, 8002916 <_realloc_r+0x16>
 800290c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002910:	4611      	mov	r1, r2
 8002912:	f7ff bc49 	b.w	80021a8 <_malloc_r>
 8002916:	b92a      	cbnz	r2, 8002924 <_realloc_r+0x24>
 8002918:	f7ff fbda 	bl	80020d0 <_free_r>
 800291c:	4625      	mov	r5, r4
 800291e:	4628      	mov	r0, r5
 8002920:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002924:	f000 f81b 	bl	800295e <_malloc_usable_size_r>
 8002928:	4284      	cmp	r4, r0
 800292a:	4607      	mov	r7, r0
 800292c:	d802      	bhi.n	8002934 <_realloc_r+0x34>
 800292e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002932:	d812      	bhi.n	800295a <_realloc_r+0x5a>
 8002934:	4621      	mov	r1, r4
 8002936:	4640      	mov	r0, r8
 8002938:	f7ff fc36 	bl	80021a8 <_malloc_r>
 800293c:	4605      	mov	r5, r0
 800293e:	2800      	cmp	r0, #0
 8002940:	d0ed      	beq.n	800291e <_realloc_r+0x1e>
 8002942:	42bc      	cmp	r4, r7
 8002944:	4622      	mov	r2, r4
 8002946:	4631      	mov	r1, r6
 8002948:	bf28      	it	cs
 800294a:	463a      	movcs	r2, r7
 800294c:	f7ff ffca 	bl	80028e4 <memcpy>
 8002950:	4631      	mov	r1, r6
 8002952:	4640      	mov	r0, r8
 8002954:	f7ff fbbc 	bl	80020d0 <_free_r>
 8002958:	e7e1      	b.n	800291e <_realloc_r+0x1e>
 800295a:	4635      	mov	r5, r6
 800295c:	e7df      	b.n	800291e <_realloc_r+0x1e>

0800295e <_malloc_usable_size_r>:
 800295e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002962:	1f18      	subs	r0, r3, #4
 8002964:	2b00      	cmp	r3, #0
 8002966:	bfbc      	itt	lt
 8002968:	580b      	ldrlt	r3, [r1, r0]
 800296a:	18c0      	addlt	r0, r0, r3
 800296c:	4770      	bx	lr
	...

08002970 <_init>:
 8002970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002972:	bf00      	nop
 8002974:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002976:	bc08      	pop	{r3}
 8002978:	469e      	mov	lr, r3
 800297a:	4770      	bx	lr

0800297c <_fini>:
 800297c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800297e:	bf00      	nop
 8002980:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002982:	bc08      	pop	{r3}
 8002984:	469e      	mov	lr, r3
 8002986:	4770      	bx	lr
