
009_6_HAL_USART_BLUETOOTH.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a30  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08002bc0  08002bc0  00012bc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c2c  08002c2c  0002005c  2**0
                  CONTENTS
  4 .ARM          00000008  08002c2c  08002c2c  00012c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002c34  08002c34  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c34  08002c34  00012c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c38  08002c38  00012c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  08002c3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002005c  2**0
                  CONTENTS
 10 .bss          0000021c  2000005c  2000005c  0002005c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000278  20000278  0002005c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007213  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000133f  00000000  00000000  000272e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000638  00000000  00000000  00028628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000004bb  00000000  00000000  00028c60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001ffe8  00000000  00000000  0002911b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000811d  00000000  00000000  00049103  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000c2792  00000000  00000000  00051220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001d5c  00000000  00000000  001139b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000075  00000000  00000000  00115710  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000005c 	.word	0x2000005c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002ba8 	.word	0x08002ba8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000060 	.word	0x20000060
 80001cc:	08002ba8 	.word	0x08002ba8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b970 	b.w	8000568 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9e08      	ldr	r6, [sp, #32]
 80002a6:	460d      	mov	r5, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	460f      	mov	r7, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4694      	mov	ip, r2
 80002b4:	d965      	bls.n	8000382 <__udivmoddi4+0xe2>
 80002b6:	fab2 f382 	clz	r3, r2
 80002ba:	b143      	cbz	r3, 80002ce <__udivmoddi4+0x2e>
 80002bc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002c0:	f1c3 0220 	rsb	r2, r3, #32
 80002c4:	409f      	lsls	r7, r3
 80002c6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ca:	4317      	orrs	r7, r2
 80002cc:	409c      	lsls	r4, r3
 80002ce:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002d2:	fa1f f58c 	uxth.w	r5, ip
 80002d6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002da:	0c22      	lsrs	r2, r4, #16
 80002dc:	fb0e 7711 	mls	r7, lr, r1, r7
 80002e0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002e4:	fb01 f005 	mul.w	r0, r1, r5
 80002e8:	4290      	cmp	r0, r2
 80002ea:	d90a      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ec:	eb1c 0202 	adds.w	r2, ip, r2
 80002f0:	f101 37ff 	add.w	r7, r1, #4294967295
 80002f4:	f080 811c 	bcs.w	8000530 <__udivmoddi4+0x290>
 80002f8:	4290      	cmp	r0, r2
 80002fa:	f240 8119 	bls.w	8000530 <__udivmoddi4+0x290>
 80002fe:	3902      	subs	r1, #2
 8000300:	4462      	add	r2, ip
 8000302:	1a12      	subs	r2, r2, r0
 8000304:	b2a4      	uxth	r4, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000312:	fb00 f505 	mul.w	r5, r0, r5
 8000316:	42a5      	cmp	r5, r4
 8000318:	d90a      	bls.n	8000330 <__udivmoddi4+0x90>
 800031a:	eb1c 0404 	adds.w	r4, ip, r4
 800031e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000322:	f080 8107 	bcs.w	8000534 <__udivmoddi4+0x294>
 8000326:	42a5      	cmp	r5, r4
 8000328:	f240 8104 	bls.w	8000534 <__udivmoddi4+0x294>
 800032c:	4464      	add	r4, ip
 800032e:	3802      	subs	r0, #2
 8000330:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000334:	1b64      	subs	r4, r4, r5
 8000336:	2100      	movs	r1, #0
 8000338:	b11e      	cbz	r6, 8000342 <__udivmoddi4+0xa2>
 800033a:	40dc      	lsrs	r4, r3
 800033c:	2300      	movs	r3, #0
 800033e:	e9c6 4300 	strd	r4, r3, [r6]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d908      	bls.n	800035c <__udivmoddi4+0xbc>
 800034a:	2e00      	cmp	r6, #0
 800034c:	f000 80ed 	beq.w	800052a <__udivmoddi4+0x28a>
 8000350:	2100      	movs	r1, #0
 8000352:	e9c6 0500 	strd	r0, r5, [r6]
 8000356:	4608      	mov	r0, r1
 8000358:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035c:	fab3 f183 	clz	r1, r3
 8000360:	2900      	cmp	r1, #0
 8000362:	d149      	bne.n	80003f8 <__udivmoddi4+0x158>
 8000364:	42ab      	cmp	r3, r5
 8000366:	d302      	bcc.n	800036e <__udivmoddi4+0xce>
 8000368:	4282      	cmp	r2, r0
 800036a:	f200 80f8 	bhi.w	800055e <__udivmoddi4+0x2be>
 800036e:	1a84      	subs	r4, r0, r2
 8000370:	eb65 0203 	sbc.w	r2, r5, r3
 8000374:	2001      	movs	r0, #1
 8000376:	4617      	mov	r7, r2
 8000378:	2e00      	cmp	r6, #0
 800037a:	d0e2      	beq.n	8000342 <__udivmoddi4+0xa2>
 800037c:	e9c6 4700 	strd	r4, r7, [r6]
 8000380:	e7df      	b.n	8000342 <__udivmoddi4+0xa2>
 8000382:	b902      	cbnz	r2, 8000386 <__udivmoddi4+0xe6>
 8000384:	deff      	udf	#255	; 0xff
 8000386:	fab2 f382 	clz	r3, r2
 800038a:	2b00      	cmp	r3, #0
 800038c:	f040 8090 	bne.w	80004b0 <__udivmoddi4+0x210>
 8000390:	1a8a      	subs	r2, r1, r2
 8000392:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	2101      	movs	r1, #1
 800039c:	fbb2 f5f7 	udiv	r5, r2, r7
 80003a0:	fb07 2015 	mls	r0, r7, r5, r2
 80003a4:	0c22      	lsrs	r2, r4, #16
 80003a6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003aa:	fb0e f005 	mul.w	r0, lr, r5
 80003ae:	4290      	cmp	r0, r2
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0x124>
 80003b2:	eb1c 0202 	adds.w	r2, ip, r2
 80003b6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ba:	d202      	bcs.n	80003c2 <__udivmoddi4+0x122>
 80003bc:	4290      	cmp	r0, r2
 80003be:	f200 80cb 	bhi.w	8000558 <__udivmoddi4+0x2b8>
 80003c2:	4645      	mov	r5, r8
 80003c4:	1a12      	subs	r2, r2, r0
 80003c6:	b2a4      	uxth	r4, r4
 80003c8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003cc:	fb07 2210 	mls	r2, r7, r0, r2
 80003d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003d4:	fb0e fe00 	mul.w	lr, lr, r0
 80003d8:	45a6      	cmp	lr, r4
 80003da:	d908      	bls.n	80003ee <__udivmoddi4+0x14e>
 80003dc:	eb1c 0404 	adds.w	r4, ip, r4
 80003e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003e4:	d202      	bcs.n	80003ec <__udivmoddi4+0x14c>
 80003e6:	45a6      	cmp	lr, r4
 80003e8:	f200 80bb 	bhi.w	8000562 <__udivmoddi4+0x2c2>
 80003ec:	4610      	mov	r0, r2
 80003ee:	eba4 040e 	sub.w	r4, r4, lr
 80003f2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80003f6:	e79f      	b.n	8000338 <__udivmoddi4+0x98>
 80003f8:	f1c1 0720 	rsb	r7, r1, #32
 80003fc:	408b      	lsls	r3, r1
 80003fe:	fa22 fc07 	lsr.w	ip, r2, r7
 8000402:	ea4c 0c03 	orr.w	ip, ip, r3
 8000406:	fa05 f401 	lsl.w	r4, r5, r1
 800040a:	fa20 f307 	lsr.w	r3, r0, r7
 800040e:	40fd      	lsrs	r5, r7
 8000410:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000414:	4323      	orrs	r3, r4
 8000416:	fbb5 f8f9 	udiv	r8, r5, r9
 800041a:	fa1f fe8c 	uxth.w	lr, ip
 800041e:	fb09 5518 	mls	r5, r9, r8, r5
 8000422:	0c1c      	lsrs	r4, r3, #16
 8000424:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000428:	fb08 f50e 	mul.w	r5, r8, lr
 800042c:	42a5      	cmp	r5, r4
 800042e:	fa02 f201 	lsl.w	r2, r2, r1
 8000432:	fa00 f001 	lsl.w	r0, r0, r1
 8000436:	d90b      	bls.n	8000450 <__udivmoddi4+0x1b0>
 8000438:	eb1c 0404 	adds.w	r4, ip, r4
 800043c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000440:	f080 8088 	bcs.w	8000554 <__udivmoddi4+0x2b4>
 8000444:	42a5      	cmp	r5, r4
 8000446:	f240 8085 	bls.w	8000554 <__udivmoddi4+0x2b4>
 800044a:	f1a8 0802 	sub.w	r8, r8, #2
 800044e:	4464      	add	r4, ip
 8000450:	1b64      	subs	r4, r4, r5
 8000452:	b29d      	uxth	r5, r3
 8000454:	fbb4 f3f9 	udiv	r3, r4, r9
 8000458:	fb09 4413 	mls	r4, r9, r3, r4
 800045c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000460:	fb03 fe0e 	mul.w	lr, r3, lr
 8000464:	45a6      	cmp	lr, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x1da>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000470:	d26c      	bcs.n	800054c <__udivmoddi4+0x2ac>
 8000472:	45a6      	cmp	lr, r4
 8000474:	d96a      	bls.n	800054c <__udivmoddi4+0x2ac>
 8000476:	3b02      	subs	r3, #2
 8000478:	4464      	add	r4, ip
 800047a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800047e:	fba3 9502 	umull	r9, r5, r3, r2
 8000482:	eba4 040e 	sub.w	r4, r4, lr
 8000486:	42ac      	cmp	r4, r5
 8000488:	46c8      	mov	r8, r9
 800048a:	46ae      	mov	lr, r5
 800048c:	d356      	bcc.n	800053c <__udivmoddi4+0x29c>
 800048e:	d053      	beq.n	8000538 <__udivmoddi4+0x298>
 8000490:	b156      	cbz	r6, 80004a8 <__udivmoddi4+0x208>
 8000492:	ebb0 0208 	subs.w	r2, r0, r8
 8000496:	eb64 040e 	sbc.w	r4, r4, lr
 800049a:	fa04 f707 	lsl.w	r7, r4, r7
 800049e:	40ca      	lsrs	r2, r1
 80004a0:	40cc      	lsrs	r4, r1
 80004a2:	4317      	orrs	r7, r2
 80004a4:	e9c6 7400 	strd	r7, r4, [r6]
 80004a8:	4618      	mov	r0, r3
 80004aa:	2100      	movs	r1, #0
 80004ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b0:	f1c3 0120 	rsb	r1, r3, #32
 80004b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004b8:	fa20 f201 	lsr.w	r2, r0, r1
 80004bc:	fa25 f101 	lsr.w	r1, r5, r1
 80004c0:	409d      	lsls	r5, r3
 80004c2:	432a      	orrs	r2, r5
 80004c4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c8:	fa1f fe8c 	uxth.w	lr, ip
 80004cc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004d0:	fb07 1510 	mls	r5, r7, r0, r1
 80004d4:	0c11      	lsrs	r1, r2, #16
 80004d6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004da:	fb00 f50e 	mul.w	r5, r0, lr
 80004de:	428d      	cmp	r5, r1
 80004e0:	fa04 f403 	lsl.w	r4, r4, r3
 80004e4:	d908      	bls.n	80004f8 <__udivmoddi4+0x258>
 80004e6:	eb1c 0101 	adds.w	r1, ip, r1
 80004ea:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ee:	d22f      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 80004f0:	428d      	cmp	r5, r1
 80004f2:	d92d      	bls.n	8000550 <__udivmoddi4+0x2b0>
 80004f4:	3802      	subs	r0, #2
 80004f6:	4461      	add	r1, ip
 80004f8:	1b49      	subs	r1, r1, r5
 80004fa:	b292      	uxth	r2, r2
 80004fc:	fbb1 f5f7 	udiv	r5, r1, r7
 8000500:	fb07 1115 	mls	r1, r7, r5, r1
 8000504:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000508:	fb05 f10e 	mul.w	r1, r5, lr
 800050c:	4291      	cmp	r1, r2
 800050e:	d908      	bls.n	8000522 <__udivmoddi4+0x282>
 8000510:	eb1c 0202 	adds.w	r2, ip, r2
 8000514:	f105 38ff 	add.w	r8, r5, #4294967295
 8000518:	d216      	bcs.n	8000548 <__udivmoddi4+0x2a8>
 800051a:	4291      	cmp	r1, r2
 800051c:	d914      	bls.n	8000548 <__udivmoddi4+0x2a8>
 800051e:	3d02      	subs	r5, #2
 8000520:	4462      	add	r2, ip
 8000522:	1a52      	subs	r2, r2, r1
 8000524:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000528:	e738      	b.n	800039c <__udivmoddi4+0xfc>
 800052a:	4631      	mov	r1, r6
 800052c:	4630      	mov	r0, r6
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xa2>
 8000530:	4639      	mov	r1, r7
 8000532:	e6e6      	b.n	8000302 <__udivmoddi4+0x62>
 8000534:	4610      	mov	r0, r2
 8000536:	e6fb      	b.n	8000330 <__udivmoddi4+0x90>
 8000538:	4548      	cmp	r0, r9
 800053a:	d2a9      	bcs.n	8000490 <__udivmoddi4+0x1f0>
 800053c:	ebb9 0802 	subs.w	r8, r9, r2
 8000540:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000544:	3b01      	subs	r3, #1
 8000546:	e7a3      	b.n	8000490 <__udivmoddi4+0x1f0>
 8000548:	4645      	mov	r5, r8
 800054a:	e7ea      	b.n	8000522 <__udivmoddi4+0x282>
 800054c:	462b      	mov	r3, r5
 800054e:	e794      	b.n	800047a <__udivmoddi4+0x1da>
 8000550:	4640      	mov	r0, r8
 8000552:	e7d1      	b.n	80004f8 <__udivmoddi4+0x258>
 8000554:	46d0      	mov	r8, sl
 8000556:	e77b      	b.n	8000450 <__udivmoddi4+0x1b0>
 8000558:	3d02      	subs	r5, #2
 800055a:	4462      	add	r2, ip
 800055c:	e732      	b.n	80003c4 <__udivmoddi4+0x124>
 800055e:	4608      	mov	r0, r1
 8000560:	e70a      	b.n	8000378 <__udivmoddi4+0xd8>
 8000562:	4464      	add	r4, ip
 8000564:	3802      	subs	r0, #2
 8000566:	e742      	b.n	80003ee <__udivmoddi4+0x14e>

08000568 <__aeabi_idiv0>:
 8000568:	4770      	bx	lr
 800056a:	bf00      	nop

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fa6e 	bl	8000a50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f882 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f000 f914 	bl	80007a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800057c:	f000 f8e8 	bl	8000750 <MX_USART2_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 100);
 8000580:	2364      	movs	r3, #100	; 0x64
 8000582:	2232      	movs	r2, #50	; 0x32
 8000584:	4936      	ldr	r1, [pc, #216]	; (8000660 <main+0xf4>)
 8000586:	4837      	ldr	r0, [pc, #220]	; (8000664 <main+0xf8>)
 8000588:	f001 faa3 	bl	8001ad2 <HAL_UART_Receive>

	  if(	rx_buffer[0] == 'l' &&
 800058c:	4b34      	ldr	r3, [pc, #208]	; (8000660 <main+0xf4>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	2b6c      	cmp	r3, #108	; 0x6c
 8000592:	d12f      	bne.n	80005f4 <main+0x88>
			rx_buffer[1] == 'e' &&
 8000594:	4b32      	ldr	r3, [pc, #200]	; (8000660 <main+0xf4>)
 8000596:	785b      	ldrb	r3, [r3, #1]
	  if(	rx_buffer[0] == 'l' &&
 8000598:	2b65      	cmp	r3, #101	; 0x65
 800059a:	d12b      	bne.n	80005f4 <main+0x88>
			rx_buffer[2] == 'd' &&
 800059c:	4b30      	ldr	r3, [pc, #192]	; (8000660 <main+0xf4>)
 800059e:	789b      	ldrb	r3, [r3, #2]
			rx_buffer[1] == 'e' &&
 80005a0:	2b64      	cmp	r3, #100	; 0x64
 80005a2:	d127      	bne.n	80005f4 <main+0x88>
			rx_buffer[3] == ' ' &&
 80005a4:	4b2e      	ldr	r3, [pc, #184]	; (8000660 <main+0xf4>)
 80005a6:	78db      	ldrb	r3, [r3, #3]
			rx_buffer[2] == 'd' &&
 80005a8:	2b20      	cmp	r3, #32
 80005aa:	d123      	bne.n	80005f4 <main+0x88>
			rx_buffer[4] == 'o' &&
 80005ac:	4b2c      	ldr	r3, [pc, #176]	; (8000660 <main+0xf4>)
 80005ae:	791b      	ldrb	r3, [r3, #4]
			rx_buffer[3] == ' ' &&
 80005b0:	2b6f      	cmp	r3, #111	; 0x6f
 80005b2:	d11f      	bne.n	80005f4 <main+0x88>
			rx_buffer[5] == 'n'
 80005b4:	4b2a      	ldr	r3, [pc, #168]	; (8000660 <main+0xf4>)
 80005b6:	795b      	ldrb	r3, [r3, #5]
			rx_buffer[4] == 'o' &&
 80005b8:	2b6e      	cmp	r3, #110	; 0x6e
 80005ba:	d11b      	bne.n	80005f4 <main+0x88>
	  )
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_SET);
 80005bc:	2201      	movs	r2, #1
 80005be:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80005c2:	4829      	ldr	r0, [pc, #164]	; (8000668 <main+0xfc>)
 80005c4:	f000 fd38 	bl	8001038 <HAL_GPIO_WritePin>
		  if(led_state != true)
 80005c8:	4b28      	ldr	r3, [pc, #160]	; (800066c <main+0x100>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	f083 0301 	eor.w	r3, r3, #1
 80005d0:	b2db      	uxtb	r3, r3
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d042      	beq.n	800065c <main+0xf0>
		  {
			  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"Ledler yandi.\n"), 100);
 80005d6:	4926      	ldr	r1, [pc, #152]	; (8000670 <main+0x104>)
 80005d8:	4826      	ldr	r0, [pc, #152]	; (8000674 <main+0x108>)
 80005da:	f001 fe41 	bl	8002260 <siprintf>
 80005de:	4603      	mov	r3, r0
 80005e0:	b29a      	uxth	r2, r3
 80005e2:	2364      	movs	r3, #100	; 0x64
 80005e4:	4923      	ldr	r1, [pc, #140]	; (8000674 <main+0x108>)
 80005e6:	481f      	ldr	r0, [pc, #124]	; (8000664 <main+0xf8>)
 80005e8:	f001 f9e8 	bl	80019bc <HAL_UART_Transmit>
			  led_state = true;
 80005ec:	4b1f      	ldr	r3, [pc, #124]	; (800066c <main+0x100>)
 80005ee:	2201      	movs	r2, #1
 80005f0:	701a      	strb	r2, [r3, #0]
		  if(led_state != true)
 80005f2:	e033      	b.n	800065c <main+0xf0>
		  }
	  }

	  else if(	rx_buffer[0] == 'l' &&
 80005f4:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <main+0xf4>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b6c      	cmp	r3, #108	; 0x6c
 80005fa:	d1c1      	bne.n	8000580 <main+0x14>
			  	rx_buffer[1] == 'e' &&
 80005fc:	4b18      	ldr	r3, [pc, #96]	; (8000660 <main+0xf4>)
 80005fe:	785b      	ldrb	r3, [r3, #1]
	  else if(	rx_buffer[0] == 'l' &&
 8000600:	2b65      	cmp	r3, #101	; 0x65
 8000602:	d1bd      	bne.n	8000580 <main+0x14>
				rx_buffer[2] == 'd' &&
 8000604:	4b16      	ldr	r3, [pc, #88]	; (8000660 <main+0xf4>)
 8000606:	789b      	ldrb	r3, [r3, #2]
			  	rx_buffer[1] == 'e' &&
 8000608:	2b64      	cmp	r3, #100	; 0x64
 800060a:	d1b9      	bne.n	8000580 <main+0x14>
				rx_buffer[3] == ' ' &&
 800060c:	4b14      	ldr	r3, [pc, #80]	; (8000660 <main+0xf4>)
 800060e:	78db      	ldrb	r3, [r3, #3]
				rx_buffer[2] == 'd' &&
 8000610:	2b20      	cmp	r3, #32
 8000612:	d1b5      	bne.n	8000580 <main+0x14>
				rx_buffer[4] == 'o' &&
 8000614:	4b12      	ldr	r3, [pc, #72]	; (8000660 <main+0xf4>)
 8000616:	791b      	ldrb	r3, [r3, #4]
				rx_buffer[3] == ' ' &&
 8000618:	2b6f      	cmp	r3, #111	; 0x6f
 800061a:	d1b1      	bne.n	8000580 <main+0x14>
				rx_buffer[5] == 'f'	&&
 800061c:	4b10      	ldr	r3, [pc, #64]	; (8000660 <main+0xf4>)
 800061e:	795b      	ldrb	r3, [r3, #5]
				rx_buffer[4] == 'o' &&
 8000620:	2b66      	cmp	r3, #102	; 0x66
 8000622:	d1ad      	bne.n	8000580 <main+0x14>
				rx_buffer[6] == 'f'
 8000624:	4b0e      	ldr	r3, [pc, #56]	; (8000660 <main+0xf4>)
 8000626:	799b      	ldrb	r3, [r3, #6]
				rx_buffer[5] == 'f'	&&
 8000628:	2b66      	cmp	r3, #102	; 0x66
 800062a:	d1a9      	bne.n	8000580 <main+0x14>
	  )
	  {
		  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15, GPIO_PIN_RESET);
 800062c:	2200      	movs	r2, #0
 800062e:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8000632:	480d      	ldr	r0, [pc, #52]	; (8000668 <main+0xfc>)
 8000634:	f000 fd00 	bl	8001038 <HAL_GPIO_WritePin>
		  if(led_state != false)
 8000638:	4b0c      	ldr	r3, [pc, #48]	; (800066c <main+0x100>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d09f      	beq.n	8000580 <main+0x14>
		  {
			  HAL_UART_Transmit(&huart2, (uint8_t*)tx_buffer, sprintf(tx_buffer,"Ledler sondu.\n"), 100);
 8000640:	490d      	ldr	r1, [pc, #52]	; (8000678 <main+0x10c>)
 8000642:	480c      	ldr	r0, [pc, #48]	; (8000674 <main+0x108>)
 8000644:	f001 fe0c 	bl	8002260 <siprintf>
 8000648:	4603      	mov	r3, r0
 800064a:	b29a      	uxth	r2, r3
 800064c:	2364      	movs	r3, #100	; 0x64
 800064e:	4909      	ldr	r1, [pc, #36]	; (8000674 <main+0x108>)
 8000650:	4804      	ldr	r0, [pc, #16]	; (8000664 <main+0xf8>)
 8000652:	f001 f9b3 	bl	80019bc <HAL_UART_Transmit>
			  led_state = false;
 8000656:	4b05      	ldr	r3, [pc, #20]	; (800066c <main+0x100>)
 8000658:	2200      	movs	r2, #0
 800065a:	701a      	strb	r2, [r3, #0]
	  HAL_UART_Receive(&huart2, (uint8_t*)rx_buffer, 50, 100);
 800065c:	e790      	b.n	8000580 <main+0x14>
 800065e:	bf00      	nop
 8000660:	200000c0 	.word	0x200000c0
 8000664:	20000078 	.word	0x20000078
 8000668:	40020c00 	.word	0x40020c00
 800066c:	20000126 	.word	0x20000126
 8000670:	08002bc0 	.word	0x08002bc0
 8000674:	200000f4 	.word	0x200000f4
 8000678:	08002bd0 	.word	0x08002bd0

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	; 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	; 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f001 fe08 	bl	80022a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b28      	ldr	r3, [pc, #160]	; (8000748 <SystemClock_Config+0xcc>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a8:	4a27      	ldr	r2, [pc, #156]	; (8000748 <SystemClock_Config+0xcc>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	; 0x40
 80006b0:	4b25      	ldr	r3, [pc, #148]	; (8000748 <SystemClock_Config+0xcc>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b22      	ldr	r3, [pc, #136]	; (800074c <SystemClock_Config+0xd0>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a21      	ldr	r2, [pc, #132]	; (800074c <SystemClock_Config+0xd0>)
 80006c6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b1f      	ldr	r3, [pc, #124]	; (800074c <SystemClock_Config+0xd0>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80006f0:	23a8      	movs	r3, #168	; 0xa8
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f8:	2304      	movs	r3, #4
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f000 fcb3 	bl	800106c <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 f88e 	bl	800082c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000710:	230f      	movs	r3, #15
 8000712:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000714:	2302      	movs	r3, #2
 8000716:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000718:	2300      	movs	r3, #0
 800071a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800071c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000720:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000722:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000726:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000728:	f107 030c 	add.w	r3, r7, #12
 800072c:	2105      	movs	r1, #5
 800072e:	4618      	mov	r0, r3
 8000730:	f000 ff14 	bl	800155c <HAL_RCC_ClockConfig>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800073a:	f000 f877 	bl	800082c <Error_Handler>
  }
}
 800073e:	bf00      	nop
 8000740:	3750      	adds	r7, #80	; 0x50
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800
 800074c:	40007000 	.word	0x40007000

08000750 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000754:	4b11      	ldr	r3, [pc, #68]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000756:	4a12      	ldr	r2, [pc, #72]	; (80007a0 <MX_USART2_UART_Init+0x50>)
 8000758:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 800075a:	4b10      	ldr	r3, [pc, #64]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800075c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000760:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000762:	4b0e      	ldr	r3, [pc, #56]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000764:	2200      	movs	r2, #0
 8000766:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000768:	4b0c      	ldr	r3, [pc, #48]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800076a:	2200      	movs	r2, #0
 800076c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800076e:	4b0b      	ldr	r3, [pc, #44]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000770:	2200      	movs	r2, #0
 8000772:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000774:	4b09      	ldr	r3, [pc, #36]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000776:	220c      	movs	r2, #12
 8000778:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800077a:	4b08      	ldr	r3, [pc, #32]	; (800079c <MX_USART2_UART_Init+0x4c>)
 800077c:	2200      	movs	r2, #0
 800077e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000780:	4b06      	ldr	r3, [pc, #24]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000782:	2200      	movs	r2, #0
 8000784:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000786:	4805      	ldr	r0, [pc, #20]	; (800079c <MX_USART2_UART_Init+0x4c>)
 8000788:	f001 f8c8 	bl	800191c <HAL_UART_Init>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000792:	f000 f84b 	bl	800082c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000796:	bf00      	nop
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	20000078 	.word	0x20000078
 80007a0:	40004400 	.word	0x40004400

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b088      	sub	sp, #32
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 030c 	add.w	r3, r7, #12
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <MX_GPIO_Init+0x80>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a18      	ldr	r2, [pc, #96]	; (8000824 <MX_GPIO_Init+0x80>)
 80007c4:	f043 0301 	orr.w	r3, r3, #1
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b16      	ldr	r3, [pc, #88]	; (8000824 <MX_GPIO_Init+0x80>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0301 	and.w	r3, r3, #1
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <MX_GPIO_Init+0x80>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <MX_GPIO_Init+0x80>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <MX_GPIO_Init+0x80>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80007f2:	2200      	movs	r2, #0
 80007f4:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80007f8:	480b      	ldr	r0, [pc, #44]	; (8000828 <MX_GPIO_Init+0x84>)
 80007fa:	f000 fc1d 	bl	8001038 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80007fe:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000802:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000810:	f107 030c 	add.w	r3, r7, #12
 8000814:	4619      	mov	r1, r3
 8000816:	4804      	ldr	r0, [pc, #16]	; (8000828 <MX_GPIO_Init+0x84>)
 8000818:	f000 fa72 	bl	8000d00 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800081c:	bf00      	nop
 800081e:	3720      	adds	r7, #32
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	40023800 	.word	0x40023800
 8000828:	40020c00 	.word	0x40020c00

0800082c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800082c:	b480      	push	{r7}
 800082e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000830:	b672      	cpsid	i
}
 8000832:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000834:	e7fe      	b.n	8000834 <Error_Handler+0x8>
	...

08000838 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_MspInit+0x4c>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000846:	4a0f      	ldr	r2, [pc, #60]	; (8000884 <HAL_MspInit+0x4c>)
 8000848:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800084c:	6453      	str	r3, [r2, #68]	; 0x44
 800084e:	4b0d      	ldr	r3, [pc, #52]	; (8000884 <HAL_MspInit+0x4c>)
 8000850:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800085a:	2300      	movs	r3, #0
 800085c:	603b      	str	r3, [r7, #0]
 800085e:	4b09      	ldr	r3, [pc, #36]	; (8000884 <HAL_MspInit+0x4c>)
 8000860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000862:	4a08      	ldr	r2, [pc, #32]	; (8000884 <HAL_MspInit+0x4c>)
 8000864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000868:	6413      	str	r3, [r2, #64]	; 0x40
 800086a:	4b06      	ldr	r3, [pc, #24]	; (8000884 <HAL_MspInit+0x4c>)
 800086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000872:	603b      	str	r3, [r7, #0]
 8000874:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000876:	bf00      	nop
 8000878:	370c      	adds	r7, #12
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40023800 	.word	0x40023800

08000888 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08a      	sub	sp, #40	; 0x28
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	f107 0314 	add.w	r3, r7, #20
 8000894:	2200      	movs	r2, #0
 8000896:	601a      	str	r2, [r3, #0]
 8000898:	605a      	str	r2, [r3, #4]
 800089a:	609a      	str	r2, [r3, #8]
 800089c:	60da      	str	r2, [r3, #12]
 800089e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	4a19      	ldr	r2, [pc, #100]	; (800090c <HAL_UART_MspInit+0x84>)
 80008a6:	4293      	cmp	r3, r2
 80008a8:	d12b      	bne.n	8000902 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	613b      	str	r3, [r7, #16]
 80008ae:	4b18      	ldr	r3, [pc, #96]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008b2:	4a17      	ldr	r2, [pc, #92]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008b8:	6413      	str	r3, [r2, #64]	; 0x40
 80008ba:	4b15      	ldr	r3, [pc, #84]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008c2:	613b      	str	r3, [r7, #16]
 80008c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	4b11      	ldr	r3, [pc, #68]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b0e      	ldr	r3, [pc, #56]	; (8000910 <HAL_UART_MspInit+0x88>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60fb      	str	r3, [r7, #12]
 80008e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80008e2:	230c      	movs	r3, #12
 80008e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ee:	2303      	movs	r3, #3
 80008f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008f2:	2307      	movs	r3, #7
 80008f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4805      	ldr	r0, [pc, #20]	; (8000914 <HAL_UART_MspInit+0x8c>)
 80008fe:	f000 f9ff 	bl	8000d00 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3728      	adds	r7, #40	; 0x28
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40004400 	.word	0x40004400
 8000910:	40023800 	.word	0x40023800
 8000914:	40020000 	.word	0x40020000

08000918 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800091c:	e7fe      	b.n	800091c <NMI_Handler+0x4>

0800091e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800091e:	b480      	push	{r7}
 8000920:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000922:	e7fe      	b.n	8000922 <HardFault_Handler+0x4>

08000924 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000924:	b480      	push	{r7}
 8000926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000928:	e7fe      	b.n	8000928 <MemManage_Handler+0x4>

0800092a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800092a:	b480      	push	{r7}
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800092e:	e7fe      	b.n	800092e <BusFault_Handler+0x4>

08000930 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000934:	e7fe      	b.n	8000934 <UsageFault_Handler+0x4>

08000936 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000936:	b480      	push	{r7}
 8000938:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr

08000944 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000944:	b480      	push	{r7}
 8000946:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000948:	bf00      	nop
 800094a:	46bd      	mov	sp, r7
 800094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000950:	4770      	bx	lr

08000952 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000952:	b480      	push	{r7}
 8000954:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	46bd      	mov	sp, r7
 800095a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095e:	4770      	bx	lr

08000960 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000964:	f000 f8c6 	bl	8000af4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000968:	bf00      	nop
 800096a:	bd80      	pop	{r7, pc}

0800096c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	b086      	sub	sp, #24
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000974:	4a14      	ldr	r2, [pc, #80]	; (80009c8 <_sbrk+0x5c>)
 8000976:	4b15      	ldr	r3, [pc, #84]	; (80009cc <_sbrk+0x60>)
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800097c:	697b      	ldr	r3, [r7, #20]
 800097e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000980:	4b13      	ldr	r3, [pc, #76]	; (80009d0 <_sbrk+0x64>)
 8000982:	681b      	ldr	r3, [r3, #0]
 8000984:	2b00      	cmp	r3, #0
 8000986:	d102      	bne.n	800098e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000988:	4b11      	ldr	r3, [pc, #68]	; (80009d0 <_sbrk+0x64>)
 800098a:	4a12      	ldr	r2, [pc, #72]	; (80009d4 <_sbrk+0x68>)
 800098c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800098e:	4b10      	ldr	r3, [pc, #64]	; (80009d0 <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	693a      	ldr	r2, [r7, #16]
 8000998:	429a      	cmp	r2, r3
 800099a:	d207      	bcs.n	80009ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800099c:	f001 fc88 	bl	80022b0 <__errno>
 80009a0:	4603      	mov	r3, r0
 80009a2:	220c      	movs	r2, #12
 80009a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80009a6:	f04f 33ff 	mov.w	r3, #4294967295
 80009aa:	e009      	b.n	80009c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <_sbrk+0x64>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <_sbrk+0x64>)
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4413      	add	r3, r2
 80009ba:	4a05      	ldr	r2, [pc, #20]	; (80009d0 <_sbrk+0x64>)
 80009bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80009be:	68fb      	ldr	r3, [r7, #12]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3718      	adds	r7, #24
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20020000 	.word	0x20020000
 80009cc:	00000400 	.word	0x00000400
 80009d0:	20000128 	.word	0x20000128
 80009d4:	20000278 	.word	0x20000278

080009d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009dc:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <SystemInit+0x20>)
 80009de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009e2:	4a05      	ldr	r2, [pc, #20]	; (80009f8 <SystemInit+0x20>)
 80009e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	e000ed00 	.word	0xe000ed00

080009fc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000a00:	f7ff ffea 	bl	80009d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a04:	480c      	ldr	r0, [pc, #48]	; (8000a38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000a06:	490d      	ldr	r1, [pc, #52]	; (8000a3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000a08:	4a0d      	ldr	r2, [pc, #52]	; (8000a40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a0c:	e002      	b.n	8000a14 <LoopCopyDataInit>

08000a0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a12:	3304      	adds	r3, #4

08000a14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a18:	d3f9      	bcc.n	8000a0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a1a:	4a0a      	ldr	r2, [pc, #40]	; (8000a44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000a1c:	4c0a      	ldr	r4, [pc, #40]	; (8000a48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000a1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a20:	e001      	b.n	8000a26 <LoopFillZerobss>

08000a22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a24:	3204      	adds	r2, #4

08000a26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a28:	d3fb      	bcc.n	8000a22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a2a:	f001 fc47 	bl	80022bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a2e:	f7ff fd9d 	bl	800056c <main>
  bx  lr    
 8000a32:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a34:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a3c:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8000a40:	08002c3c 	.word	0x08002c3c
  ldr r2, =_sbss
 8000a44:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000a48:	20000278 	.word	0x20000278

08000a4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a4c:	e7fe      	b.n	8000a4c <ADC_IRQHandler>
	...

08000a50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a54:	4b0e      	ldr	r3, [pc, #56]	; (8000a90 <HAL_Init+0x40>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <HAL_Init+0x40>)
 8000a5a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a5e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a60:	4b0b      	ldr	r3, [pc, #44]	; (8000a90 <HAL_Init+0x40>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a0a      	ldr	r2, [pc, #40]	; (8000a90 <HAL_Init+0x40>)
 8000a66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a6a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <HAL_Init+0x40>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a07      	ldr	r2, [pc, #28]	; (8000a90 <HAL_Init+0x40>)
 8000a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a76:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f90d 	bl	8000c98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f000 f808 	bl	8000a94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a84:	f7ff fed8 	bl	8000838 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a88:	2300      	movs	r3, #0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	40023c00 	.word	0x40023c00

08000a94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a9c:	4b12      	ldr	r3, [pc, #72]	; (8000ae8 <HAL_InitTick+0x54>)
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <HAL_InitTick+0x58>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8000aae:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	f000 f917 	bl	8000ce6 <HAL_SYSTICK_Config>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	e00e      	b.n	8000ae0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	2b0f      	cmp	r3, #15
 8000ac6:	d80a      	bhi.n	8000ade <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ac8:	2200      	movs	r2, #0
 8000aca:	6879      	ldr	r1, [r7, #4]
 8000acc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ad0:	f000 f8ed 	bl	8000cae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ad4:	4a06      	ldr	r2, [pc, #24]	; (8000af0 <HAL_InitTick+0x5c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ada:	2300      	movs	r3, #0
 8000adc:	e000      	b.n	8000ae0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	20000000 	.word	0x20000000
 8000aec:	20000008 	.word	0x20000008
 8000af0:	20000004 	.word	0x20000004

08000af4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000af4:	b480      	push	{r7}
 8000af6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000af8:	4b06      	ldr	r3, [pc, #24]	; (8000b14 <HAL_IncTick+0x20>)
 8000afa:	781b      	ldrb	r3, [r3, #0]
 8000afc:	461a      	mov	r2, r3
 8000afe:	4b06      	ldr	r3, [pc, #24]	; (8000b18 <HAL_IncTick+0x24>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	4413      	add	r3, r2
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_IncTick+0x24>)
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	20000008 	.word	0x20000008
 8000b18:	2000012c 	.word	0x2000012c

08000b1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b20:	4b03      	ldr	r3, [pc, #12]	; (8000b30 <HAL_GetTick+0x14>)
 8000b22:	681b      	ldr	r3, [r3, #0]
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	46bd      	mov	sp, r7
 8000b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2c:	4770      	bx	lr
 8000b2e:	bf00      	nop
 8000b30:	2000012c 	.word	0x2000012c

08000b34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b44:	4b0c      	ldr	r3, [pc, #48]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b46:	68db      	ldr	r3, [r3, #12]
 8000b48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b4a:	68ba      	ldr	r2, [r7, #8]
 8000b4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b50:	4013      	ands	r3, r2
 8000b52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b58:	68bb      	ldr	r3, [r7, #8]
 8000b5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b66:	4a04      	ldr	r2, [pc, #16]	; (8000b78 <__NVIC_SetPriorityGrouping+0x44>)
 8000b68:	68bb      	ldr	r3, [r7, #8]
 8000b6a:	60d3      	str	r3, [r2, #12]
}
 8000b6c:	bf00      	nop
 8000b6e:	3714      	adds	r7, #20
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr
 8000b78:	e000ed00 	.word	0xe000ed00

08000b7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b80:	4b04      	ldr	r3, [pc, #16]	; (8000b94 <__NVIC_GetPriorityGrouping+0x18>)
 8000b82:	68db      	ldr	r3, [r3, #12]
 8000b84:	0a1b      	lsrs	r3, r3, #8
 8000b86:	f003 0307 	and.w	r3, r3, #7
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b92:	4770      	bx	lr
 8000b94:	e000ed00 	.word	0xe000ed00

08000b98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	b083      	sub	sp, #12
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	6039      	str	r1, [r7, #0]
 8000ba2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ba4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	db0a      	blt.n	8000bc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bac:	683b      	ldr	r3, [r7, #0]
 8000bae:	b2da      	uxtb	r2, r3
 8000bb0:	490c      	ldr	r1, [pc, #48]	; (8000be4 <__NVIC_SetPriority+0x4c>)
 8000bb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb6:	0112      	lsls	r2, r2, #4
 8000bb8:	b2d2      	uxtb	r2, r2
 8000bba:	440b      	add	r3, r1
 8000bbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc0:	e00a      	b.n	8000bd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	b2da      	uxtb	r2, r3
 8000bc6:	4908      	ldr	r1, [pc, #32]	; (8000be8 <__NVIC_SetPriority+0x50>)
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	f003 030f 	and.w	r3, r3, #15
 8000bce:	3b04      	subs	r3, #4
 8000bd0:	0112      	lsls	r2, r2, #4
 8000bd2:	b2d2      	uxtb	r2, r2
 8000bd4:	440b      	add	r3, r1
 8000bd6:	761a      	strb	r2, [r3, #24]
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	e000e100 	.word	0xe000e100
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bec:	b480      	push	{r7}
 8000bee:	b089      	sub	sp, #36	; 0x24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	60f8      	str	r0, [r7, #12]
 8000bf4:	60b9      	str	r1, [r7, #8]
 8000bf6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c00:	69fb      	ldr	r3, [r7, #28]
 8000c02:	f1c3 0307 	rsb	r3, r3, #7
 8000c06:	2b04      	cmp	r3, #4
 8000c08:	bf28      	it	cs
 8000c0a:	2304      	movcs	r3, #4
 8000c0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c0e:	69fb      	ldr	r3, [r7, #28]
 8000c10:	3304      	adds	r3, #4
 8000c12:	2b06      	cmp	r3, #6
 8000c14:	d902      	bls.n	8000c1c <NVIC_EncodePriority+0x30>
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3b03      	subs	r3, #3
 8000c1a:	e000      	b.n	8000c1e <NVIC_EncodePriority+0x32>
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	69bb      	ldr	r3, [r7, #24]
 8000c26:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2a:	43da      	mvns	r2, r3
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	401a      	ands	r2, r3
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c34:	f04f 31ff 	mov.w	r1, #4294967295
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c3e:	43d9      	mvns	r1, r3
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c44:	4313      	orrs	r3, r2
         );
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	3724      	adds	r7, #36	; 0x24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
	...

08000c54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	3b01      	subs	r3, #1
 8000c60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c64:	d301      	bcc.n	8000c6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c66:	2301      	movs	r3, #1
 8000c68:	e00f      	b.n	8000c8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c6a:	4a0a      	ldr	r2, [pc, #40]	; (8000c94 <SysTick_Config+0x40>)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	3b01      	subs	r3, #1
 8000c70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c72:	210f      	movs	r1, #15
 8000c74:	f04f 30ff 	mov.w	r0, #4294967295
 8000c78:	f7ff ff8e 	bl	8000b98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c7c:	4b05      	ldr	r3, [pc, #20]	; (8000c94 <SysTick_Config+0x40>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c82:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <SysTick_Config+0x40>)
 8000c84:	2207      	movs	r2, #7
 8000c86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3708      	adds	r7, #8
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	e000e010 	.word	0xe000e010

08000c98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca0:	6878      	ldr	r0, [r7, #4]
 8000ca2:	f7ff ff47 	bl	8000b34 <__NVIC_SetPriorityGrouping>
}
 8000ca6:	bf00      	nop
 8000ca8:	3708      	adds	r7, #8
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}

08000cae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000cae:	b580      	push	{r7, lr}
 8000cb0:	b086      	sub	sp, #24
 8000cb2:	af00      	add	r7, sp, #0
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	60b9      	str	r1, [r7, #8]
 8000cb8:	607a      	str	r2, [r7, #4]
 8000cba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc0:	f7ff ff5c 	bl	8000b7c <__NVIC_GetPriorityGrouping>
 8000cc4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cc6:	687a      	ldr	r2, [r7, #4]
 8000cc8:	68b9      	ldr	r1, [r7, #8]
 8000cca:	6978      	ldr	r0, [r7, #20]
 8000ccc:	f7ff ff8e 	bl	8000bec <NVIC_EncodePriority>
 8000cd0:	4602      	mov	r2, r0
 8000cd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cd6:	4611      	mov	r1, r2
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f7ff ff5d 	bl	8000b98 <__NVIC_SetPriority>
}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b082      	sub	sp, #8
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cee:	6878      	ldr	r0, [r7, #4]
 8000cf0:	f7ff ffb0 	bl	8000c54 <SysTick_Config>
 8000cf4:	4603      	mov	r3, r0
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
	...

08000d00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b089      	sub	sp, #36	; 0x24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
 8000d08:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d16:	2300      	movs	r3, #0
 8000d18:	61fb      	str	r3, [r7, #28]
 8000d1a:	e16b      	b.n	8000ff4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	fa02 f303 	lsl.w	r3, r2, r3
 8000d24:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	697a      	ldr	r2, [r7, #20]
 8000d2c:	4013      	ands	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d30:	693a      	ldr	r2, [r7, #16]
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	429a      	cmp	r2, r3
 8000d36:	f040 815a 	bne.w	8000fee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	685b      	ldr	r3, [r3, #4]
 8000d3e:	f003 0303 	and.w	r3, r3, #3
 8000d42:	2b01      	cmp	r3, #1
 8000d44:	d005      	beq.n	8000d52 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	685b      	ldr	r3, [r3, #4]
 8000d4a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d4e:	2b02      	cmp	r3, #2
 8000d50:	d130      	bne.n	8000db4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d58:	69fb      	ldr	r3, [r7, #28]
 8000d5a:	005b      	lsls	r3, r3, #1
 8000d5c:	2203      	movs	r2, #3
 8000d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d62:	43db      	mvns	r3, r3
 8000d64:	69ba      	ldr	r2, [r7, #24]
 8000d66:	4013      	ands	r3, r2
 8000d68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	68da      	ldr	r2, [r3, #12]
 8000d6e:	69fb      	ldr	r3, [r7, #28]
 8000d70:	005b      	lsls	r3, r3, #1
 8000d72:	fa02 f303 	lsl.w	r3, r2, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4313      	orrs	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69ba      	ldr	r2, [r7, #24]
 8000d80:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	685b      	ldr	r3, [r3, #4]
 8000d86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d88:	2201      	movs	r2, #1
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d90:	43db      	mvns	r3, r3
 8000d92:	69ba      	ldr	r2, [r7, #24]
 8000d94:	4013      	ands	r3, r2
 8000d96:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	091b      	lsrs	r3, r3, #4
 8000d9e:	f003 0201 	and.w	r2, r3, #1
 8000da2:	69fb      	ldr	r3, [r7, #28]
 8000da4:	fa02 f303 	lsl.w	r3, r2, r3
 8000da8:	69ba      	ldr	r2, [r7, #24]
 8000daa:	4313      	orrs	r3, r2
 8000dac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	69ba      	ldr	r2, [r7, #24]
 8000db2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f003 0303 	and.w	r3, r3, #3
 8000dbc:	2b03      	cmp	r3, #3
 8000dbe:	d017      	beq.n	8000df0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	68db      	ldr	r3, [r3, #12]
 8000dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dc6:	69fb      	ldr	r3, [r7, #28]
 8000dc8:	005b      	lsls	r3, r3, #1
 8000dca:	2203      	movs	r2, #3
 8000dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd0:	43db      	mvns	r3, r3
 8000dd2:	69ba      	ldr	r2, [r7, #24]
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	689a      	ldr	r2, [r3, #8]
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	005b      	lsls	r3, r3, #1
 8000de0:	fa02 f303 	lsl.w	r3, r2, r3
 8000de4:	69ba      	ldr	r2, [r7, #24]
 8000de6:	4313      	orrs	r3, r2
 8000de8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	69ba      	ldr	r2, [r7, #24]
 8000dee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df0:	683b      	ldr	r3, [r7, #0]
 8000df2:	685b      	ldr	r3, [r3, #4]
 8000df4:	f003 0303 	and.w	r3, r3, #3
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d123      	bne.n	8000e44 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	08da      	lsrs	r2, r3, #3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	3208      	adds	r2, #8
 8000e04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e08:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	f003 0307 	and.w	r3, r3, #7
 8000e10:	009b      	lsls	r3, r3, #2
 8000e12:	220f      	movs	r2, #15
 8000e14:	fa02 f303 	lsl.w	r3, r2, r3
 8000e18:	43db      	mvns	r3, r3
 8000e1a:	69ba      	ldr	r2, [r7, #24]
 8000e1c:	4013      	ands	r3, r2
 8000e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	691a      	ldr	r2, [r3, #16]
 8000e24:	69fb      	ldr	r3, [r7, #28]
 8000e26:	f003 0307 	and.w	r3, r3, #7
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e30:	69ba      	ldr	r2, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	08da      	lsrs	r2, r3, #3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	3208      	adds	r2, #8
 8000e3e:	69b9      	ldr	r1, [r7, #24]
 8000e40:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	005b      	lsls	r3, r3, #1
 8000e4e:	2203      	movs	r2, #3
 8000e50:	fa02 f303 	lsl.w	r3, r2, r3
 8000e54:	43db      	mvns	r3, r3
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4013      	ands	r3, r2
 8000e5a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	685b      	ldr	r3, [r3, #4]
 8000e60:	f003 0203 	and.w	r2, r3, #3
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	69ba      	ldr	r2, [r7, #24]
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	69ba      	ldr	r2, [r7, #24]
 8000e76:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e78:	683b      	ldr	r3, [r7, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 80b4 	beq.w	8000fee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
 8000e8a:	4b60      	ldr	r3, [pc, #384]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	4a5f      	ldr	r2, [pc, #380]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e94:	6453      	str	r3, [r2, #68]	; 0x44
 8000e96:	4b5d      	ldr	r3, [pc, #372]	; (800100c <HAL_GPIO_Init+0x30c>)
 8000e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <HAL_GPIO_Init+0x310>)
 8000ea4:	69fb      	ldr	r3, [r7, #28]
 8000ea6:	089b      	lsrs	r3, r3, #2
 8000ea8:	3302      	adds	r3, #2
 8000eaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0303 	and.w	r3, r3, #3
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	220f      	movs	r2, #15
 8000eba:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebe:	43db      	mvns	r3, r3
 8000ec0:	69ba      	ldr	r2, [r7, #24]
 8000ec2:	4013      	ands	r3, r2
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	4a52      	ldr	r2, [pc, #328]	; (8001014 <HAL_GPIO_Init+0x314>)
 8000eca:	4293      	cmp	r3, r2
 8000ecc:	d02b      	beq.n	8000f26 <HAL_GPIO_Init+0x226>
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4a51      	ldr	r2, [pc, #324]	; (8001018 <HAL_GPIO_Init+0x318>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d025      	beq.n	8000f22 <HAL_GPIO_Init+0x222>
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4a50      	ldr	r2, [pc, #320]	; (800101c <HAL_GPIO_Init+0x31c>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d01f      	beq.n	8000f1e <HAL_GPIO_Init+0x21e>
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	4a4f      	ldr	r2, [pc, #316]	; (8001020 <HAL_GPIO_Init+0x320>)
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d019      	beq.n	8000f1a <HAL_GPIO_Init+0x21a>
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	4a4e      	ldr	r2, [pc, #312]	; (8001024 <HAL_GPIO_Init+0x324>)
 8000eea:	4293      	cmp	r3, r2
 8000eec:	d013      	beq.n	8000f16 <HAL_GPIO_Init+0x216>
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	4a4d      	ldr	r2, [pc, #308]	; (8001028 <HAL_GPIO_Init+0x328>)
 8000ef2:	4293      	cmp	r3, r2
 8000ef4:	d00d      	beq.n	8000f12 <HAL_GPIO_Init+0x212>
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4a4c      	ldr	r2, [pc, #304]	; (800102c <HAL_GPIO_Init+0x32c>)
 8000efa:	4293      	cmp	r3, r2
 8000efc:	d007      	beq.n	8000f0e <HAL_GPIO_Init+0x20e>
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4a4b      	ldr	r2, [pc, #300]	; (8001030 <HAL_GPIO_Init+0x330>)
 8000f02:	4293      	cmp	r3, r2
 8000f04:	d101      	bne.n	8000f0a <HAL_GPIO_Init+0x20a>
 8000f06:	2307      	movs	r3, #7
 8000f08:	e00e      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0a:	2308      	movs	r3, #8
 8000f0c:	e00c      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f0e:	2306      	movs	r3, #6
 8000f10:	e00a      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f12:	2305      	movs	r3, #5
 8000f14:	e008      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f16:	2304      	movs	r3, #4
 8000f18:	e006      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1a:	2303      	movs	r3, #3
 8000f1c:	e004      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e002      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f22:	2301      	movs	r3, #1
 8000f24:	e000      	b.n	8000f28 <HAL_GPIO_Init+0x228>
 8000f26:	2300      	movs	r3, #0
 8000f28:	69fa      	ldr	r2, [r7, #28]
 8000f2a:	f002 0203 	and.w	r2, r2, #3
 8000f2e:	0092      	lsls	r2, r2, #2
 8000f30:	4093      	lsls	r3, r2
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4313      	orrs	r3, r2
 8000f36:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f38:	4935      	ldr	r1, [pc, #212]	; (8001010 <HAL_GPIO_Init+0x310>)
 8000f3a:	69fb      	ldr	r3, [r7, #28]
 8000f3c:	089b      	lsrs	r3, r3, #2
 8000f3e:	3302      	adds	r3, #2
 8000f40:	69ba      	ldr	r2, [r7, #24]
 8000f42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f46:	4b3b      	ldr	r3, [pc, #236]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f48:	689b      	ldr	r3, [r3, #8]
 8000f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f4c:	693b      	ldr	r3, [r7, #16]
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d003      	beq.n	8000f6a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	693b      	ldr	r3, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6a:	4a32      	ldr	r2, [pc, #200]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f6c:	69bb      	ldr	r3, [r7, #24]
 8000f6e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f70:	4b30      	ldr	r3, [pc, #192]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f72:	68db      	ldr	r3, [r3, #12]
 8000f74:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f76:	693b      	ldr	r3, [r7, #16]
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f8c:	69ba      	ldr	r2, [r7, #24]
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	4313      	orrs	r3, r2
 8000f92:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f94:	4a27      	ldr	r2, [pc, #156]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f96:	69bb      	ldr	r3, [r7, #24]
 8000f98:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa0:	693b      	ldr	r3, [r7, #16]
 8000fa2:	43db      	mvns	r3, r3
 8000fa4:	69ba      	ldr	r2, [r7, #24]
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000faa:	683b      	ldr	r3, [r7, #0]
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fb6:	69ba      	ldr	r2, [r7, #24]
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fbe:	4a1d      	ldr	r2, [pc, #116]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fc0:	69bb      	ldr	r3, [r7, #24]
 8000fc2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc4:	4b1b      	ldr	r3, [pc, #108]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	43db      	mvns	r3, r3
 8000fce:	69ba      	ldr	r2, [r7, #24]
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d003      	beq.n	8000fe8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe0:	69ba      	ldr	r2, [r7, #24]
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fe8:	4a12      	ldr	r2, [pc, #72]	; (8001034 <HAL_GPIO_Init+0x334>)
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000fee:	69fb      	ldr	r3, [r7, #28]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	61fb      	str	r3, [r7, #28]
 8000ff4:	69fb      	ldr	r3, [r7, #28]
 8000ff6:	2b0f      	cmp	r3, #15
 8000ff8:	f67f ae90 	bls.w	8000d1c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ffc:	bf00      	nop
 8000ffe:	bf00      	nop
 8001000:	3724      	adds	r7, #36	; 0x24
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	40023800 	.word	0x40023800
 8001010:	40013800 	.word	0x40013800
 8001014:	40020000 	.word	0x40020000
 8001018:	40020400 	.word	0x40020400
 800101c:	40020800 	.word	0x40020800
 8001020:	40020c00 	.word	0x40020c00
 8001024:	40021000 	.word	0x40021000
 8001028:	40021400 	.word	0x40021400
 800102c:	40021800 	.word	0x40021800
 8001030:	40021c00 	.word	0x40021c00
 8001034:	40013c00 	.word	0x40013c00

08001038 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
 8001040:	460b      	mov	r3, r1
 8001042:	807b      	strh	r3, [r7, #2]
 8001044:	4613      	mov	r3, r2
 8001046:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001048:	787b      	ldrb	r3, [r7, #1]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800104e:	887a      	ldrh	r2, [r7, #2]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001054:	e003      	b.n	800105e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001056:	887b      	ldrh	r3, [r7, #2]
 8001058:	041a      	lsls	r2, r3, #16
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	619a      	str	r2, [r3, #24]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b086      	sub	sp, #24
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2b00      	cmp	r3, #0
 8001078:	d101      	bne.n	800107e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e267      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	f003 0301 	and.w	r3, r3, #1
 8001086:	2b00      	cmp	r3, #0
 8001088:	d075      	beq.n	8001176 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108a:	4b88      	ldr	r3, [pc, #544]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 030c 	and.w	r3, r3, #12
 8001092:	2b04      	cmp	r3, #4
 8001094:	d00c      	beq.n	80010b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001096:	4b85      	ldr	r3, [pc, #532]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800109e:	2b08      	cmp	r3, #8
 80010a0:	d112      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a2:	4b82      	ldr	r3, [pc, #520]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010a4:	685b      	ldr	r3, [r3, #4]
 80010a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010ae:	d10b      	bne.n	80010c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b0:	4b7e      	ldr	r3, [pc, #504]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d05b      	beq.n	8001174 <HAL_RCC_OscConfig+0x108>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	685b      	ldr	r3, [r3, #4]
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d157      	bne.n	8001174 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	e242      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d0:	d106      	bne.n	80010e0 <HAL_RCC_OscConfig+0x74>
 80010d2:	4b76      	ldr	r3, [pc, #472]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	4a75      	ldr	r2, [pc, #468]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010dc:	6013      	str	r3, [r2, #0]
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010e8:	d10c      	bne.n	8001104 <HAL_RCC_OscConfig+0x98>
 80010ea:	4b70      	ldr	r3, [pc, #448]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4a6f      	ldr	r2, [pc, #444]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f4:	6013      	str	r3, [r2, #0]
 80010f6:	4b6d      	ldr	r3, [pc, #436]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	4a6c      	ldr	r2, [pc, #432]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80010fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001100:	6013      	str	r3, [r2, #0]
 8001102:	e00b      	b.n	800111c <HAL_RCC_OscConfig+0xb0>
 8001104:	4b69      	ldr	r3, [pc, #420]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	4a68      	ldr	r2, [pc, #416]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 800110a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800110e:	6013      	str	r3, [r2, #0]
 8001110:	4b66      	ldr	r3, [pc, #408]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	4a65      	ldr	r2, [pc, #404]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001116:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	685b      	ldr	r3, [r3, #4]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d013      	beq.n	800114c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001124:	f7ff fcfa 	bl	8000b1c <HAL_GetTick>
 8001128:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112a:	e008      	b.n	800113e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800112c:	f7ff fcf6 	bl	8000b1c <HAL_GetTick>
 8001130:	4602      	mov	r2, r0
 8001132:	693b      	ldr	r3, [r7, #16]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	2b64      	cmp	r3, #100	; 0x64
 8001138:	d901      	bls.n	800113e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113a:	2303      	movs	r3, #3
 800113c:	e207      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800113e:	4b5b      	ldr	r3, [pc, #364]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d0f0      	beq.n	800112c <HAL_RCC_OscConfig+0xc0>
 800114a:	e014      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800114c:	f7ff fce6 	bl	8000b1c <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001154:	f7ff fce2 	bl	8000b1c <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b64      	cmp	r3, #100	; 0x64
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1f3      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001166:	4b51      	ldr	r3, [pc, #324]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116e:	2b00      	cmp	r3, #0
 8001170:	d1f0      	bne.n	8001154 <HAL_RCC_OscConfig+0xe8>
 8001172:	e000      	b.n	8001176 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001174:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d063      	beq.n	800124a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001182:	4b4a      	ldr	r3, [pc, #296]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001184:	689b      	ldr	r3, [r3, #8]
 8001186:	f003 030c 	and.w	r3, r3, #12
 800118a:	2b00      	cmp	r3, #0
 800118c:	d00b      	beq.n	80011a6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118e:	4b47      	ldr	r3, [pc, #284]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001196:	2b08      	cmp	r3, #8
 8001198:	d11c      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119a:	4b44      	ldr	r3, [pc, #272]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 800119c:	685b      	ldr	r3, [r3, #4]
 800119e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d116      	bne.n	80011d4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011a6:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f003 0302 	and.w	r3, r3, #2
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d005      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d001      	beq.n	80011be <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e1c7      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011be:	4b3b      	ldr	r3, [pc, #236]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	691b      	ldr	r3, [r3, #16]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4937      	ldr	r1, [pc, #220]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80011ce:	4313      	orrs	r3, r2
 80011d0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d2:	e03a      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d020      	beq.n	800121e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011dc:	4b34      	ldr	r3, [pc, #208]	; (80012b0 <HAL_RCC_OscConfig+0x244>)
 80011de:	2201      	movs	r2, #1
 80011e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e2:	f7ff fc9b 	bl	8000b1c <HAL_GetTick>
 80011e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011e8:	e008      	b.n	80011fc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ea:	f7ff fc97 	bl	8000b1c <HAL_GetTick>
 80011ee:	4602      	mov	r2, r0
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	1ad3      	subs	r3, r2, r3
 80011f4:	2b02      	cmp	r3, #2
 80011f6:	d901      	bls.n	80011fc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011f8:	2303      	movs	r3, #3
 80011fa:	e1a8      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fc:	4b2b      	ldr	r3, [pc, #172]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f003 0302 	and.w	r3, r3, #2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d0f0      	beq.n	80011ea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001208:	4b28      	ldr	r3, [pc, #160]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	691b      	ldr	r3, [r3, #16]
 8001214:	00db      	lsls	r3, r3, #3
 8001216:	4925      	ldr	r1, [pc, #148]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001218:	4313      	orrs	r3, r2
 800121a:	600b      	str	r3, [r1, #0]
 800121c:	e015      	b.n	800124a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800121e:	4b24      	ldr	r3, [pc, #144]	; (80012b0 <HAL_RCC_OscConfig+0x244>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001224:	f7ff fc7a 	bl	8000b1c <HAL_GetTick>
 8001228:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122a:	e008      	b.n	800123e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800122c:	f7ff fc76 	bl	8000b1c <HAL_GetTick>
 8001230:	4602      	mov	r2, r0
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	1ad3      	subs	r3, r2, r3
 8001236:	2b02      	cmp	r3, #2
 8001238:	d901      	bls.n	800123e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123a:	2303      	movs	r3, #3
 800123c:	e187      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800123e:	4b1b      	ldr	r3, [pc, #108]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0302 	and.w	r3, r3, #2
 8001246:	2b00      	cmp	r3, #0
 8001248:	d1f0      	bne.n	800122c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0308 	and.w	r3, r3, #8
 8001252:	2b00      	cmp	r3, #0
 8001254:	d036      	beq.n	80012c4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	695b      	ldr	r3, [r3, #20]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d016      	beq.n	800128c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800125e:	4b15      	ldr	r3, [pc, #84]	; (80012b4 <HAL_RCC_OscConfig+0x248>)
 8001260:	2201      	movs	r2, #1
 8001262:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001264:	f7ff fc5a 	bl	8000b1c <HAL_GetTick>
 8001268:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126a:	e008      	b.n	800127e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800126c:	f7ff fc56 	bl	8000b1c <HAL_GetTick>
 8001270:	4602      	mov	r2, r0
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	1ad3      	subs	r3, r2, r3
 8001276:	2b02      	cmp	r3, #2
 8001278:	d901      	bls.n	800127e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127a:	2303      	movs	r3, #3
 800127c:	e167      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800127e:	4b0b      	ldr	r3, [pc, #44]	; (80012ac <HAL_RCC_OscConfig+0x240>)
 8001280:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001282:	f003 0302 	and.w	r3, r3, #2
 8001286:	2b00      	cmp	r3, #0
 8001288:	d0f0      	beq.n	800126c <HAL_RCC_OscConfig+0x200>
 800128a:	e01b      	b.n	80012c4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800128c:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <HAL_RCC_OscConfig+0x248>)
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001292:	f7ff fc43 	bl	8000b1c <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001298:	e00e      	b.n	80012b8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129a:	f7ff fc3f 	bl	8000b1c <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d907      	bls.n	80012b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e150      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80012ac:	40023800 	.word	0x40023800
 80012b0:	42470000 	.word	0x42470000
 80012b4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012b8:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012bc:	f003 0302 	and.w	r3, r3, #2
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d1ea      	bne.n	800129a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0304 	and.w	r3, r3, #4
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 8097 	beq.w	8001400 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d2:	2300      	movs	r3, #0
 80012d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012d6:	4b81      	ldr	r3, [pc, #516]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d10f      	bne.n	8001302 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	4b7d      	ldr	r3, [pc, #500]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	4a7c      	ldr	r2, [pc, #496]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80012ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f0:	6413      	str	r3, [r2, #64]	; 0x40
 80012f2:	4b7a      	ldr	r3, [pc, #488]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fa:	60bb      	str	r3, [r7, #8]
 80012fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012fe:	2301      	movs	r3, #1
 8001300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001302:	4b77      	ldr	r3, [pc, #476]	; (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130a:	2b00      	cmp	r3, #0
 800130c:	d118      	bne.n	8001340 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800130e:	4b74      	ldr	r3, [pc, #464]	; (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a73      	ldr	r2, [pc, #460]	; (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131a:	f7ff fbff 	bl	8000b1c <HAL_GetTick>
 800131e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001320:	e008      	b.n	8001334 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001322:	f7ff fbfb 	bl	8000b1c <HAL_GetTick>
 8001326:	4602      	mov	r2, r0
 8001328:	693b      	ldr	r3, [r7, #16]
 800132a:	1ad3      	subs	r3, r2, r3
 800132c:	2b02      	cmp	r3, #2
 800132e:	d901      	bls.n	8001334 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e10c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001334:	4b6a      	ldr	r3, [pc, #424]	; (80014e0 <HAL_RCC_OscConfig+0x474>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d0f0      	beq.n	8001322 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	689b      	ldr	r3, [r3, #8]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d106      	bne.n	8001356 <HAL_RCC_OscConfig+0x2ea>
 8001348:	4b64      	ldr	r3, [pc, #400]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800134a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800134c:	4a63      	ldr	r2, [pc, #396]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800134e:	f043 0301 	orr.w	r3, r3, #1
 8001352:	6713      	str	r3, [r2, #112]	; 0x70
 8001354:	e01c      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d10c      	bne.n	8001378 <HAL_RCC_OscConfig+0x30c>
 800135e:	4b5f      	ldr	r3, [pc, #380]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001362:	4a5e      	ldr	r2, [pc, #376]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001364:	f043 0304 	orr.w	r3, r3, #4
 8001368:	6713      	str	r3, [r2, #112]	; 0x70
 800136a:	4b5c      	ldr	r3, [pc, #368]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800136c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800136e:	4a5b      	ldr	r2, [pc, #364]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001370:	f043 0301 	orr.w	r3, r3, #1
 8001374:	6713      	str	r3, [r2, #112]	; 0x70
 8001376:	e00b      	b.n	8001390 <HAL_RCC_OscConfig+0x324>
 8001378:	4b58      	ldr	r3, [pc, #352]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800137a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137c:	4a57      	ldr	r2, [pc, #348]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800137e:	f023 0301 	bic.w	r3, r3, #1
 8001382:	6713      	str	r3, [r2, #112]	; 0x70
 8001384:	4b55      	ldr	r3, [pc, #340]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001388:	4a54      	ldr	r2, [pc, #336]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800138a:	f023 0304 	bic.w	r3, r3, #4
 800138e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d015      	beq.n	80013c4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001398:	f7ff fbc0 	bl	8000b1c <HAL_GetTick>
 800139c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800139e:	e00a      	b.n	80013b6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a0:	f7ff fbbc 	bl	8000b1c <HAL_GetTick>
 80013a4:	4602      	mov	r2, r0
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	1ad3      	subs	r3, r2, r3
 80013aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e0cb      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013b6:	4b49      	ldr	r3, [pc, #292]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80013b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d0ee      	beq.n	80013a0 <HAL_RCC_OscConfig+0x334>
 80013c2:	e014      	b.n	80013ee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c4:	f7ff fbaa 	bl	8000b1c <HAL_GetTick>
 80013c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ca:	e00a      	b.n	80013e2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013cc:	f7ff fba6 	bl	8000b1c <HAL_GetTick>
 80013d0:	4602      	mov	r2, r0
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	1ad3      	subs	r3, r2, r3
 80013d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013da:	4293      	cmp	r3, r2
 80013dc:	d901      	bls.n	80013e2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013de:	2303      	movs	r3, #3
 80013e0:	e0b5      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e2:	4b3e      	ldr	r3, [pc, #248]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80013e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013e6:	f003 0302 	and.w	r3, r3, #2
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1ee      	bne.n	80013cc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013ee:	7dfb      	ldrb	r3, [r7, #23]
 80013f0:	2b01      	cmp	r3, #1
 80013f2:	d105      	bne.n	8001400 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f4:	4b39      	ldr	r3, [pc, #228]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	4a38      	ldr	r2, [pc, #224]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80013fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013fe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	2b00      	cmp	r3, #0
 8001406:	f000 80a1 	beq.w	800154c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140a:	4b34      	ldr	r3, [pc, #208]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 030c 	and.w	r3, r3, #12
 8001412:	2b08      	cmp	r3, #8
 8001414:	d05c      	beq.n	80014d0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	699b      	ldr	r3, [r3, #24]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d141      	bne.n	80014a2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001424:	f7ff fb7a 	bl	8000b1c <HAL_GetTick>
 8001428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142a:	e008      	b.n	800143e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800142c:	f7ff fb76 	bl	8000b1c <HAL_GetTick>
 8001430:	4602      	mov	r2, r0
 8001432:	693b      	ldr	r3, [r7, #16]
 8001434:	1ad3      	subs	r3, r2, r3
 8001436:	2b02      	cmp	r3, #2
 8001438:	d901      	bls.n	800143e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143a:	2303      	movs	r3, #3
 800143c:	e087      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800143e:	4b27      	ldr	r3, [pc, #156]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001446:	2b00      	cmp	r3, #0
 8001448:	d1f0      	bne.n	800142c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	69da      	ldr	r2, [r3, #28]
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6a1b      	ldr	r3, [r3, #32]
 8001452:	431a      	orrs	r2, r3
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001458:	019b      	lsls	r3, r3, #6
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001460:	085b      	lsrs	r3, r3, #1
 8001462:	3b01      	subs	r3, #1
 8001464:	041b      	lsls	r3, r3, #16
 8001466:	431a      	orrs	r2, r3
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800146c:	061b      	lsls	r3, r3, #24
 800146e:	491b      	ldr	r1, [pc, #108]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001470:	4313      	orrs	r3, r2
 8001472:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001474:	4b1b      	ldr	r3, [pc, #108]	; (80014e4 <HAL_RCC_OscConfig+0x478>)
 8001476:	2201      	movs	r2, #1
 8001478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147a:	f7ff fb4f 	bl	8000b1c <HAL_GetTick>
 800147e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001480:	e008      	b.n	8001494 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001482:	f7ff fb4b 	bl	8000b1c <HAL_GetTick>
 8001486:	4602      	mov	r2, r0
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	1ad3      	subs	r3, r2, r3
 800148c:	2b02      	cmp	r3, #2
 800148e:	d901      	bls.n	8001494 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e05c      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001494:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800149c:	2b00      	cmp	r3, #0
 800149e:	d0f0      	beq.n	8001482 <HAL_RCC_OscConfig+0x416>
 80014a0:	e054      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a2:	4b10      	ldr	r3, [pc, #64]	; (80014e4 <HAL_RCC_OscConfig+0x478>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a8:	f7ff fb38 	bl	8000b1c <HAL_GetTick>
 80014ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014ae:	e008      	b.n	80014c2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b0:	f7ff fb34 	bl	8000b1c <HAL_GetTick>
 80014b4:	4602      	mov	r2, r0
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	2b02      	cmp	r3, #2
 80014bc:	d901      	bls.n	80014c2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014be:	2303      	movs	r3, #3
 80014c0:	e045      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c2:	4b06      	ldr	r3, [pc, #24]	; (80014dc <HAL_RCC_OscConfig+0x470>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d1f0      	bne.n	80014b0 <HAL_RCC_OscConfig+0x444>
 80014ce:	e03d      	b.n	800154c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	699b      	ldr	r3, [r3, #24]
 80014d4:	2b01      	cmp	r3, #1
 80014d6:	d107      	bne.n	80014e8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014d8:	2301      	movs	r3, #1
 80014da:	e038      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
 80014dc:	40023800 	.word	0x40023800
 80014e0:	40007000 	.word	0x40007000
 80014e4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014e8:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <HAL_RCC_OscConfig+0x4ec>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	699b      	ldr	r3, [r3, #24]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d028      	beq.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001500:	429a      	cmp	r2, r3
 8001502:	d121      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800150e:	429a      	cmp	r2, r3
 8001510:	d11a      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001512:	68fa      	ldr	r2, [r7, #12]
 8001514:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001518:	4013      	ands	r3, r2
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800151e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001520:	4293      	cmp	r3, r2
 8001522:	d111      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800152e:	085b      	lsrs	r3, r3, #1
 8001530:	3b01      	subs	r3, #1
 8001532:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001534:	429a      	cmp	r2, r3
 8001536:	d107      	bne.n	8001548 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001542:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40023800 	.word	0x40023800

0800155c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b084      	sub	sp, #16
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
 8001564:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d101      	bne.n	8001570 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800156c:	2301      	movs	r3, #1
 800156e:	e0cc      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001570:	4b68      	ldr	r3, [pc, #416]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	f003 0307 	and.w	r3, r3, #7
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	429a      	cmp	r2, r3
 800157c:	d90c      	bls.n	8001598 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800157e:	4b65      	ldr	r3, [pc, #404]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	683a      	ldr	r2, [r7, #0]
 8001582:	b2d2      	uxtb	r2, r2
 8001584:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001586:	4b63      	ldr	r3, [pc, #396]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0307 	and.w	r3, r3, #7
 800158e:	683a      	ldr	r2, [r7, #0]
 8001590:	429a      	cmp	r2, r3
 8001592:	d001      	beq.n	8001598 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001594:	2301      	movs	r3, #1
 8001596:	e0b8      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0302 	and.w	r3, r3, #2
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0304 	and.w	r3, r3, #4
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b0:	4b59      	ldr	r3, [pc, #356]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b2:	689b      	ldr	r3, [r3, #8]
 80015b4:	4a58      	ldr	r2, [pc, #352]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015ba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f003 0308 	and.w	r3, r3, #8
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d005      	beq.n	80015d4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015c8:	4b53      	ldr	r3, [pc, #332]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a52      	ldr	r2, [pc, #328]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d4:	4b50      	ldr	r3, [pc, #320]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	689b      	ldr	r3, [r3, #8]
 80015d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	689b      	ldr	r3, [r3, #8]
 80015e0:	494d      	ldr	r1, [pc, #308]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	4313      	orrs	r3, r2
 80015e4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d044      	beq.n	800167c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d107      	bne.n	800160a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001602:	2b00      	cmp	r3, #0
 8001604:	d119      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e07f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b02      	cmp	r3, #2
 8001610:	d003      	beq.n	800161a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001616:	2b03      	cmp	r3, #3
 8001618:	d107      	bne.n	800162a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161a:	4b3f      	ldr	r3, [pc, #252]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d109      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001626:	2301      	movs	r3, #1
 8001628:	e06f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162a:	4b3b      	ldr	r3, [pc, #236]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e067      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163a:	4b37      	ldr	r3, [pc, #220]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800163c:	689b      	ldr	r3, [r3, #8]
 800163e:	f023 0203 	bic.w	r2, r3, #3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	4934      	ldr	r1, [pc, #208]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 8001648:	4313      	orrs	r3, r2
 800164a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800164c:	f7ff fa66 	bl	8000b1c <HAL_GetTick>
 8001650:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001652:	e00a      	b.n	800166a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001654:	f7ff fa62 	bl	8000b1c <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e04f      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166a:	4b2b      	ldr	r3, [pc, #172]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	f003 020c 	and.w	r2, r3, #12
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	429a      	cmp	r2, r3
 800167a:	d1eb      	bne.n	8001654 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800167c:	4b25      	ldr	r3, [pc, #148]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0307 	and.w	r3, r3, #7
 8001684:	683a      	ldr	r2, [r7, #0]
 8001686:	429a      	cmp	r2, r3
 8001688:	d20c      	bcs.n	80016a4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168a:	4b22      	ldr	r3, [pc, #136]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 800168c:	683a      	ldr	r2, [r7, #0]
 800168e:	b2d2      	uxtb	r2, r2
 8001690:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001692:	4b20      	ldr	r3, [pc, #128]	; (8001714 <HAL_RCC_ClockConfig+0x1b8>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f003 0307 	and.w	r3, r3, #7
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	429a      	cmp	r2, r3
 800169e:	d001      	beq.n	80016a4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a0:	2301      	movs	r3, #1
 80016a2:	e032      	b.n	800170a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f003 0304 	and.w	r3, r3, #4
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d008      	beq.n	80016c2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b0:	4b19      	ldr	r3, [pc, #100]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016b2:	689b      	ldr	r3, [r3, #8]
 80016b4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	4916      	ldr	r1, [pc, #88]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016be:	4313      	orrs	r3, r2
 80016c0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 0308 	and.w	r3, r3, #8
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d009      	beq.n	80016e2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016ce:	4b12      	ldr	r3, [pc, #72]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	691b      	ldr	r3, [r3, #16]
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	490e      	ldr	r1, [pc, #56]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016de:	4313      	orrs	r3, r2
 80016e0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e2:	f000 f821 	bl	8001728 <HAL_RCC_GetSysClockFreq>
 80016e6:	4602      	mov	r2, r0
 80016e8:	4b0b      	ldr	r3, [pc, #44]	; (8001718 <HAL_RCC_ClockConfig+0x1bc>)
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	091b      	lsrs	r3, r3, #4
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	490a      	ldr	r1, [pc, #40]	; (800171c <HAL_RCC_ClockConfig+0x1c0>)
 80016f4:	5ccb      	ldrb	r3, [r1, r3]
 80016f6:	fa22 f303 	lsr.w	r3, r2, r3
 80016fa:	4a09      	ldr	r2, [pc, #36]	; (8001720 <HAL_RCC_ClockConfig+0x1c4>)
 80016fc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80016fe:	4b09      	ldr	r3, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c8>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	4618      	mov	r0, r3
 8001704:	f7ff f9c6 	bl	8000a94 <HAL_InitTick>

  return HAL_OK;
 8001708:	2300      	movs	r3, #0
}
 800170a:	4618      	mov	r0, r3
 800170c:	3710      	adds	r7, #16
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023c00 	.word	0x40023c00
 8001718:	40023800 	.word	0x40023800
 800171c:	08002be0 	.word	0x08002be0
 8001720:	20000000 	.word	0x20000000
 8001724:	20000004 	.word	0x20000004

08001728 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001728:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800172c:	b090      	sub	sp, #64	; 0x40
 800172e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001730:	2300      	movs	r3, #0
 8001732:	637b      	str	r3, [r7, #52]	; 0x34
 8001734:	2300      	movs	r3, #0
 8001736:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001738:	2300      	movs	r3, #0
 800173a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800173c:	2300      	movs	r3, #0
 800173e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001740:	4b59      	ldr	r3, [pc, #356]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	f003 030c 	and.w	r3, r3, #12
 8001748:	2b08      	cmp	r3, #8
 800174a:	d00d      	beq.n	8001768 <HAL_RCC_GetSysClockFreq+0x40>
 800174c:	2b08      	cmp	r3, #8
 800174e:	f200 80a1 	bhi.w	8001894 <HAL_RCC_GetSysClockFreq+0x16c>
 8001752:	2b00      	cmp	r3, #0
 8001754:	d002      	beq.n	800175c <HAL_RCC_GetSysClockFreq+0x34>
 8001756:	2b04      	cmp	r3, #4
 8001758:	d003      	beq.n	8001762 <HAL_RCC_GetSysClockFreq+0x3a>
 800175a:	e09b      	b.n	8001894 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800175c:	4b53      	ldr	r3, [pc, #332]	; (80018ac <HAL_RCC_GetSysClockFreq+0x184>)
 800175e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8001760:	e09b      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001762:	4b53      	ldr	r3, [pc, #332]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001764:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001766:	e098      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001768:	4b4f      	ldr	r3, [pc, #316]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001770:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001772:	4b4d      	ldr	r3, [pc, #308]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177a:	2b00      	cmp	r3, #0
 800177c:	d028      	beq.n	80017d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800177e:	4b4a      	ldr	r3, [pc, #296]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	099b      	lsrs	r3, r3, #6
 8001784:	2200      	movs	r2, #0
 8001786:	623b      	str	r3, [r7, #32]
 8001788:	627a      	str	r2, [r7, #36]	; 0x24
 800178a:	6a3b      	ldr	r3, [r7, #32]
 800178c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001790:	2100      	movs	r1, #0
 8001792:	4b47      	ldr	r3, [pc, #284]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8001794:	fb03 f201 	mul.w	r2, r3, r1
 8001798:	2300      	movs	r3, #0
 800179a:	fb00 f303 	mul.w	r3, r0, r3
 800179e:	4413      	add	r3, r2
 80017a0:	4a43      	ldr	r2, [pc, #268]	; (80018b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80017a2:	fba0 1202 	umull	r1, r2, r0, r2
 80017a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017a8:	460a      	mov	r2, r1
 80017aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80017ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80017ae:	4413      	add	r3, r2
 80017b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80017b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017b4:	2200      	movs	r2, #0
 80017b6:	61bb      	str	r3, [r7, #24]
 80017b8:	61fa      	str	r2, [r7, #28]
 80017ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80017c2:	f7fe fd55 	bl	8000270 <__aeabi_uldivmod>
 80017c6:	4602      	mov	r2, r0
 80017c8:	460b      	mov	r3, r1
 80017ca:	4613      	mov	r3, r2
 80017cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80017ce:	e053      	b.n	8001878 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80017d0:	4b35      	ldr	r3, [pc, #212]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	099b      	lsrs	r3, r3, #6
 80017d6:	2200      	movs	r2, #0
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	617a      	str	r2, [r7, #20]
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80017e2:	f04f 0b00 	mov.w	fp, #0
 80017e6:	4652      	mov	r2, sl
 80017e8:	465b      	mov	r3, fp
 80017ea:	f04f 0000 	mov.w	r0, #0
 80017ee:	f04f 0100 	mov.w	r1, #0
 80017f2:	0159      	lsls	r1, r3, #5
 80017f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017f8:	0150      	lsls	r0, r2, #5
 80017fa:	4602      	mov	r2, r0
 80017fc:	460b      	mov	r3, r1
 80017fe:	ebb2 080a 	subs.w	r8, r2, sl
 8001802:	eb63 090b 	sbc.w	r9, r3, fp
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001812:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001816:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800181a:	ebb2 0408 	subs.w	r4, r2, r8
 800181e:	eb63 0509 	sbc.w	r5, r3, r9
 8001822:	f04f 0200 	mov.w	r2, #0
 8001826:	f04f 0300 	mov.w	r3, #0
 800182a:	00eb      	lsls	r3, r5, #3
 800182c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001830:	00e2      	lsls	r2, r4, #3
 8001832:	4614      	mov	r4, r2
 8001834:	461d      	mov	r5, r3
 8001836:	eb14 030a 	adds.w	r3, r4, sl
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	eb45 030b 	adc.w	r3, r5, fp
 8001840:	607b      	str	r3, [r7, #4]
 8001842:	f04f 0200 	mov.w	r2, #0
 8001846:	f04f 0300 	mov.w	r3, #0
 800184a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800184e:	4629      	mov	r1, r5
 8001850:	028b      	lsls	r3, r1, #10
 8001852:	4621      	mov	r1, r4
 8001854:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001858:	4621      	mov	r1, r4
 800185a:	028a      	lsls	r2, r1, #10
 800185c:	4610      	mov	r0, r2
 800185e:	4619      	mov	r1, r3
 8001860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001862:	2200      	movs	r2, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	60fa      	str	r2, [r7, #12]
 8001868:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800186c:	f7fe fd00 	bl	8000270 <__aeabi_uldivmod>
 8001870:	4602      	mov	r2, r0
 8001872:	460b      	mov	r3, r1
 8001874:	4613      	mov	r3, r2
 8001876:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001878:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	0c1b      	lsrs	r3, r3, #16
 800187e:	f003 0303 	and.w	r3, r3, #3
 8001882:	3301      	adds	r3, #1
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001888:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800188a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800188c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001890:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001892:	e002      	b.n	800189a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_RCC_GetSysClockFreq+0x184>)
 8001896:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001898:	bf00      	nop
    }
  }
  return sysclockfreq;
 800189a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800189c:	4618      	mov	r0, r3
 800189e:	3740      	adds	r7, #64	; 0x40
 80018a0:	46bd      	mov	sp, r7
 80018a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800
 80018ac:	00f42400 	.word	0x00f42400
 80018b0:	017d7840 	.word	0x017d7840

080018b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018b8:	4b03      	ldr	r3, [pc, #12]	; (80018c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	20000000 	.word	0x20000000

080018cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	; (80018ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0a9b      	lsrs	r3, r3, #10
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	; (80018f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08002bf0 	.word	0x08002bf0

080018f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018f8:	f7ff ffdc 	bl	80018b4 <HAL_RCC_GetHCLKFreq>
 80018fc:	4602      	mov	r2, r0
 80018fe:	4b05      	ldr	r3, [pc, #20]	; (8001914 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	0b5b      	lsrs	r3, r3, #13
 8001904:	f003 0307 	and.w	r3, r3, #7
 8001908:	4903      	ldr	r1, [pc, #12]	; (8001918 <HAL_RCC_GetPCLK2Freq+0x24>)
 800190a:	5ccb      	ldrb	r3, [r1, r3]
 800190c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001910:	4618      	mov	r0, r3
 8001912:	bd80      	pop	{r7, pc}
 8001914:	40023800 	.word	0x40023800
 8001918:	08002bf0 	.word	0x08002bf0

0800191c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d101      	bne.n	800192e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800192a:	2301      	movs	r3, #1
 800192c:	e042      	b.n	80019b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001934:	b2db      	uxtb	r3, r3
 8001936:	2b00      	cmp	r3, #0
 8001938:	d106      	bne.n	8001948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001942:	6878      	ldr	r0, [r7, #4]
 8001944:	f7fe ffa0 	bl	8000888 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2224      	movs	r2, #36	; 0x24
 800194c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800195e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001960:	6878      	ldr	r0, [r7, #4]
 8001962:	f000 fa09 	bl	8001d78 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	691a      	ldr	r2, [r3, #16]
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	695a      	ldr	r2, [r3, #20]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68da      	ldr	r2, [r3, #12]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	2200      	movs	r2, #0
 800199a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2220      	movs	r2, #32
 80019a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2220      	movs	r2, #32
 80019a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	2200      	movs	r2, #0
 80019b0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80019b2:	2300      	movs	r3, #0
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3708      	adds	r7, #8
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b08a      	sub	sp, #40	; 0x28
 80019c0:	af02      	add	r7, sp, #8
 80019c2:	60f8      	str	r0, [r7, #12]
 80019c4:	60b9      	str	r1, [r7, #8]
 80019c6:	603b      	str	r3, [r7, #0]
 80019c8:	4613      	mov	r3, r2
 80019ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80019cc:	2300      	movs	r3, #0
 80019ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019d6:	b2db      	uxtb	r3, r3
 80019d8:	2b20      	cmp	r3, #32
 80019da:	d175      	bne.n	8001ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80019dc:	68bb      	ldr	r3, [r7, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d002      	beq.n	80019e8 <HAL_UART_Transmit+0x2c>
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e06e      	b.n	8001aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	2200      	movs	r2, #0
 80019f0:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	2221      	movs	r2, #33	; 0x21
 80019f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80019fa:	f7ff f88f 	bl	8000b1c <HAL_GetTick>
 80019fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	88fa      	ldrh	r2, [r7, #6]
 8001a04:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	88fa      	ldrh	r2, [r7, #6]
 8001a0a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	689b      	ldr	r3, [r3, #8]
 8001a10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a14:	d108      	bne.n	8001a28 <HAL_UART_Transmit+0x6c>
 8001a16:	68fb      	ldr	r3, [r7, #12]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d104      	bne.n	8001a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	61bb      	str	r3, [r7, #24]
 8001a26:	e003      	b.n	8001a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001a28:	68bb      	ldr	r3, [r7, #8]
 8001a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001a30:	e02e      	b.n	8001a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	9300      	str	r3, [sp, #0]
 8001a36:	697b      	ldr	r3, [r7, #20]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2180      	movs	r1, #128	; 0x80
 8001a3c:	68f8      	ldr	r0, [r7, #12]
 8001a3e:	f000 f8df 	bl	8001c00 <UART_WaitOnFlagUntilTimeout>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e03a      	b.n	8001aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001a54:	69fb      	ldr	r3, [r7, #28]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d10b      	bne.n	8001a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	881b      	ldrh	r3, [r3, #0]
 8001a5e:	461a      	mov	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	3302      	adds	r3, #2
 8001a6e:	61bb      	str	r3, [r7, #24]
 8001a70:	e007      	b.n	8001a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001a72:	69fb      	ldr	r3, [r7, #28]
 8001a74:	781a      	ldrb	r2, [r3, #0]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001a7c:	69fb      	ldr	r3, [r7, #28]
 8001a7e:	3301      	adds	r3, #1
 8001a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a86:	b29b      	uxth	r3, r3
 8001a88:	3b01      	subs	r3, #1
 8001a8a:	b29a      	uxth	r2, r3
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1cb      	bne.n	8001a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	9300      	str	r3, [sp, #0]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	2140      	movs	r1, #64	; 0x40
 8001aa4:	68f8      	ldr	r0, [r7, #12]
 8001aa6:	f000 f8ab 	bl	8001c00 <UART_WaitOnFlagUntilTimeout>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d005      	beq.n	8001abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e006      	b.n	8001aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	e000      	b.n	8001aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001ac8:	2302      	movs	r3, #2
  }
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3720      	adds	r7, #32
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b08a      	sub	sp, #40	; 0x28
 8001ad6:	af02      	add	r7, sp, #8
 8001ad8:	60f8      	str	r0, [r7, #12]
 8001ada:	60b9      	str	r1, [r7, #8]
 8001adc:	603b      	str	r3, [r7, #0]
 8001ade:	4613      	mov	r3, r2
 8001ae0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	2b20      	cmp	r3, #32
 8001af0:	f040 8081 	bne.w	8001bf6 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d002      	beq.n	8001b00 <HAL_UART_Receive+0x2e>
 8001afa:	88fb      	ldrh	r3, [r7, #6]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d101      	bne.n	8001b04 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8001b00:	2301      	movs	r3, #1
 8001b02:	e079      	b.n	8001bf8 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2200      	movs	r2, #0
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2222      	movs	r2, #34	; 0x22
 8001b0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	2200      	movs	r2, #0
 8001b16:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001b18:	f7ff f800 	bl	8000b1c <HAL_GetTick>
 8001b1c:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	88fa      	ldrh	r2, [r7, #6]
 8001b22:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	88fa      	ldrh	r2, [r7, #6]
 8001b28:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	689b      	ldr	r3, [r3, #8]
 8001b2e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b32:	d108      	bne.n	8001b46 <HAL_UART_Receive+0x74>
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	691b      	ldr	r3, [r3, #16]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d104      	bne.n	8001b46 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8001b40:	68bb      	ldr	r3, [r7, #8]
 8001b42:	61bb      	str	r3, [r7, #24]
 8001b44:	e003      	b.n	8001b4e <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8001b46:	68bb      	ldr	r3, [r7, #8]
 8001b48:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8001b4e:	e047      	b.n	8001be0 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8001b50:	683b      	ldr	r3, [r7, #0]
 8001b52:	9300      	str	r3, [sp, #0]
 8001b54:	697b      	ldr	r3, [r7, #20]
 8001b56:	2200      	movs	r2, #0
 8001b58:	2120      	movs	r1, #32
 8001b5a:	68f8      	ldr	r0, [r7, #12]
 8001b5c:	f000 f850 	bl	8001c00 <UART_WaitOnFlagUntilTimeout>
 8001b60:	4603      	mov	r3, r0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d005      	beq.n	8001b72 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2220      	movs	r2, #32
 8001b6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        return HAL_TIMEOUT;
 8001b6e:	2303      	movs	r3, #3
 8001b70:	e042      	b.n	8001bf8 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d10c      	bne.n	8001b92 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	61bb      	str	r3, [r7, #24]
 8001b90:	e01f      	b.n	8001bd2 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b9a:	d007      	beq.n	8001bac <HAL_UART_Receive+0xda>
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d10a      	bne.n	8001bba <HAL_UART_Receive+0xe8>
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	691b      	ldr	r3, [r3, #16]
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d106      	bne.n	8001bba <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	b2da      	uxtb	r2, r3
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	701a      	strb	r2, [r3, #0]
 8001bb8:	e008      	b.n	8001bcc <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001bc6:	b2da      	uxtb	r2, r3
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3301      	adds	r3, #1
 8001bd0:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	3b01      	subs	r3, #1
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d1b2      	bne.n	8001b50 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	2220      	movs	r2, #32
 8001bee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    return HAL_OK;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e000      	b.n	8001bf8 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8001bf6:	2302      	movs	r3, #2
  }
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}

08001c00 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001c00:	b580      	push	{r7, lr}
 8001c02:	b086      	sub	sp, #24
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	60f8      	str	r0, [r7, #12]
 8001c08:	60b9      	str	r1, [r7, #8]
 8001c0a:	603b      	str	r3, [r7, #0]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c10:	e03b      	b.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c12:	6a3b      	ldr	r3, [r7, #32]
 8001c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c18:	d037      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c1a:	f7fe ff7f 	bl	8000b1c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	6a3a      	ldr	r2, [r7, #32]
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d302      	bcc.n	8001c30 <UART_WaitOnFlagUntilTimeout+0x30>
 8001c2a:	6a3b      	ldr	r3, [r7, #32]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d101      	bne.n	8001c34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001c30:	2303      	movs	r3, #3
 8001c32:	e03a      	b.n	8001caa <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	68db      	ldr	r3, [r3, #12]
 8001c3a:	f003 0304 	and.w	r3, r3, #4
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d023      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	2b80      	cmp	r3, #128	; 0x80
 8001c46:	d020      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8a>
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	2b40      	cmp	r3, #64	; 0x40
 8001c4c:	d01d      	beq.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b08      	cmp	r3, #8
 8001c5a:	d116      	bne.n	8001c8a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	617b      	str	r3, [r7, #20]
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	617b      	str	r3, [r7, #20]
 8001c70:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f81d 	bl	8001cb2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2208      	movs	r2, #8
 8001c7c:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2200      	movs	r2, #0
 8001c82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001c86:	2301      	movs	r3, #1
 8001c88:	e00f      	b.n	8001caa <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	68bb      	ldr	r3, [r7, #8]
 8001c92:	4013      	ands	r3, r2
 8001c94:	68ba      	ldr	r2, [r7, #8]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	bf0c      	ite	eq
 8001c9a:	2301      	moveq	r3, #1
 8001c9c:	2300      	movne	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	461a      	mov	r2, r3
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d0b4      	beq.n	8001c12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ca8:	2300      	movs	r3, #0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3718      	adds	r7, #24
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b095      	sub	sp, #84	; 0x54
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	330c      	adds	r3, #12
 8001cc0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001cc4:	e853 3f00 	ldrex	r3, [r3]
 8001cc8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8001cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ccc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8001cd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	330c      	adds	r3, #12
 8001cd8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001cda:	643a      	str	r2, [r7, #64]	; 0x40
 8001cdc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001cde:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001ce0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001ce2:	e841 2300 	strex	r3, r2, [r1]
 8001ce6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8001ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d1e5      	bne.n	8001cba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	3314      	adds	r3, #20
 8001cf4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001cf6:	6a3b      	ldr	r3, [r7, #32]
 8001cf8:	e853 3f00 	ldrex	r3, [r3]
 8001cfc:	61fb      	str	r3, [r7, #28]
   return(result);
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	f023 0301 	bic.w	r3, r3, #1
 8001d04:	64bb      	str	r3, [r7, #72]	; 0x48
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	3314      	adds	r3, #20
 8001d0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001d0e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001d10:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d14:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001d16:	e841 2300 	strex	r3, r2, [r1]
 8001d1a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d1e5      	bne.n	8001cee <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	d119      	bne.n	8001d5e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	330c      	adds	r3, #12
 8001d30:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	e853 3f00 	ldrex	r3, [r3]
 8001d38:	60bb      	str	r3, [r7, #8]
   return(result);
 8001d3a:	68bb      	ldr	r3, [r7, #8]
 8001d3c:	f023 0310 	bic.w	r3, r3, #16
 8001d40:	647b      	str	r3, [r7, #68]	; 0x44
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	330c      	adds	r3, #12
 8001d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001d4a:	61ba      	str	r2, [r7, #24]
 8001d4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001d4e:	6979      	ldr	r1, [r7, #20]
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	e841 2300 	strex	r3, r2, [r1]
 8001d56:	613b      	str	r3, [r7, #16]
   return(result);
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d1e5      	bne.n	8001d2a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001d6c:	bf00      	nop
 8001d6e:	3754      	adds	r7, #84	; 0x54
 8001d70:	46bd      	mov	sp, r7
 8001d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d76:	4770      	bx	lr

08001d78 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001d78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d7c:	b0c0      	sub	sp, #256	; 0x100
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	691b      	ldr	r3, [r3, #16]
 8001d8c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001d90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d94:	68d9      	ldr	r1, [r3, #12]
 8001d96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001d9a:	681a      	ldr	r2, [r3, #0]
 8001d9c:	ea40 0301 	orr.w	r3, r0, r1
 8001da0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001da2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001da6:	689a      	ldr	r2, [r3, #8]
 8001da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	431a      	orrs	r2, r3
 8001db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001db4:	695b      	ldr	r3, [r3, #20]
 8001db6:	431a      	orrs	r2, r3
 8001db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dbc:	69db      	ldr	r3, [r3, #28]
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	68db      	ldr	r3, [r3, #12]
 8001dcc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001dd0:	f021 010c 	bic.w	r1, r1, #12
 8001dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001dde:	430b      	orrs	r3, r1
 8001de0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	695b      	ldr	r3, [r3, #20]
 8001dea:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df2:	6999      	ldr	r1, [r3, #24]
 8001df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	ea40 0301 	orr.w	r3, r0, r1
 8001dfe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e04:	681a      	ldr	r2, [r3, #0]
 8001e06:	4b8f      	ldr	r3, [pc, #572]	; (8002044 <UART_SetConfig+0x2cc>)
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d005      	beq.n	8001e18 <UART_SetConfig+0xa0>
 8001e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	4b8d      	ldr	r3, [pc, #564]	; (8002048 <UART_SetConfig+0x2d0>)
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d104      	bne.n	8001e22 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001e18:	f7ff fd6c 	bl	80018f4 <HAL_RCC_GetPCLK2Freq>
 8001e1c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001e20:	e003      	b.n	8001e2a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001e22:	f7ff fd53 	bl	80018cc <HAL_RCC_GetPCLK1Freq>
 8001e26:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001e2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e2e:	69db      	ldr	r3, [r3, #28]
 8001e30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e34:	f040 810c 	bne.w	8002050 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001e38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001e42:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001e46:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001e4a:	4622      	mov	r2, r4
 8001e4c:	462b      	mov	r3, r5
 8001e4e:	1891      	adds	r1, r2, r2
 8001e50:	65b9      	str	r1, [r7, #88]	; 0x58
 8001e52:	415b      	adcs	r3, r3
 8001e54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e56:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001e5a:	4621      	mov	r1, r4
 8001e5c:	eb12 0801 	adds.w	r8, r2, r1
 8001e60:	4629      	mov	r1, r5
 8001e62:	eb43 0901 	adc.w	r9, r3, r1
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001e72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001e76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001e7a:	4690      	mov	r8, r2
 8001e7c:	4699      	mov	r9, r3
 8001e7e:	4623      	mov	r3, r4
 8001e80:	eb18 0303 	adds.w	r3, r8, r3
 8001e84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001e88:	462b      	mov	r3, r5
 8001e8a:	eb49 0303 	adc.w	r3, r9, r3
 8001e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001e92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e9e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001ea2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	18db      	adds	r3, r3, r3
 8001eaa:	653b      	str	r3, [r7, #80]	; 0x50
 8001eac:	4613      	mov	r3, r2
 8001eae:	eb42 0303 	adc.w	r3, r2, r3
 8001eb2:	657b      	str	r3, [r7, #84]	; 0x54
 8001eb4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001eb8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001ebc:	f7fe f9d8 	bl	8000270 <__aeabi_uldivmod>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	4b61      	ldr	r3, [pc, #388]	; (800204c <UART_SetConfig+0x2d4>)
 8001ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8001eca:	095b      	lsrs	r3, r3, #5
 8001ecc:	011c      	lsls	r4, r3, #4
 8001ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ed8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001edc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001ee0:	4642      	mov	r2, r8
 8001ee2:	464b      	mov	r3, r9
 8001ee4:	1891      	adds	r1, r2, r2
 8001ee6:	64b9      	str	r1, [r7, #72]	; 0x48
 8001ee8:	415b      	adcs	r3, r3
 8001eea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001eec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001ef0:	4641      	mov	r1, r8
 8001ef2:	eb12 0a01 	adds.w	sl, r2, r1
 8001ef6:	4649      	mov	r1, r9
 8001ef8:	eb43 0b01 	adc.w	fp, r3, r1
 8001efc:	f04f 0200 	mov.w	r2, #0
 8001f00:	f04f 0300 	mov.w	r3, #0
 8001f04:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001f08:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001f0c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001f10:	4692      	mov	sl, r2
 8001f12:	469b      	mov	fp, r3
 8001f14:	4643      	mov	r3, r8
 8001f16:	eb1a 0303 	adds.w	r3, sl, r3
 8001f1a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8001f1e:	464b      	mov	r3, r9
 8001f20:	eb4b 0303 	adc.w	r3, fp, r3
 8001f24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f2c:	685b      	ldr	r3, [r3, #4]
 8001f2e:	2200      	movs	r2, #0
 8001f30:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001f34:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001f38:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8001f3c:	460b      	mov	r3, r1
 8001f3e:	18db      	adds	r3, r3, r3
 8001f40:	643b      	str	r3, [r7, #64]	; 0x40
 8001f42:	4613      	mov	r3, r2
 8001f44:	eb42 0303 	adc.w	r3, r2, r3
 8001f48:	647b      	str	r3, [r7, #68]	; 0x44
 8001f4a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8001f4e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8001f52:	f7fe f98d 	bl	8000270 <__aeabi_uldivmod>
 8001f56:	4602      	mov	r2, r0
 8001f58:	460b      	mov	r3, r1
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4b3b      	ldr	r3, [pc, #236]	; (800204c <UART_SetConfig+0x2d4>)
 8001f5e:	fba3 2301 	umull	r2, r3, r3, r1
 8001f62:	095b      	lsrs	r3, r3, #5
 8001f64:	2264      	movs	r2, #100	; 0x64
 8001f66:	fb02 f303 	mul.w	r3, r2, r3
 8001f6a:	1acb      	subs	r3, r1, r3
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8001f72:	4b36      	ldr	r3, [pc, #216]	; (800204c <UART_SetConfig+0x2d4>)
 8001f74:	fba3 2302 	umull	r2, r3, r3, r2
 8001f78:	095b      	lsrs	r3, r3, #5
 8001f7a:	005b      	lsls	r3, r3, #1
 8001f7c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8001f80:	441c      	add	r4, r3
 8001f82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f86:	2200      	movs	r2, #0
 8001f88:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001f8c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8001f90:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8001f94:	4642      	mov	r2, r8
 8001f96:	464b      	mov	r3, r9
 8001f98:	1891      	adds	r1, r2, r2
 8001f9a:	63b9      	str	r1, [r7, #56]	; 0x38
 8001f9c:	415b      	adcs	r3, r3
 8001f9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001fa0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8001fa4:	4641      	mov	r1, r8
 8001fa6:	1851      	adds	r1, r2, r1
 8001fa8:	6339      	str	r1, [r7, #48]	; 0x30
 8001faa:	4649      	mov	r1, r9
 8001fac:	414b      	adcs	r3, r1
 8001fae:	637b      	str	r3, [r7, #52]	; 0x34
 8001fb0:	f04f 0200 	mov.w	r2, #0
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8001fbc:	4659      	mov	r1, fp
 8001fbe:	00cb      	lsls	r3, r1, #3
 8001fc0:	4651      	mov	r1, sl
 8001fc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001fc6:	4651      	mov	r1, sl
 8001fc8:	00ca      	lsls	r2, r1, #3
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	4642      	mov	r2, r8
 8001fd2:	189b      	adds	r3, r3, r2
 8001fd4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001fd8:	464b      	mov	r3, r9
 8001fda:	460a      	mov	r2, r1
 8001fdc:	eb42 0303 	adc.w	r3, r2, r3
 8001fe0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001fe4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	2200      	movs	r2, #0
 8001fec:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8001ff0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8001ff4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	18db      	adds	r3, r3, r3
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ffe:	4613      	mov	r3, r2
 8002000:	eb42 0303 	adc.w	r3, r2, r3
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002006:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800200a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800200e:	f7fe f92f 	bl	8000270 <__aeabi_uldivmod>
 8002012:	4602      	mov	r2, r0
 8002014:	460b      	mov	r3, r1
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <UART_SetConfig+0x2d4>)
 8002018:	fba3 1302 	umull	r1, r3, r3, r2
 800201c:	095b      	lsrs	r3, r3, #5
 800201e:	2164      	movs	r1, #100	; 0x64
 8002020:	fb01 f303 	mul.w	r3, r1, r3
 8002024:	1ad3      	subs	r3, r2, r3
 8002026:	00db      	lsls	r3, r3, #3
 8002028:	3332      	adds	r3, #50	; 0x32
 800202a:	4a08      	ldr	r2, [pc, #32]	; (800204c <UART_SetConfig+0x2d4>)
 800202c:	fba2 2303 	umull	r2, r3, r2, r3
 8002030:	095b      	lsrs	r3, r3, #5
 8002032:	f003 0207 	and.w	r2, r3, #7
 8002036:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4422      	add	r2, r4
 800203e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002040:	e106      	b.n	8002250 <UART_SetConfig+0x4d8>
 8002042:	bf00      	nop
 8002044:	40011000 	.word	0x40011000
 8002048:	40011400 	.word	0x40011400
 800204c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002050:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002054:	2200      	movs	r2, #0
 8002056:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800205a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800205e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8002062:	4642      	mov	r2, r8
 8002064:	464b      	mov	r3, r9
 8002066:	1891      	adds	r1, r2, r2
 8002068:	6239      	str	r1, [r7, #32]
 800206a:	415b      	adcs	r3, r3
 800206c:	627b      	str	r3, [r7, #36]	; 0x24
 800206e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002072:	4641      	mov	r1, r8
 8002074:	1854      	adds	r4, r2, r1
 8002076:	4649      	mov	r1, r9
 8002078:	eb43 0501 	adc.w	r5, r3, r1
 800207c:	f04f 0200 	mov.w	r2, #0
 8002080:	f04f 0300 	mov.w	r3, #0
 8002084:	00eb      	lsls	r3, r5, #3
 8002086:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800208a:	00e2      	lsls	r2, r4, #3
 800208c:	4614      	mov	r4, r2
 800208e:	461d      	mov	r5, r3
 8002090:	4643      	mov	r3, r8
 8002092:	18e3      	adds	r3, r4, r3
 8002094:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002098:	464b      	mov	r3, r9
 800209a:	eb45 0303 	adc.w	r3, r5, r3
 800209e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80020a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020a6:	685b      	ldr	r3, [r3, #4]
 80020a8:	2200      	movs	r2, #0
 80020aa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80020ae:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80020be:	4629      	mov	r1, r5
 80020c0:	008b      	lsls	r3, r1, #2
 80020c2:	4621      	mov	r1, r4
 80020c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80020c8:	4621      	mov	r1, r4
 80020ca:	008a      	lsls	r2, r1, #2
 80020cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80020d0:	f7fe f8ce 	bl	8000270 <__aeabi_uldivmod>
 80020d4:	4602      	mov	r2, r0
 80020d6:	460b      	mov	r3, r1
 80020d8:	4b60      	ldr	r3, [pc, #384]	; (800225c <UART_SetConfig+0x4e4>)
 80020da:	fba3 2302 	umull	r2, r3, r3, r2
 80020de:	095b      	lsrs	r3, r3, #5
 80020e0:	011c      	lsls	r4, r3, #4
 80020e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80020e6:	2200      	movs	r2, #0
 80020e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80020ec:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80020f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80020f4:	4642      	mov	r2, r8
 80020f6:	464b      	mov	r3, r9
 80020f8:	1891      	adds	r1, r2, r2
 80020fa:	61b9      	str	r1, [r7, #24]
 80020fc:	415b      	adcs	r3, r3
 80020fe:	61fb      	str	r3, [r7, #28]
 8002100:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002104:	4641      	mov	r1, r8
 8002106:	1851      	adds	r1, r2, r1
 8002108:	6139      	str	r1, [r7, #16]
 800210a:	4649      	mov	r1, r9
 800210c:	414b      	adcs	r3, r1
 800210e:	617b      	str	r3, [r7, #20]
 8002110:	f04f 0200 	mov.w	r2, #0
 8002114:	f04f 0300 	mov.w	r3, #0
 8002118:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800211c:	4659      	mov	r1, fp
 800211e:	00cb      	lsls	r3, r1, #3
 8002120:	4651      	mov	r1, sl
 8002122:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002126:	4651      	mov	r1, sl
 8002128:	00ca      	lsls	r2, r1, #3
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	4603      	mov	r3, r0
 8002130:	4642      	mov	r2, r8
 8002132:	189b      	adds	r3, r3, r2
 8002134:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002138:	464b      	mov	r3, r9
 800213a:	460a      	mov	r2, r1
 800213c:	eb42 0303 	adc.w	r3, r2, r3
 8002140:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	67bb      	str	r3, [r7, #120]	; 0x78
 800214e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002150:	f04f 0200 	mov.w	r2, #0
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800215c:	4649      	mov	r1, r9
 800215e:	008b      	lsls	r3, r1, #2
 8002160:	4641      	mov	r1, r8
 8002162:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002166:	4641      	mov	r1, r8
 8002168:	008a      	lsls	r2, r1, #2
 800216a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800216e:	f7fe f87f 	bl	8000270 <__aeabi_uldivmod>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4611      	mov	r1, r2
 8002178:	4b38      	ldr	r3, [pc, #224]	; (800225c <UART_SetConfig+0x4e4>)
 800217a:	fba3 2301 	umull	r2, r3, r3, r1
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2264      	movs	r2, #100	; 0x64
 8002182:	fb02 f303 	mul.w	r3, r2, r3
 8002186:	1acb      	subs	r3, r1, r3
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	3332      	adds	r3, #50	; 0x32
 800218c:	4a33      	ldr	r2, [pc, #204]	; (800225c <UART_SetConfig+0x4e4>)
 800218e:	fba2 2303 	umull	r2, r3, r2, r3
 8002192:	095b      	lsrs	r3, r3, #5
 8002194:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002198:	441c      	add	r4, r3
 800219a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800219e:	2200      	movs	r2, #0
 80021a0:	673b      	str	r3, [r7, #112]	; 0x70
 80021a2:	677a      	str	r2, [r7, #116]	; 0x74
 80021a4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80021a8:	4642      	mov	r2, r8
 80021aa:	464b      	mov	r3, r9
 80021ac:	1891      	adds	r1, r2, r2
 80021ae:	60b9      	str	r1, [r7, #8]
 80021b0:	415b      	adcs	r3, r3
 80021b2:	60fb      	str	r3, [r7, #12]
 80021b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80021b8:	4641      	mov	r1, r8
 80021ba:	1851      	adds	r1, r2, r1
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	4649      	mov	r1, r9
 80021c0:	414b      	adcs	r3, r1
 80021c2:	607b      	str	r3, [r7, #4]
 80021c4:	f04f 0200 	mov.w	r2, #0
 80021c8:	f04f 0300 	mov.w	r3, #0
 80021cc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80021d0:	4659      	mov	r1, fp
 80021d2:	00cb      	lsls	r3, r1, #3
 80021d4:	4651      	mov	r1, sl
 80021d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80021da:	4651      	mov	r1, sl
 80021dc:	00ca      	lsls	r2, r1, #3
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	4603      	mov	r3, r0
 80021e4:	4642      	mov	r2, r8
 80021e6:	189b      	adds	r3, r3, r2
 80021e8:	66bb      	str	r3, [r7, #104]	; 0x68
 80021ea:	464b      	mov	r3, r9
 80021ec:	460a      	mov	r2, r1
 80021ee:	eb42 0303 	adc.w	r3, r2, r3
 80021f2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80021f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	2200      	movs	r2, #0
 80021fc:	663b      	str	r3, [r7, #96]	; 0x60
 80021fe:	667a      	str	r2, [r7, #100]	; 0x64
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800220c:	4649      	mov	r1, r9
 800220e:	008b      	lsls	r3, r1, #2
 8002210:	4641      	mov	r1, r8
 8002212:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002216:	4641      	mov	r1, r8
 8002218:	008a      	lsls	r2, r1, #2
 800221a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800221e:	f7fe f827 	bl	8000270 <__aeabi_uldivmod>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4b0d      	ldr	r3, [pc, #52]	; (800225c <UART_SetConfig+0x4e4>)
 8002228:	fba3 1302 	umull	r1, r3, r3, r2
 800222c:	095b      	lsrs	r3, r3, #5
 800222e:	2164      	movs	r1, #100	; 0x64
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	1ad3      	subs	r3, r2, r3
 8002236:	011b      	lsls	r3, r3, #4
 8002238:	3332      	adds	r3, #50	; 0x32
 800223a:	4a08      	ldr	r2, [pc, #32]	; (800225c <UART_SetConfig+0x4e4>)
 800223c:	fba2 2303 	umull	r2, r3, r2, r3
 8002240:	095b      	lsrs	r3, r3, #5
 8002242:	f003 020f 	and.w	r2, r3, #15
 8002246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4422      	add	r2, r4
 800224e:	609a      	str	r2, [r3, #8]
}
 8002250:	bf00      	nop
 8002252:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002256:	46bd      	mov	sp, r7
 8002258:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800225c:	51eb851f 	.word	0x51eb851f

08002260 <siprintf>:
 8002260:	b40e      	push	{r1, r2, r3}
 8002262:	b500      	push	{lr}
 8002264:	b09c      	sub	sp, #112	; 0x70
 8002266:	ab1d      	add	r3, sp, #116	; 0x74
 8002268:	9002      	str	r0, [sp, #8]
 800226a:	9006      	str	r0, [sp, #24]
 800226c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8002270:	4809      	ldr	r0, [pc, #36]	; (8002298 <siprintf+0x38>)
 8002272:	9107      	str	r1, [sp, #28]
 8002274:	9104      	str	r1, [sp, #16]
 8002276:	4909      	ldr	r1, [pc, #36]	; (800229c <siprintf+0x3c>)
 8002278:	f853 2b04 	ldr.w	r2, [r3], #4
 800227c:	9105      	str	r1, [sp, #20]
 800227e:	6800      	ldr	r0, [r0, #0]
 8002280:	9301      	str	r3, [sp, #4]
 8002282:	a902      	add	r1, sp, #8
 8002284:	f000 f992 	bl	80025ac <_svfiprintf_r>
 8002288:	9b02      	ldr	r3, [sp, #8]
 800228a:	2200      	movs	r2, #0
 800228c:	701a      	strb	r2, [r3, #0]
 800228e:	b01c      	add	sp, #112	; 0x70
 8002290:	f85d eb04 	ldr.w	lr, [sp], #4
 8002294:	b003      	add	sp, #12
 8002296:	4770      	bx	lr
 8002298:	20000058 	.word	0x20000058
 800229c:	ffff0208 	.word	0xffff0208

080022a0 <memset>:
 80022a0:	4402      	add	r2, r0
 80022a2:	4603      	mov	r3, r0
 80022a4:	4293      	cmp	r3, r2
 80022a6:	d100      	bne.n	80022aa <memset+0xa>
 80022a8:	4770      	bx	lr
 80022aa:	f803 1b01 	strb.w	r1, [r3], #1
 80022ae:	e7f9      	b.n	80022a4 <memset+0x4>

080022b0 <__errno>:
 80022b0:	4b01      	ldr	r3, [pc, #4]	; (80022b8 <__errno+0x8>)
 80022b2:	6818      	ldr	r0, [r3, #0]
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	20000058 	.word	0x20000058

080022bc <__libc_init_array>:
 80022bc:	b570      	push	{r4, r5, r6, lr}
 80022be:	4d0d      	ldr	r5, [pc, #52]	; (80022f4 <__libc_init_array+0x38>)
 80022c0:	4c0d      	ldr	r4, [pc, #52]	; (80022f8 <__libc_init_array+0x3c>)
 80022c2:	1b64      	subs	r4, r4, r5
 80022c4:	10a4      	asrs	r4, r4, #2
 80022c6:	2600      	movs	r6, #0
 80022c8:	42a6      	cmp	r6, r4
 80022ca:	d109      	bne.n	80022e0 <__libc_init_array+0x24>
 80022cc:	4d0b      	ldr	r5, [pc, #44]	; (80022fc <__libc_init_array+0x40>)
 80022ce:	4c0c      	ldr	r4, [pc, #48]	; (8002300 <__libc_init_array+0x44>)
 80022d0:	f000 fc6a 	bl	8002ba8 <_init>
 80022d4:	1b64      	subs	r4, r4, r5
 80022d6:	10a4      	asrs	r4, r4, #2
 80022d8:	2600      	movs	r6, #0
 80022da:	42a6      	cmp	r6, r4
 80022dc:	d105      	bne.n	80022ea <__libc_init_array+0x2e>
 80022de:	bd70      	pop	{r4, r5, r6, pc}
 80022e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80022e4:	4798      	blx	r3
 80022e6:	3601      	adds	r6, #1
 80022e8:	e7ee      	b.n	80022c8 <__libc_init_array+0xc>
 80022ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80022ee:	4798      	blx	r3
 80022f0:	3601      	adds	r6, #1
 80022f2:	e7f2      	b.n	80022da <__libc_init_array+0x1e>
 80022f4:	08002c34 	.word	0x08002c34
 80022f8:	08002c34 	.word	0x08002c34
 80022fc:	08002c34 	.word	0x08002c34
 8002300:	08002c38 	.word	0x08002c38

08002304 <__retarget_lock_acquire_recursive>:
 8002304:	4770      	bx	lr

08002306 <__retarget_lock_release_recursive>:
 8002306:	4770      	bx	lr

08002308 <_free_r>:
 8002308:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800230a:	2900      	cmp	r1, #0
 800230c:	d044      	beq.n	8002398 <_free_r+0x90>
 800230e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002312:	9001      	str	r0, [sp, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	f1a1 0404 	sub.w	r4, r1, #4
 800231a:	bfb8      	it	lt
 800231c:	18e4      	addlt	r4, r4, r3
 800231e:	f000 f8df 	bl	80024e0 <__malloc_lock>
 8002322:	4a1e      	ldr	r2, [pc, #120]	; (800239c <_free_r+0x94>)
 8002324:	9801      	ldr	r0, [sp, #4]
 8002326:	6813      	ldr	r3, [r2, #0]
 8002328:	b933      	cbnz	r3, 8002338 <_free_r+0x30>
 800232a:	6063      	str	r3, [r4, #4]
 800232c:	6014      	str	r4, [r2, #0]
 800232e:	b003      	add	sp, #12
 8002330:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002334:	f000 b8da 	b.w	80024ec <__malloc_unlock>
 8002338:	42a3      	cmp	r3, r4
 800233a:	d908      	bls.n	800234e <_free_r+0x46>
 800233c:	6825      	ldr	r5, [r4, #0]
 800233e:	1961      	adds	r1, r4, r5
 8002340:	428b      	cmp	r3, r1
 8002342:	bf01      	itttt	eq
 8002344:	6819      	ldreq	r1, [r3, #0]
 8002346:	685b      	ldreq	r3, [r3, #4]
 8002348:	1949      	addeq	r1, r1, r5
 800234a:	6021      	streq	r1, [r4, #0]
 800234c:	e7ed      	b.n	800232a <_free_r+0x22>
 800234e:	461a      	mov	r2, r3
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	b10b      	cbz	r3, 8002358 <_free_r+0x50>
 8002354:	42a3      	cmp	r3, r4
 8002356:	d9fa      	bls.n	800234e <_free_r+0x46>
 8002358:	6811      	ldr	r1, [r2, #0]
 800235a:	1855      	adds	r5, r2, r1
 800235c:	42a5      	cmp	r5, r4
 800235e:	d10b      	bne.n	8002378 <_free_r+0x70>
 8002360:	6824      	ldr	r4, [r4, #0]
 8002362:	4421      	add	r1, r4
 8002364:	1854      	adds	r4, r2, r1
 8002366:	42a3      	cmp	r3, r4
 8002368:	6011      	str	r1, [r2, #0]
 800236a:	d1e0      	bne.n	800232e <_free_r+0x26>
 800236c:	681c      	ldr	r4, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	6053      	str	r3, [r2, #4]
 8002372:	440c      	add	r4, r1
 8002374:	6014      	str	r4, [r2, #0]
 8002376:	e7da      	b.n	800232e <_free_r+0x26>
 8002378:	d902      	bls.n	8002380 <_free_r+0x78>
 800237a:	230c      	movs	r3, #12
 800237c:	6003      	str	r3, [r0, #0]
 800237e:	e7d6      	b.n	800232e <_free_r+0x26>
 8002380:	6825      	ldr	r5, [r4, #0]
 8002382:	1961      	adds	r1, r4, r5
 8002384:	428b      	cmp	r3, r1
 8002386:	bf04      	itt	eq
 8002388:	6819      	ldreq	r1, [r3, #0]
 800238a:	685b      	ldreq	r3, [r3, #4]
 800238c:	6063      	str	r3, [r4, #4]
 800238e:	bf04      	itt	eq
 8002390:	1949      	addeq	r1, r1, r5
 8002392:	6021      	streq	r1, [r4, #0]
 8002394:	6054      	str	r4, [r2, #4]
 8002396:	e7ca      	b.n	800232e <_free_r+0x26>
 8002398:	b003      	add	sp, #12
 800239a:	bd30      	pop	{r4, r5, pc}
 800239c:	20000270 	.word	0x20000270

080023a0 <sbrk_aligned>:
 80023a0:	b570      	push	{r4, r5, r6, lr}
 80023a2:	4e0e      	ldr	r6, [pc, #56]	; (80023dc <sbrk_aligned+0x3c>)
 80023a4:	460c      	mov	r4, r1
 80023a6:	6831      	ldr	r1, [r6, #0]
 80023a8:	4605      	mov	r5, r0
 80023aa:	b911      	cbnz	r1, 80023b2 <sbrk_aligned+0x12>
 80023ac:	f000 fba6 	bl	8002afc <_sbrk_r>
 80023b0:	6030      	str	r0, [r6, #0]
 80023b2:	4621      	mov	r1, r4
 80023b4:	4628      	mov	r0, r5
 80023b6:	f000 fba1 	bl	8002afc <_sbrk_r>
 80023ba:	1c43      	adds	r3, r0, #1
 80023bc:	d00a      	beq.n	80023d4 <sbrk_aligned+0x34>
 80023be:	1cc4      	adds	r4, r0, #3
 80023c0:	f024 0403 	bic.w	r4, r4, #3
 80023c4:	42a0      	cmp	r0, r4
 80023c6:	d007      	beq.n	80023d8 <sbrk_aligned+0x38>
 80023c8:	1a21      	subs	r1, r4, r0
 80023ca:	4628      	mov	r0, r5
 80023cc:	f000 fb96 	bl	8002afc <_sbrk_r>
 80023d0:	3001      	adds	r0, #1
 80023d2:	d101      	bne.n	80023d8 <sbrk_aligned+0x38>
 80023d4:	f04f 34ff 	mov.w	r4, #4294967295
 80023d8:	4620      	mov	r0, r4
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	20000274 	.word	0x20000274

080023e0 <_malloc_r>:
 80023e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023e4:	1ccd      	adds	r5, r1, #3
 80023e6:	f025 0503 	bic.w	r5, r5, #3
 80023ea:	3508      	adds	r5, #8
 80023ec:	2d0c      	cmp	r5, #12
 80023ee:	bf38      	it	cc
 80023f0:	250c      	movcc	r5, #12
 80023f2:	2d00      	cmp	r5, #0
 80023f4:	4607      	mov	r7, r0
 80023f6:	db01      	blt.n	80023fc <_malloc_r+0x1c>
 80023f8:	42a9      	cmp	r1, r5
 80023fa:	d905      	bls.n	8002408 <_malloc_r+0x28>
 80023fc:	230c      	movs	r3, #12
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	2600      	movs	r6, #0
 8002402:	4630      	mov	r0, r6
 8002404:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002408:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80024dc <_malloc_r+0xfc>
 800240c:	f000 f868 	bl	80024e0 <__malloc_lock>
 8002410:	f8d8 3000 	ldr.w	r3, [r8]
 8002414:	461c      	mov	r4, r3
 8002416:	bb5c      	cbnz	r4, 8002470 <_malloc_r+0x90>
 8002418:	4629      	mov	r1, r5
 800241a:	4638      	mov	r0, r7
 800241c:	f7ff ffc0 	bl	80023a0 <sbrk_aligned>
 8002420:	1c43      	adds	r3, r0, #1
 8002422:	4604      	mov	r4, r0
 8002424:	d155      	bne.n	80024d2 <_malloc_r+0xf2>
 8002426:	f8d8 4000 	ldr.w	r4, [r8]
 800242a:	4626      	mov	r6, r4
 800242c:	2e00      	cmp	r6, #0
 800242e:	d145      	bne.n	80024bc <_malloc_r+0xdc>
 8002430:	2c00      	cmp	r4, #0
 8002432:	d048      	beq.n	80024c6 <_malloc_r+0xe6>
 8002434:	6823      	ldr	r3, [r4, #0]
 8002436:	4631      	mov	r1, r6
 8002438:	4638      	mov	r0, r7
 800243a:	eb04 0903 	add.w	r9, r4, r3
 800243e:	f000 fb5d 	bl	8002afc <_sbrk_r>
 8002442:	4581      	cmp	r9, r0
 8002444:	d13f      	bne.n	80024c6 <_malloc_r+0xe6>
 8002446:	6821      	ldr	r1, [r4, #0]
 8002448:	1a6d      	subs	r5, r5, r1
 800244a:	4629      	mov	r1, r5
 800244c:	4638      	mov	r0, r7
 800244e:	f7ff ffa7 	bl	80023a0 <sbrk_aligned>
 8002452:	3001      	adds	r0, #1
 8002454:	d037      	beq.n	80024c6 <_malloc_r+0xe6>
 8002456:	6823      	ldr	r3, [r4, #0]
 8002458:	442b      	add	r3, r5
 800245a:	6023      	str	r3, [r4, #0]
 800245c:	f8d8 3000 	ldr.w	r3, [r8]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d038      	beq.n	80024d6 <_malloc_r+0xf6>
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	42a2      	cmp	r2, r4
 8002468:	d12b      	bne.n	80024c2 <_malloc_r+0xe2>
 800246a:	2200      	movs	r2, #0
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	e00f      	b.n	8002490 <_malloc_r+0xb0>
 8002470:	6822      	ldr	r2, [r4, #0]
 8002472:	1b52      	subs	r2, r2, r5
 8002474:	d41f      	bmi.n	80024b6 <_malloc_r+0xd6>
 8002476:	2a0b      	cmp	r2, #11
 8002478:	d917      	bls.n	80024aa <_malloc_r+0xca>
 800247a:	1961      	adds	r1, r4, r5
 800247c:	42a3      	cmp	r3, r4
 800247e:	6025      	str	r5, [r4, #0]
 8002480:	bf18      	it	ne
 8002482:	6059      	strne	r1, [r3, #4]
 8002484:	6863      	ldr	r3, [r4, #4]
 8002486:	bf08      	it	eq
 8002488:	f8c8 1000 	streq.w	r1, [r8]
 800248c:	5162      	str	r2, [r4, r5]
 800248e:	604b      	str	r3, [r1, #4]
 8002490:	4638      	mov	r0, r7
 8002492:	f104 060b 	add.w	r6, r4, #11
 8002496:	f000 f829 	bl	80024ec <__malloc_unlock>
 800249a:	f026 0607 	bic.w	r6, r6, #7
 800249e:	1d23      	adds	r3, r4, #4
 80024a0:	1af2      	subs	r2, r6, r3
 80024a2:	d0ae      	beq.n	8002402 <_malloc_r+0x22>
 80024a4:	1b9b      	subs	r3, r3, r6
 80024a6:	50a3      	str	r3, [r4, r2]
 80024a8:	e7ab      	b.n	8002402 <_malloc_r+0x22>
 80024aa:	42a3      	cmp	r3, r4
 80024ac:	6862      	ldr	r2, [r4, #4]
 80024ae:	d1dd      	bne.n	800246c <_malloc_r+0x8c>
 80024b0:	f8c8 2000 	str.w	r2, [r8]
 80024b4:	e7ec      	b.n	8002490 <_malloc_r+0xb0>
 80024b6:	4623      	mov	r3, r4
 80024b8:	6864      	ldr	r4, [r4, #4]
 80024ba:	e7ac      	b.n	8002416 <_malloc_r+0x36>
 80024bc:	4634      	mov	r4, r6
 80024be:	6876      	ldr	r6, [r6, #4]
 80024c0:	e7b4      	b.n	800242c <_malloc_r+0x4c>
 80024c2:	4613      	mov	r3, r2
 80024c4:	e7cc      	b.n	8002460 <_malloc_r+0x80>
 80024c6:	230c      	movs	r3, #12
 80024c8:	603b      	str	r3, [r7, #0]
 80024ca:	4638      	mov	r0, r7
 80024cc:	f000 f80e 	bl	80024ec <__malloc_unlock>
 80024d0:	e797      	b.n	8002402 <_malloc_r+0x22>
 80024d2:	6025      	str	r5, [r4, #0]
 80024d4:	e7dc      	b.n	8002490 <_malloc_r+0xb0>
 80024d6:	605b      	str	r3, [r3, #4]
 80024d8:	deff      	udf	#255	; 0xff
 80024da:	bf00      	nop
 80024dc:	20000270 	.word	0x20000270

080024e0 <__malloc_lock>:
 80024e0:	4801      	ldr	r0, [pc, #4]	; (80024e8 <__malloc_lock+0x8>)
 80024e2:	f7ff bf0f 	b.w	8002304 <__retarget_lock_acquire_recursive>
 80024e6:	bf00      	nop
 80024e8:	2000026c 	.word	0x2000026c

080024ec <__malloc_unlock>:
 80024ec:	4801      	ldr	r0, [pc, #4]	; (80024f4 <__malloc_unlock+0x8>)
 80024ee:	f7ff bf0a 	b.w	8002306 <__retarget_lock_release_recursive>
 80024f2:	bf00      	nop
 80024f4:	2000026c 	.word	0x2000026c

080024f8 <__ssputs_r>:
 80024f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80024fc:	688e      	ldr	r6, [r1, #8]
 80024fe:	461f      	mov	r7, r3
 8002500:	42be      	cmp	r6, r7
 8002502:	680b      	ldr	r3, [r1, #0]
 8002504:	4682      	mov	sl, r0
 8002506:	460c      	mov	r4, r1
 8002508:	4690      	mov	r8, r2
 800250a:	d82c      	bhi.n	8002566 <__ssputs_r+0x6e>
 800250c:	898a      	ldrh	r2, [r1, #12]
 800250e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8002512:	d026      	beq.n	8002562 <__ssputs_r+0x6a>
 8002514:	6965      	ldr	r5, [r4, #20]
 8002516:	6909      	ldr	r1, [r1, #16]
 8002518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800251c:	eba3 0901 	sub.w	r9, r3, r1
 8002520:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8002524:	1c7b      	adds	r3, r7, #1
 8002526:	444b      	add	r3, r9
 8002528:	106d      	asrs	r5, r5, #1
 800252a:	429d      	cmp	r5, r3
 800252c:	bf38      	it	cc
 800252e:	461d      	movcc	r5, r3
 8002530:	0553      	lsls	r3, r2, #21
 8002532:	d527      	bpl.n	8002584 <__ssputs_r+0x8c>
 8002534:	4629      	mov	r1, r5
 8002536:	f7ff ff53 	bl	80023e0 <_malloc_r>
 800253a:	4606      	mov	r6, r0
 800253c:	b360      	cbz	r0, 8002598 <__ssputs_r+0xa0>
 800253e:	6921      	ldr	r1, [r4, #16]
 8002540:	464a      	mov	r2, r9
 8002542:	f000 faeb 	bl	8002b1c <memcpy>
 8002546:	89a3      	ldrh	r3, [r4, #12]
 8002548:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800254c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002550:	81a3      	strh	r3, [r4, #12]
 8002552:	6126      	str	r6, [r4, #16]
 8002554:	6165      	str	r5, [r4, #20]
 8002556:	444e      	add	r6, r9
 8002558:	eba5 0509 	sub.w	r5, r5, r9
 800255c:	6026      	str	r6, [r4, #0]
 800255e:	60a5      	str	r5, [r4, #8]
 8002560:	463e      	mov	r6, r7
 8002562:	42be      	cmp	r6, r7
 8002564:	d900      	bls.n	8002568 <__ssputs_r+0x70>
 8002566:	463e      	mov	r6, r7
 8002568:	6820      	ldr	r0, [r4, #0]
 800256a:	4632      	mov	r2, r6
 800256c:	4641      	mov	r1, r8
 800256e:	f000 faab 	bl	8002ac8 <memmove>
 8002572:	68a3      	ldr	r3, [r4, #8]
 8002574:	1b9b      	subs	r3, r3, r6
 8002576:	60a3      	str	r3, [r4, #8]
 8002578:	6823      	ldr	r3, [r4, #0]
 800257a:	4433      	add	r3, r6
 800257c:	6023      	str	r3, [r4, #0]
 800257e:	2000      	movs	r0, #0
 8002580:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002584:	462a      	mov	r2, r5
 8002586:	f000 fad7 	bl	8002b38 <_realloc_r>
 800258a:	4606      	mov	r6, r0
 800258c:	2800      	cmp	r0, #0
 800258e:	d1e0      	bne.n	8002552 <__ssputs_r+0x5a>
 8002590:	6921      	ldr	r1, [r4, #16]
 8002592:	4650      	mov	r0, sl
 8002594:	f7ff feb8 	bl	8002308 <_free_r>
 8002598:	230c      	movs	r3, #12
 800259a:	f8ca 3000 	str.w	r3, [sl]
 800259e:	89a3      	ldrh	r3, [r4, #12]
 80025a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80025a4:	81a3      	strh	r3, [r4, #12]
 80025a6:	f04f 30ff 	mov.w	r0, #4294967295
 80025aa:	e7e9      	b.n	8002580 <__ssputs_r+0x88>

080025ac <_svfiprintf_r>:
 80025ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025b0:	4698      	mov	r8, r3
 80025b2:	898b      	ldrh	r3, [r1, #12]
 80025b4:	061b      	lsls	r3, r3, #24
 80025b6:	b09d      	sub	sp, #116	; 0x74
 80025b8:	4607      	mov	r7, r0
 80025ba:	460d      	mov	r5, r1
 80025bc:	4614      	mov	r4, r2
 80025be:	d50e      	bpl.n	80025de <_svfiprintf_r+0x32>
 80025c0:	690b      	ldr	r3, [r1, #16]
 80025c2:	b963      	cbnz	r3, 80025de <_svfiprintf_r+0x32>
 80025c4:	2140      	movs	r1, #64	; 0x40
 80025c6:	f7ff ff0b 	bl	80023e0 <_malloc_r>
 80025ca:	6028      	str	r0, [r5, #0]
 80025cc:	6128      	str	r0, [r5, #16]
 80025ce:	b920      	cbnz	r0, 80025da <_svfiprintf_r+0x2e>
 80025d0:	230c      	movs	r3, #12
 80025d2:	603b      	str	r3, [r7, #0]
 80025d4:	f04f 30ff 	mov.w	r0, #4294967295
 80025d8:	e0d0      	b.n	800277c <_svfiprintf_r+0x1d0>
 80025da:	2340      	movs	r3, #64	; 0x40
 80025dc:	616b      	str	r3, [r5, #20]
 80025de:	2300      	movs	r3, #0
 80025e0:	9309      	str	r3, [sp, #36]	; 0x24
 80025e2:	2320      	movs	r3, #32
 80025e4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80025e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80025ec:	2330      	movs	r3, #48	; 0x30
 80025ee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8002794 <_svfiprintf_r+0x1e8>
 80025f2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80025f6:	f04f 0901 	mov.w	r9, #1
 80025fa:	4623      	mov	r3, r4
 80025fc:	469a      	mov	sl, r3
 80025fe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002602:	b10a      	cbz	r2, 8002608 <_svfiprintf_r+0x5c>
 8002604:	2a25      	cmp	r2, #37	; 0x25
 8002606:	d1f9      	bne.n	80025fc <_svfiprintf_r+0x50>
 8002608:	ebba 0b04 	subs.w	fp, sl, r4
 800260c:	d00b      	beq.n	8002626 <_svfiprintf_r+0x7a>
 800260e:	465b      	mov	r3, fp
 8002610:	4622      	mov	r2, r4
 8002612:	4629      	mov	r1, r5
 8002614:	4638      	mov	r0, r7
 8002616:	f7ff ff6f 	bl	80024f8 <__ssputs_r>
 800261a:	3001      	adds	r0, #1
 800261c:	f000 80a9 	beq.w	8002772 <_svfiprintf_r+0x1c6>
 8002620:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002622:	445a      	add	r2, fp
 8002624:	9209      	str	r2, [sp, #36]	; 0x24
 8002626:	f89a 3000 	ldrb.w	r3, [sl]
 800262a:	2b00      	cmp	r3, #0
 800262c:	f000 80a1 	beq.w	8002772 <_svfiprintf_r+0x1c6>
 8002630:	2300      	movs	r3, #0
 8002632:	f04f 32ff 	mov.w	r2, #4294967295
 8002636:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800263a:	f10a 0a01 	add.w	sl, sl, #1
 800263e:	9304      	str	r3, [sp, #16]
 8002640:	9307      	str	r3, [sp, #28]
 8002642:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002646:	931a      	str	r3, [sp, #104]	; 0x68
 8002648:	4654      	mov	r4, sl
 800264a:	2205      	movs	r2, #5
 800264c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002650:	4850      	ldr	r0, [pc, #320]	; (8002794 <_svfiprintf_r+0x1e8>)
 8002652:	f7fd fdbd 	bl	80001d0 <memchr>
 8002656:	9a04      	ldr	r2, [sp, #16]
 8002658:	b9d8      	cbnz	r0, 8002692 <_svfiprintf_r+0xe6>
 800265a:	06d0      	lsls	r0, r2, #27
 800265c:	bf44      	itt	mi
 800265e:	2320      	movmi	r3, #32
 8002660:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8002664:	0711      	lsls	r1, r2, #28
 8002666:	bf44      	itt	mi
 8002668:	232b      	movmi	r3, #43	; 0x2b
 800266a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800266e:	f89a 3000 	ldrb.w	r3, [sl]
 8002672:	2b2a      	cmp	r3, #42	; 0x2a
 8002674:	d015      	beq.n	80026a2 <_svfiprintf_r+0xf6>
 8002676:	9a07      	ldr	r2, [sp, #28]
 8002678:	4654      	mov	r4, sl
 800267a:	2000      	movs	r0, #0
 800267c:	f04f 0c0a 	mov.w	ip, #10
 8002680:	4621      	mov	r1, r4
 8002682:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002686:	3b30      	subs	r3, #48	; 0x30
 8002688:	2b09      	cmp	r3, #9
 800268a:	d94d      	bls.n	8002728 <_svfiprintf_r+0x17c>
 800268c:	b1b0      	cbz	r0, 80026bc <_svfiprintf_r+0x110>
 800268e:	9207      	str	r2, [sp, #28]
 8002690:	e014      	b.n	80026bc <_svfiprintf_r+0x110>
 8002692:	eba0 0308 	sub.w	r3, r0, r8
 8002696:	fa09 f303 	lsl.w	r3, r9, r3
 800269a:	4313      	orrs	r3, r2
 800269c:	9304      	str	r3, [sp, #16]
 800269e:	46a2      	mov	sl, r4
 80026a0:	e7d2      	b.n	8002648 <_svfiprintf_r+0x9c>
 80026a2:	9b03      	ldr	r3, [sp, #12]
 80026a4:	1d19      	adds	r1, r3, #4
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	9103      	str	r1, [sp, #12]
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	bfbb      	ittet	lt
 80026ae:	425b      	neglt	r3, r3
 80026b0:	f042 0202 	orrlt.w	r2, r2, #2
 80026b4:	9307      	strge	r3, [sp, #28]
 80026b6:	9307      	strlt	r3, [sp, #28]
 80026b8:	bfb8      	it	lt
 80026ba:	9204      	strlt	r2, [sp, #16]
 80026bc:	7823      	ldrb	r3, [r4, #0]
 80026be:	2b2e      	cmp	r3, #46	; 0x2e
 80026c0:	d10c      	bne.n	80026dc <_svfiprintf_r+0x130>
 80026c2:	7863      	ldrb	r3, [r4, #1]
 80026c4:	2b2a      	cmp	r3, #42	; 0x2a
 80026c6:	d134      	bne.n	8002732 <_svfiprintf_r+0x186>
 80026c8:	9b03      	ldr	r3, [sp, #12]
 80026ca:	1d1a      	adds	r2, r3, #4
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	9203      	str	r2, [sp, #12]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	bfb8      	it	lt
 80026d4:	f04f 33ff 	movlt.w	r3, #4294967295
 80026d8:	3402      	adds	r4, #2
 80026da:	9305      	str	r3, [sp, #20]
 80026dc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80027a4 <_svfiprintf_r+0x1f8>
 80026e0:	7821      	ldrb	r1, [r4, #0]
 80026e2:	2203      	movs	r2, #3
 80026e4:	4650      	mov	r0, sl
 80026e6:	f7fd fd73 	bl	80001d0 <memchr>
 80026ea:	b138      	cbz	r0, 80026fc <_svfiprintf_r+0x150>
 80026ec:	9b04      	ldr	r3, [sp, #16]
 80026ee:	eba0 000a 	sub.w	r0, r0, sl
 80026f2:	2240      	movs	r2, #64	; 0x40
 80026f4:	4082      	lsls	r2, r0
 80026f6:	4313      	orrs	r3, r2
 80026f8:	3401      	adds	r4, #1
 80026fa:	9304      	str	r3, [sp, #16]
 80026fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002700:	4825      	ldr	r0, [pc, #148]	; (8002798 <_svfiprintf_r+0x1ec>)
 8002702:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002706:	2206      	movs	r2, #6
 8002708:	f7fd fd62 	bl	80001d0 <memchr>
 800270c:	2800      	cmp	r0, #0
 800270e:	d038      	beq.n	8002782 <_svfiprintf_r+0x1d6>
 8002710:	4b22      	ldr	r3, [pc, #136]	; (800279c <_svfiprintf_r+0x1f0>)
 8002712:	bb1b      	cbnz	r3, 800275c <_svfiprintf_r+0x1b0>
 8002714:	9b03      	ldr	r3, [sp, #12]
 8002716:	3307      	adds	r3, #7
 8002718:	f023 0307 	bic.w	r3, r3, #7
 800271c:	3308      	adds	r3, #8
 800271e:	9303      	str	r3, [sp, #12]
 8002720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002722:	4433      	add	r3, r6
 8002724:	9309      	str	r3, [sp, #36]	; 0x24
 8002726:	e768      	b.n	80025fa <_svfiprintf_r+0x4e>
 8002728:	fb0c 3202 	mla	r2, ip, r2, r3
 800272c:	460c      	mov	r4, r1
 800272e:	2001      	movs	r0, #1
 8002730:	e7a6      	b.n	8002680 <_svfiprintf_r+0xd4>
 8002732:	2300      	movs	r3, #0
 8002734:	3401      	adds	r4, #1
 8002736:	9305      	str	r3, [sp, #20]
 8002738:	4619      	mov	r1, r3
 800273a:	f04f 0c0a 	mov.w	ip, #10
 800273e:	4620      	mov	r0, r4
 8002740:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002744:	3a30      	subs	r2, #48	; 0x30
 8002746:	2a09      	cmp	r2, #9
 8002748:	d903      	bls.n	8002752 <_svfiprintf_r+0x1a6>
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0c6      	beq.n	80026dc <_svfiprintf_r+0x130>
 800274e:	9105      	str	r1, [sp, #20]
 8002750:	e7c4      	b.n	80026dc <_svfiprintf_r+0x130>
 8002752:	fb0c 2101 	mla	r1, ip, r1, r2
 8002756:	4604      	mov	r4, r0
 8002758:	2301      	movs	r3, #1
 800275a:	e7f0      	b.n	800273e <_svfiprintf_r+0x192>
 800275c:	ab03      	add	r3, sp, #12
 800275e:	9300      	str	r3, [sp, #0]
 8002760:	462a      	mov	r2, r5
 8002762:	4b0f      	ldr	r3, [pc, #60]	; (80027a0 <_svfiprintf_r+0x1f4>)
 8002764:	a904      	add	r1, sp, #16
 8002766:	4638      	mov	r0, r7
 8002768:	f3af 8000 	nop.w
 800276c:	1c42      	adds	r2, r0, #1
 800276e:	4606      	mov	r6, r0
 8002770:	d1d6      	bne.n	8002720 <_svfiprintf_r+0x174>
 8002772:	89ab      	ldrh	r3, [r5, #12]
 8002774:	065b      	lsls	r3, r3, #25
 8002776:	f53f af2d 	bmi.w	80025d4 <_svfiprintf_r+0x28>
 800277a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800277c:	b01d      	add	sp, #116	; 0x74
 800277e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002782:	ab03      	add	r3, sp, #12
 8002784:	9300      	str	r3, [sp, #0]
 8002786:	462a      	mov	r2, r5
 8002788:	4b05      	ldr	r3, [pc, #20]	; (80027a0 <_svfiprintf_r+0x1f4>)
 800278a:	a904      	add	r1, sp, #16
 800278c:	4638      	mov	r0, r7
 800278e:	f000 f879 	bl	8002884 <_printf_i>
 8002792:	e7eb      	b.n	800276c <_svfiprintf_r+0x1c0>
 8002794:	08002bf8 	.word	0x08002bf8
 8002798:	08002c02 	.word	0x08002c02
 800279c:	00000000 	.word	0x00000000
 80027a0:	080024f9 	.word	0x080024f9
 80027a4:	08002bfe 	.word	0x08002bfe

080027a8 <_printf_common>:
 80027a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027ac:	4616      	mov	r6, r2
 80027ae:	4699      	mov	r9, r3
 80027b0:	688a      	ldr	r2, [r1, #8]
 80027b2:	690b      	ldr	r3, [r1, #16]
 80027b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80027b8:	4293      	cmp	r3, r2
 80027ba:	bfb8      	it	lt
 80027bc:	4613      	movlt	r3, r2
 80027be:	6033      	str	r3, [r6, #0]
 80027c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80027c4:	4607      	mov	r7, r0
 80027c6:	460c      	mov	r4, r1
 80027c8:	b10a      	cbz	r2, 80027ce <_printf_common+0x26>
 80027ca:	3301      	adds	r3, #1
 80027cc:	6033      	str	r3, [r6, #0]
 80027ce:	6823      	ldr	r3, [r4, #0]
 80027d0:	0699      	lsls	r1, r3, #26
 80027d2:	bf42      	ittt	mi
 80027d4:	6833      	ldrmi	r3, [r6, #0]
 80027d6:	3302      	addmi	r3, #2
 80027d8:	6033      	strmi	r3, [r6, #0]
 80027da:	6825      	ldr	r5, [r4, #0]
 80027dc:	f015 0506 	ands.w	r5, r5, #6
 80027e0:	d106      	bne.n	80027f0 <_printf_common+0x48>
 80027e2:	f104 0a19 	add.w	sl, r4, #25
 80027e6:	68e3      	ldr	r3, [r4, #12]
 80027e8:	6832      	ldr	r2, [r6, #0]
 80027ea:	1a9b      	subs	r3, r3, r2
 80027ec:	42ab      	cmp	r3, r5
 80027ee:	dc26      	bgt.n	800283e <_printf_common+0x96>
 80027f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80027f4:	1e13      	subs	r3, r2, #0
 80027f6:	6822      	ldr	r2, [r4, #0]
 80027f8:	bf18      	it	ne
 80027fa:	2301      	movne	r3, #1
 80027fc:	0692      	lsls	r2, r2, #26
 80027fe:	d42b      	bmi.n	8002858 <_printf_common+0xb0>
 8002800:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002804:	4649      	mov	r1, r9
 8002806:	4638      	mov	r0, r7
 8002808:	47c0      	blx	r8
 800280a:	3001      	adds	r0, #1
 800280c:	d01e      	beq.n	800284c <_printf_common+0xa4>
 800280e:	6823      	ldr	r3, [r4, #0]
 8002810:	6922      	ldr	r2, [r4, #16]
 8002812:	f003 0306 	and.w	r3, r3, #6
 8002816:	2b04      	cmp	r3, #4
 8002818:	bf02      	ittt	eq
 800281a:	68e5      	ldreq	r5, [r4, #12]
 800281c:	6833      	ldreq	r3, [r6, #0]
 800281e:	1aed      	subeq	r5, r5, r3
 8002820:	68a3      	ldr	r3, [r4, #8]
 8002822:	bf0c      	ite	eq
 8002824:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002828:	2500      	movne	r5, #0
 800282a:	4293      	cmp	r3, r2
 800282c:	bfc4      	itt	gt
 800282e:	1a9b      	subgt	r3, r3, r2
 8002830:	18ed      	addgt	r5, r5, r3
 8002832:	2600      	movs	r6, #0
 8002834:	341a      	adds	r4, #26
 8002836:	42b5      	cmp	r5, r6
 8002838:	d11a      	bne.n	8002870 <_printf_common+0xc8>
 800283a:	2000      	movs	r0, #0
 800283c:	e008      	b.n	8002850 <_printf_common+0xa8>
 800283e:	2301      	movs	r3, #1
 8002840:	4652      	mov	r2, sl
 8002842:	4649      	mov	r1, r9
 8002844:	4638      	mov	r0, r7
 8002846:	47c0      	blx	r8
 8002848:	3001      	adds	r0, #1
 800284a:	d103      	bne.n	8002854 <_printf_common+0xac>
 800284c:	f04f 30ff 	mov.w	r0, #4294967295
 8002850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002854:	3501      	adds	r5, #1
 8002856:	e7c6      	b.n	80027e6 <_printf_common+0x3e>
 8002858:	18e1      	adds	r1, r4, r3
 800285a:	1c5a      	adds	r2, r3, #1
 800285c:	2030      	movs	r0, #48	; 0x30
 800285e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002862:	4422      	add	r2, r4
 8002864:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002868:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800286c:	3302      	adds	r3, #2
 800286e:	e7c7      	b.n	8002800 <_printf_common+0x58>
 8002870:	2301      	movs	r3, #1
 8002872:	4622      	mov	r2, r4
 8002874:	4649      	mov	r1, r9
 8002876:	4638      	mov	r0, r7
 8002878:	47c0      	blx	r8
 800287a:	3001      	adds	r0, #1
 800287c:	d0e6      	beq.n	800284c <_printf_common+0xa4>
 800287e:	3601      	adds	r6, #1
 8002880:	e7d9      	b.n	8002836 <_printf_common+0x8e>
	...

08002884 <_printf_i>:
 8002884:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002888:	7e0f      	ldrb	r7, [r1, #24]
 800288a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800288c:	2f78      	cmp	r7, #120	; 0x78
 800288e:	4691      	mov	r9, r2
 8002890:	4680      	mov	r8, r0
 8002892:	460c      	mov	r4, r1
 8002894:	469a      	mov	sl, r3
 8002896:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800289a:	d807      	bhi.n	80028ac <_printf_i+0x28>
 800289c:	2f62      	cmp	r7, #98	; 0x62
 800289e:	d80a      	bhi.n	80028b6 <_printf_i+0x32>
 80028a0:	2f00      	cmp	r7, #0
 80028a2:	f000 80d4 	beq.w	8002a4e <_printf_i+0x1ca>
 80028a6:	2f58      	cmp	r7, #88	; 0x58
 80028a8:	f000 80c0 	beq.w	8002a2c <_printf_i+0x1a8>
 80028ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80028b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80028b4:	e03a      	b.n	800292c <_printf_i+0xa8>
 80028b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80028ba:	2b15      	cmp	r3, #21
 80028bc:	d8f6      	bhi.n	80028ac <_printf_i+0x28>
 80028be:	a101      	add	r1, pc, #4	; (adr r1, 80028c4 <_printf_i+0x40>)
 80028c0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028c4:	0800291d 	.word	0x0800291d
 80028c8:	08002931 	.word	0x08002931
 80028cc:	080028ad 	.word	0x080028ad
 80028d0:	080028ad 	.word	0x080028ad
 80028d4:	080028ad 	.word	0x080028ad
 80028d8:	080028ad 	.word	0x080028ad
 80028dc:	08002931 	.word	0x08002931
 80028e0:	080028ad 	.word	0x080028ad
 80028e4:	080028ad 	.word	0x080028ad
 80028e8:	080028ad 	.word	0x080028ad
 80028ec:	080028ad 	.word	0x080028ad
 80028f0:	08002a35 	.word	0x08002a35
 80028f4:	0800295d 	.word	0x0800295d
 80028f8:	080029ef 	.word	0x080029ef
 80028fc:	080028ad 	.word	0x080028ad
 8002900:	080028ad 	.word	0x080028ad
 8002904:	08002a57 	.word	0x08002a57
 8002908:	080028ad 	.word	0x080028ad
 800290c:	0800295d 	.word	0x0800295d
 8002910:	080028ad 	.word	0x080028ad
 8002914:	080028ad 	.word	0x080028ad
 8002918:	080029f7 	.word	0x080029f7
 800291c:	682b      	ldr	r3, [r5, #0]
 800291e:	1d1a      	adds	r2, r3, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	602a      	str	r2, [r5, #0]
 8002924:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002928:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800292c:	2301      	movs	r3, #1
 800292e:	e09f      	b.n	8002a70 <_printf_i+0x1ec>
 8002930:	6820      	ldr	r0, [r4, #0]
 8002932:	682b      	ldr	r3, [r5, #0]
 8002934:	0607      	lsls	r7, r0, #24
 8002936:	f103 0104 	add.w	r1, r3, #4
 800293a:	6029      	str	r1, [r5, #0]
 800293c:	d501      	bpl.n	8002942 <_printf_i+0xbe>
 800293e:	681e      	ldr	r6, [r3, #0]
 8002940:	e003      	b.n	800294a <_printf_i+0xc6>
 8002942:	0646      	lsls	r6, r0, #25
 8002944:	d5fb      	bpl.n	800293e <_printf_i+0xba>
 8002946:	f9b3 6000 	ldrsh.w	r6, [r3]
 800294a:	2e00      	cmp	r6, #0
 800294c:	da03      	bge.n	8002956 <_printf_i+0xd2>
 800294e:	232d      	movs	r3, #45	; 0x2d
 8002950:	4276      	negs	r6, r6
 8002952:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002956:	485a      	ldr	r0, [pc, #360]	; (8002ac0 <_printf_i+0x23c>)
 8002958:	230a      	movs	r3, #10
 800295a:	e012      	b.n	8002982 <_printf_i+0xfe>
 800295c:	682b      	ldr	r3, [r5, #0]
 800295e:	6820      	ldr	r0, [r4, #0]
 8002960:	1d19      	adds	r1, r3, #4
 8002962:	6029      	str	r1, [r5, #0]
 8002964:	0605      	lsls	r5, r0, #24
 8002966:	d501      	bpl.n	800296c <_printf_i+0xe8>
 8002968:	681e      	ldr	r6, [r3, #0]
 800296a:	e002      	b.n	8002972 <_printf_i+0xee>
 800296c:	0641      	lsls	r1, r0, #25
 800296e:	d5fb      	bpl.n	8002968 <_printf_i+0xe4>
 8002970:	881e      	ldrh	r6, [r3, #0]
 8002972:	4853      	ldr	r0, [pc, #332]	; (8002ac0 <_printf_i+0x23c>)
 8002974:	2f6f      	cmp	r7, #111	; 0x6f
 8002976:	bf0c      	ite	eq
 8002978:	2308      	moveq	r3, #8
 800297a:	230a      	movne	r3, #10
 800297c:	2100      	movs	r1, #0
 800297e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002982:	6865      	ldr	r5, [r4, #4]
 8002984:	60a5      	str	r5, [r4, #8]
 8002986:	2d00      	cmp	r5, #0
 8002988:	bfa2      	ittt	ge
 800298a:	6821      	ldrge	r1, [r4, #0]
 800298c:	f021 0104 	bicge.w	r1, r1, #4
 8002990:	6021      	strge	r1, [r4, #0]
 8002992:	b90e      	cbnz	r6, 8002998 <_printf_i+0x114>
 8002994:	2d00      	cmp	r5, #0
 8002996:	d04b      	beq.n	8002a30 <_printf_i+0x1ac>
 8002998:	4615      	mov	r5, r2
 800299a:	fbb6 f1f3 	udiv	r1, r6, r3
 800299e:	fb03 6711 	mls	r7, r3, r1, r6
 80029a2:	5dc7      	ldrb	r7, [r0, r7]
 80029a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80029a8:	4637      	mov	r7, r6
 80029aa:	42bb      	cmp	r3, r7
 80029ac:	460e      	mov	r6, r1
 80029ae:	d9f4      	bls.n	800299a <_printf_i+0x116>
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d10b      	bne.n	80029cc <_printf_i+0x148>
 80029b4:	6823      	ldr	r3, [r4, #0]
 80029b6:	07de      	lsls	r6, r3, #31
 80029b8:	d508      	bpl.n	80029cc <_printf_i+0x148>
 80029ba:	6923      	ldr	r3, [r4, #16]
 80029bc:	6861      	ldr	r1, [r4, #4]
 80029be:	4299      	cmp	r1, r3
 80029c0:	bfde      	ittt	le
 80029c2:	2330      	movle	r3, #48	; 0x30
 80029c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80029c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80029cc:	1b52      	subs	r2, r2, r5
 80029ce:	6122      	str	r2, [r4, #16]
 80029d0:	f8cd a000 	str.w	sl, [sp]
 80029d4:	464b      	mov	r3, r9
 80029d6:	aa03      	add	r2, sp, #12
 80029d8:	4621      	mov	r1, r4
 80029da:	4640      	mov	r0, r8
 80029dc:	f7ff fee4 	bl	80027a8 <_printf_common>
 80029e0:	3001      	adds	r0, #1
 80029e2:	d14a      	bne.n	8002a7a <_printf_i+0x1f6>
 80029e4:	f04f 30ff 	mov.w	r0, #4294967295
 80029e8:	b004      	add	sp, #16
 80029ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80029ee:	6823      	ldr	r3, [r4, #0]
 80029f0:	f043 0320 	orr.w	r3, r3, #32
 80029f4:	6023      	str	r3, [r4, #0]
 80029f6:	4833      	ldr	r0, [pc, #204]	; (8002ac4 <_printf_i+0x240>)
 80029f8:	2778      	movs	r7, #120	; 0x78
 80029fa:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80029fe:	6823      	ldr	r3, [r4, #0]
 8002a00:	6829      	ldr	r1, [r5, #0]
 8002a02:	061f      	lsls	r7, r3, #24
 8002a04:	f851 6b04 	ldr.w	r6, [r1], #4
 8002a08:	d402      	bmi.n	8002a10 <_printf_i+0x18c>
 8002a0a:	065f      	lsls	r7, r3, #25
 8002a0c:	bf48      	it	mi
 8002a0e:	b2b6      	uxthmi	r6, r6
 8002a10:	07df      	lsls	r7, r3, #31
 8002a12:	bf48      	it	mi
 8002a14:	f043 0320 	orrmi.w	r3, r3, #32
 8002a18:	6029      	str	r1, [r5, #0]
 8002a1a:	bf48      	it	mi
 8002a1c:	6023      	strmi	r3, [r4, #0]
 8002a1e:	b91e      	cbnz	r6, 8002a28 <_printf_i+0x1a4>
 8002a20:	6823      	ldr	r3, [r4, #0]
 8002a22:	f023 0320 	bic.w	r3, r3, #32
 8002a26:	6023      	str	r3, [r4, #0]
 8002a28:	2310      	movs	r3, #16
 8002a2a:	e7a7      	b.n	800297c <_printf_i+0xf8>
 8002a2c:	4824      	ldr	r0, [pc, #144]	; (8002ac0 <_printf_i+0x23c>)
 8002a2e:	e7e4      	b.n	80029fa <_printf_i+0x176>
 8002a30:	4615      	mov	r5, r2
 8002a32:	e7bd      	b.n	80029b0 <_printf_i+0x12c>
 8002a34:	682b      	ldr	r3, [r5, #0]
 8002a36:	6826      	ldr	r6, [r4, #0]
 8002a38:	6961      	ldr	r1, [r4, #20]
 8002a3a:	1d18      	adds	r0, r3, #4
 8002a3c:	6028      	str	r0, [r5, #0]
 8002a3e:	0635      	lsls	r5, r6, #24
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	d501      	bpl.n	8002a48 <_printf_i+0x1c4>
 8002a44:	6019      	str	r1, [r3, #0]
 8002a46:	e002      	b.n	8002a4e <_printf_i+0x1ca>
 8002a48:	0670      	lsls	r0, r6, #25
 8002a4a:	d5fb      	bpl.n	8002a44 <_printf_i+0x1c0>
 8002a4c:	8019      	strh	r1, [r3, #0]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	6123      	str	r3, [r4, #16]
 8002a52:	4615      	mov	r5, r2
 8002a54:	e7bc      	b.n	80029d0 <_printf_i+0x14c>
 8002a56:	682b      	ldr	r3, [r5, #0]
 8002a58:	1d1a      	adds	r2, r3, #4
 8002a5a:	602a      	str	r2, [r5, #0]
 8002a5c:	681d      	ldr	r5, [r3, #0]
 8002a5e:	6862      	ldr	r2, [r4, #4]
 8002a60:	2100      	movs	r1, #0
 8002a62:	4628      	mov	r0, r5
 8002a64:	f7fd fbb4 	bl	80001d0 <memchr>
 8002a68:	b108      	cbz	r0, 8002a6e <_printf_i+0x1ea>
 8002a6a:	1b40      	subs	r0, r0, r5
 8002a6c:	6060      	str	r0, [r4, #4]
 8002a6e:	6863      	ldr	r3, [r4, #4]
 8002a70:	6123      	str	r3, [r4, #16]
 8002a72:	2300      	movs	r3, #0
 8002a74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002a78:	e7aa      	b.n	80029d0 <_printf_i+0x14c>
 8002a7a:	6923      	ldr	r3, [r4, #16]
 8002a7c:	462a      	mov	r2, r5
 8002a7e:	4649      	mov	r1, r9
 8002a80:	4640      	mov	r0, r8
 8002a82:	47d0      	blx	sl
 8002a84:	3001      	adds	r0, #1
 8002a86:	d0ad      	beq.n	80029e4 <_printf_i+0x160>
 8002a88:	6823      	ldr	r3, [r4, #0]
 8002a8a:	079b      	lsls	r3, r3, #30
 8002a8c:	d413      	bmi.n	8002ab6 <_printf_i+0x232>
 8002a8e:	68e0      	ldr	r0, [r4, #12]
 8002a90:	9b03      	ldr	r3, [sp, #12]
 8002a92:	4298      	cmp	r0, r3
 8002a94:	bfb8      	it	lt
 8002a96:	4618      	movlt	r0, r3
 8002a98:	e7a6      	b.n	80029e8 <_printf_i+0x164>
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	4632      	mov	r2, r6
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	4640      	mov	r0, r8
 8002aa2:	47d0      	blx	sl
 8002aa4:	3001      	adds	r0, #1
 8002aa6:	d09d      	beq.n	80029e4 <_printf_i+0x160>
 8002aa8:	3501      	adds	r5, #1
 8002aaa:	68e3      	ldr	r3, [r4, #12]
 8002aac:	9903      	ldr	r1, [sp, #12]
 8002aae:	1a5b      	subs	r3, r3, r1
 8002ab0:	42ab      	cmp	r3, r5
 8002ab2:	dcf2      	bgt.n	8002a9a <_printf_i+0x216>
 8002ab4:	e7eb      	b.n	8002a8e <_printf_i+0x20a>
 8002ab6:	2500      	movs	r5, #0
 8002ab8:	f104 0619 	add.w	r6, r4, #25
 8002abc:	e7f5      	b.n	8002aaa <_printf_i+0x226>
 8002abe:	bf00      	nop
 8002ac0:	08002c09 	.word	0x08002c09
 8002ac4:	08002c1a 	.word	0x08002c1a

08002ac8 <memmove>:
 8002ac8:	4288      	cmp	r0, r1
 8002aca:	b510      	push	{r4, lr}
 8002acc:	eb01 0402 	add.w	r4, r1, r2
 8002ad0:	d902      	bls.n	8002ad8 <memmove+0x10>
 8002ad2:	4284      	cmp	r4, r0
 8002ad4:	4623      	mov	r3, r4
 8002ad6:	d807      	bhi.n	8002ae8 <memmove+0x20>
 8002ad8:	1e43      	subs	r3, r0, #1
 8002ada:	42a1      	cmp	r1, r4
 8002adc:	d008      	beq.n	8002af0 <memmove+0x28>
 8002ade:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002ae2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002ae6:	e7f8      	b.n	8002ada <memmove+0x12>
 8002ae8:	4402      	add	r2, r0
 8002aea:	4601      	mov	r1, r0
 8002aec:	428a      	cmp	r2, r1
 8002aee:	d100      	bne.n	8002af2 <memmove+0x2a>
 8002af0:	bd10      	pop	{r4, pc}
 8002af2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002af6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002afa:	e7f7      	b.n	8002aec <memmove+0x24>

08002afc <_sbrk_r>:
 8002afc:	b538      	push	{r3, r4, r5, lr}
 8002afe:	4d06      	ldr	r5, [pc, #24]	; (8002b18 <_sbrk_r+0x1c>)
 8002b00:	2300      	movs	r3, #0
 8002b02:	4604      	mov	r4, r0
 8002b04:	4608      	mov	r0, r1
 8002b06:	602b      	str	r3, [r5, #0]
 8002b08:	f7fd ff30 	bl	800096c <_sbrk>
 8002b0c:	1c43      	adds	r3, r0, #1
 8002b0e:	d102      	bne.n	8002b16 <_sbrk_r+0x1a>
 8002b10:	682b      	ldr	r3, [r5, #0]
 8002b12:	b103      	cbz	r3, 8002b16 <_sbrk_r+0x1a>
 8002b14:	6023      	str	r3, [r4, #0]
 8002b16:	bd38      	pop	{r3, r4, r5, pc}
 8002b18:	20000268 	.word	0x20000268

08002b1c <memcpy>:
 8002b1c:	440a      	add	r2, r1
 8002b1e:	4291      	cmp	r1, r2
 8002b20:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b24:	d100      	bne.n	8002b28 <memcpy+0xc>
 8002b26:	4770      	bx	lr
 8002b28:	b510      	push	{r4, lr}
 8002b2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b2e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b32:	4291      	cmp	r1, r2
 8002b34:	d1f9      	bne.n	8002b2a <memcpy+0xe>
 8002b36:	bd10      	pop	{r4, pc}

08002b38 <_realloc_r>:
 8002b38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b3c:	4680      	mov	r8, r0
 8002b3e:	4614      	mov	r4, r2
 8002b40:	460e      	mov	r6, r1
 8002b42:	b921      	cbnz	r1, 8002b4e <_realloc_r+0x16>
 8002b44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b48:	4611      	mov	r1, r2
 8002b4a:	f7ff bc49 	b.w	80023e0 <_malloc_r>
 8002b4e:	b92a      	cbnz	r2, 8002b5c <_realloc_r+0x24>
 8002b50:	f7ff fbda 	bl	8002308 <_free_r>
 8002b54:	4625      	mov	r5, r4
 8002b56:	4628      	mov	r0, r5
 8002b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b5c:	f000 f81b 	bl	8002b96 <_malloc_usable_size_r>
 8002b60:	4284      	cmp	r4, r0
 8002b62:	4607      	mov	r7, r0
 8002b64:	d802      	bhi.n	8002b6c <_realloc_r+0x34>
 8002b66:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b6a:	d812      	bhi.n	8002b92 <_realloc_r+0x5a>
 8002b6c:	4621      	mov	r1, r4
 8002b6e:	4640      	mov	r0, r8
 8002b70:	f7ff fc36 	bl	80023e0 <_malloc_r>
 8002b74:	4605      	mov	r5, r0
 8002b76:	2800      	cmp	r0, #0
 8002b78:	d0ed      	beq.n	8002b56 <_realloc_r+0x1e>
 8002b7a:	42bc      	cmp	r4, r7
 8002b7c:	4622      	mov	r2, r4
 8002b7e:	4631      	mov	r1, r6
 8002b80:	bf28      	it	cs
 8002b82:	463a      	movcs	r2, r7
 8002b84:	f7ff ffca 	bl	8002b1c <memcpy>
 8002b88:	4631      	mov	r1, r6
 8002b8a:	4640      	mov	r0, r8
 8002b8c:	f7ff fbbc 	bl	8002308 <_free_r>
 8002b90:	e7e1      	b.n	8002b56 <_realloc_r+0x1e>
 8002b92:	4635      	mov	r5, r6
 8002b94:	e7df      	b.n	8002b56 <_realloc_r+0x1e>

08002b96 <_malloc_usable_size_r>:
 8002b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002b9a:	1f18      	subs	r0, r3, #4
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	bfbc      	itt	lt
 8002ba0:	580b      	ldrlt	r3, [r1, r0]
 8002ba2:	18c0      	addlt	r0, r0, r3
 8002ba4:	4770      	bx	lr
	...

08002ba8 <_init>:
 8002ba8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002baa:	bf00      	nop
 8002bac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bae:	bc08      	pop	{r3}
 8002bb0:	469e      	mov	lr, r3
 8002bb2:	4770      	bx	lr

08002bb4 <_fini>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr
